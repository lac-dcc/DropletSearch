relu (128, 1008, 42, 42)
Time cost of this operator: 0.0026554675
Lowered TIR:
@main = primfn(input0_1: handle, compute_1: handle) -> ()
  attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
  buffers = {compute: Buffer(compute_2: Pointer(float32), float32, [128, 1008, 42, 42], []),
             input0: Buffer(input0_2: Pointer(float32), float32, [128, 1008, 42, 42], [])}
  buffer_map = {input0_1: input0, compute_1: compute} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 256;
  for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 3473) {
    if @tir.likely(((((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x) < 227598336), dtype=bool) {
      compute_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)] = max((float32*)input0_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)], 0f32)
    }
  }
}


; ModuleID = 'TVMAMDGPUModule'
source_filename = "TVMAMDGPUModule"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-ni:7"
target triple = "amdgcn-amd-amdhsa-hcc"

; Function Attrs: nofree nounwind
define dllexport amdgpu_kernel void @default_function_kernel0(float addrspace(1)* noalias nocapture %0, float addrspace(1)* noalias nocapture readonly %1) local_unnamed_addr #0 {
entry:
  %2 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %3 = tail call i32 @llvm.amdgcn.workitem.id.x()
  %4 = shl i32 %2, 8
  %5 = add i32 %4, %3
  br label %for_body

for_body:                                         ; preds = %if_end.7, %entry
  %6 = phi i32 [ 0, %entry ], [ %86, %if_end.7 ]
  %7 = shl nuw nsw i32 %6, 16
  %8 = add i32 %5, %7
  %9 = icmp slt i32 %8, 227598336
  %10 = sext i32 %8 to i64
  br i1 %9, label %if_then, label %if_end, !prof !4

for_end:                                          ; preds = %if_end
  ret void

if_then:                                          ; preds = %for_body
  %11 = getelementptr inbounds float, float addrspace(1)* %0, i64 %10
  %12 = getelementptr inbounds float, float addrspace(1)* %1, i64 %10
  %13 = load float, float addrspace(1)* %12, align 4, !tbaa !5
  %14 = fcmp ogt float %13, 0.000000e+00
  %15 = select i1 %14, float %13, float 0.000000e+00
  store float %15, float addrspace(1)* %11, align 4, !tbaa !9
  br label %if_end

if_end:                                           ; preds = %if_then, %for_body
  %16 = or i32 %6, 1
  %exitcond = icmp eq i32 %16, 3473
  br i1 %exitcond, label %for_end, label %for_body.1, !prof !12

for_body.1:                                       ; preds = %if_end
  %17 = shl nuw nsw i32 %16, 16
  %18 = add i32 %5, %17
  %19 = icmp slt i32 %18, 227598336
  %20 = sext i32 %18 to i64
  br i1 %19, label %if_then.1, label %if_end.1, !prof !4

if_then.1:                                        ; preds = %for_body.1
  %21 = getelementptr inbounds float, float addrspace(1)* %0, i64 %20
  %22 = getelementptr inbounds float, float addrspace(1)* %1, i64 %20
  %23 = load float, float addrspace(1)* %22, align 4, !tbaa !5
  %24 = fcmp ogt float %23, 0.000000e+00
  %25 = select i1 %24, float %23, float 0.000000e+00
  store float %25, float addrspace(1)* %21, align 4, !tbaa !9
  br label %if_end.1

if_end.1:                                         ; preds = %if_then.1, %for_body.1
  %26 = shl i32 %6, 16
  %27 = or i32 %26, 131072
  %28 = add i32 %5, %27
  %29 = icmp slt i32 %28, 227598336
  %30 = sext i32 %28 to i64
  br i1 %29, label %if_then.2, label %if_end.2, !prof !4

if_then.2:                                        ; preds = %if_end.1
  %31 = getelementptr inbounds float, float addrspace(1)* %0, i64 %30
  %32 = getelementptr inbounds float, float addrspace(1)* %1, i64 %30
  %33 = load float, float addrspace(1)* %32, align 4, !tbaa !5
  %34 = fcmp ogt float %33, 0.000000e+00
  %35 = select i1 %34, float %33, float 0.000000e+00
  store float %35, float addrspace(1)* %31, align 4, !tbaa !9
  br label %if_end.2

if_end.2:                                         ; preds = %if_then.2, %if_end.1
  %36 = shl i32 %6, 16
  %37 = or i32 %36, 196608
  %38 = add i32 %5, %37
  %39 = icmp slt i32 %38, 227598336
  %40 = sext i32 %38 to i64
  br i1 %39, label %if_then.3, label %if_end.3, !prof !4

if_then.3:                                        ; preds = %if_end.2
  %41 = getelementptr inbounds float, float addrspace(1)* %0, i64 %40
  %42 = getelementptr inbounds float, float addrspace(1)* %1, i64 %40
  %43 = load float, float addrspace(1)* %42, align 4, !tbaa !5
  %44 = fcmp ogt float %43, 0.000000e+00
  %45 = select i1 %44, float %43, float 0.000000e+00
  store float %45, float addrspace(1)* %41, align 4, !tbaa !9
  br label %if_end.3

if_end.3:                                         ; preds = %if_then.3, %if_end.2
  %46 = shl i32 %6, 16
  %47 = or i32 %46, 262144
  %48 = add i32 %5, %47
  %49 = icmp slt i32 %48, 227598336
  %50 = sext i32 %48 to i64
  br i1 %49, label %if_then.4, label %if_end.4, !prof !4

if_then.4:                                        ; preds = %if_end.3
  %51 = getelementptr inbounds float, float addrspace(1)* %0, i64 %50
  %52 = getelementptr inbounds float, float addrspace(1)* %1, i64 %50
  %53 = load float, float addrspace(1)* %52, align 4, !tbaa !5
  %54 = fcmp ogt float %53, 0.000000e+00
  %55 = select i1 %54, float %53, float 0.000000e+00
  store float %55, float addrspace(1)* %51, align 4, !tbaa !9
  br label %if_end.4

if_end.4:                                         ; preds = %if_then.4, %if_end.3
  %56 = shl i32 %6, 16
  %57 = or i32 %56, 327680
  %58 = add i32 %5, %57
  %59 = icmp slt i32 %58, 227598336
  %60 = sext i32 %58 to i64
  br i1 %59, label %if_then.5, label %if_end.5, !prof !4

if_then.5:                                        ; preds = %if_end.4
  %61 = getelementptr inbounds float, float addrspace(1)* %0, i64 %60
  %62 = getelementptr inbounds float, float addrspace(1)* %1, i64 %60
  %63 = load float, float addrspace(1)* %62, align 4, !tbaa !5
  %64 = fcmp ogt float %63, 0.000000e+00
  %65 = select i1 %64, float %63, float 0.000000e+00
  store float %65, float addrspace(1)* %61, align 4, !tbaa !9
  br label %if_end.5

if_end.5:                                         ; preds = %if_then.5, %if_end.4
  %66 = shl i32 %6, 16
  %67 = or i32 %66, 393216
  %68 = add i32 %5, %67
  %69 = icmp slt i32 %68, 227598336
  %70 = sext i32 %68 to i64
  br i1 %69, label %if_then.6, label %if_end.6, !prof !4

if_then.6:                                        ; preds = %if_end.5
  %71 = getelementptr inbounds float, float addrspace(1)* %0, i64 %70
  %72 = getelementptr inbounds float, float addrspace(1)* %1, i64 %70
  %73 = load float, float addrspace(1)* %72, align 4, !tbaa !5
  %74 = fcmp ogt float %73, 0.000000e+00
  %75 = select i1 %74, float %73, float 0.000000e+00
  store float %75, float addrspace(1)* %71, align 4, !tbaa !9
  br label %if_end.6

if_end.6:                                         ; preds = %if_then.6, %if_end.5
  %76 = shl i32 %6, 16
  %77 = or i32 %76, 458752
  %78 = add i32 %5, %77
  %79 = icmp slt i32 %78, 227598336
  %80 = sext i32 %78 to i64
  br i1 %79, label %if_then.7, label %if_end.7, !prof !4

if_then.7:                                        ; preds = %if_end.6
  %81 = getelementptr inbounds float, float addrspace(1)* %0, i64 %80
  %82 = getelementptr inbounds float, float addrspace(1)* %1, i64 %80
  %83 = load float, float addrspace(1)* %82, align 4, !tbaa !5
  %84 = fcmp ogt float %83, 0.000000e+00
  %85 = select i1 %84, float %83, float 0.000000e+00
  store float %85, float addrspace(1)* %81, align 4, !tbaa !9
  br label %if_end.7

if_end.7:                                         ; preds = %if_then.7, %if_end.6
  %86 = add nuw nsw i32 %6, 8
  br label %for_body
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workgroup.id.x() #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workitem.id.x() #1

attributes #0 = { nofree nounwind "amdgpu-flat-work-group-size"="1,1024" "no-nans-fp-math"="true" }
attributes #1 = { nounwind readnone speculatable }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 12.0.0 (/src/external/llvm-project/clang 1100ebe275a9dcc79a9abbda902b6f10738f2f5d)"}
!4 = !{!"branch_weights", i32 1048576, i32 1}
!5 = !{!6, !6, i64 0}
!6 = !{!"float", !7, i64 0}
!7 = !{!"0x2185930", !8, i64 0}
!8 = !{!"tvm-tbaa"}
!9 = !{!10, !10, i64 0}
!10 = !{!"float", !11, i64 0}
!11 = !{!"0x2187700", !8, i64 0}
!12 = !{!"branch_weights", i32 1, i32 1048576}

relu (128, 256, 14, 14)
Time cost of this operator: 0.0000747530
Lowered TIR:
@main = primfn(input0_1: handle, compute_1: handle) -> ()
  attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
  buffers = {compute: Buffer(compute_2: Pointer(float32), float32, [128, 256, 14, 14], []),
             input0: Buffer(input0_2: Pointer(float32), float32, [128, 256, 14, 14], [])}
  buffer_map = {input0_1: input0, compute_1: compute} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 256;
  for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 98) {
    compute_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)] = max((float32*)input0_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)], 0f32)
  }
}


; ModuleID = 'TVMAMDGPUModule'
source_filename = "TVMAMDGPUModule"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-ni:7"
target triple = "amdgcn-amd-amdhsa-hcc"

; Function Attrs: nofree nounwind
define dllexport amdgpu_kernel void @default_function_kernel0(float addrspace(1)* noalias nocapture %0, float addrspace(1)* noalias nocapture readonly %1) local_unnamed_addr #0 {
entry:
  %2 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %3 = tail call i32 @llvm.amdgcn.workitem.id.x()
  %4 = shl i32 %2, 8
  %5 = add i32 %4, %3
  br label %for_body

for_body:                                         ; preds = %for_body, %entry
  %6 = phi i32 [ 0, %entry ], [ %132, %for_body ]
  %7 = shl nuw nsw i32 %6, 16
  %8 = add i32 %5, %7
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds float, float addrspace(1)* %1, i64 %9
  %11 = load float, float addrspace(1)* %10, align 4, !tbaa !4
  %12 = fcmp ogt float %11, 0.000000e+00
  %13 = select i1 %12, float %11, float 0.000000e+00
  %14 = getelementptr inbounds float, float addrspace(1)* %0, i64 %9
  store float %13, float addrspace(1)* %14, align 4, !tbaa !8
  %15 = shl i32 %6, 16
  %16 = or i32 %15, 65536
  %17 = add i32 %5, %16
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds float, float addrspace(1)* %1, i64 %18
  %20 = load float, float addrspace(1)* %19, align 4, !tbaa !4
  %21 = fcmp ogt float %20, 0.000000e+00
  %22 = select i1 %21, float %20, float 0.000000e+00
  %23 = getelementptr inbounds float, float addrspace(1)* %0, i64 %18
  store float %22, float addrspace(1)* %23, align 4, !tbaa !8
  %24 = shl i32 %6, 16
  %25 = add i32 %24, 131072
  %26 = add i32 %5, %25
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds float, float addrspace(1)* %1, i64 %27
  %29 = load float, float addrspace(1)* %28, align 4, !tbaa !4
  %30 = fcmp ogt float %29, 0.000000e+00
  %31 = select i1 %30, float %29, float 0.000000e+00
  %32 = getelementptr inbounds float, float addrspace(1)* %0, i64 %27
  store float %31, float addrspace(1)* %32, align 4, !tbaa !8
  %33 = shl i32 %6, 16
  %34 = add i32 %33, 196608
  %35 = add i32 %5, %34
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds float, float addrspace(1)* %1, i64 %36
  %38 = load float, float addrspace(1)* %37, align 4, !tbaa !4
  %39 = fcmp ogt float %38, 0.000000e+00
  %40 = select i1 %39, float %38, float 0.000000e+00
  %41 = getelementptr inbounds float, float addrspace(1)* %0, i64 %36
  store float %40, float addrspace(1)* %41, align 4, !tbaa !8
  %42 = shl i32 %6, 16
  %43 = add i32 %42, 262144
  %44 = add i32 %5, %43
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds float, float addrspace(1)* %1, i64 %45
  %47 = load float, float addrspace(1)* %46, align 4, !tbaa !4
  %48 = fcmp ogt float %47, 0.000000e+00
  %49 = select i1 %48, float %47, float 0.000000e+00
  %50 = getelementptr inbounds float, float addrspace(1)* %0, i64 %45
  store float %49, float addrspace(1)* %50, align 4, !tbaa !8
  %51 = shl i32 %6, 16
  %52 = add i32 %51, 327680
  %53 = add i32 %5, %52
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds float, float addrspace(1)* %1, i64 %54
  %56 = load float, float addrspace(1)* %55, align 4, !tbaa !4
  %57 = fcmp ogt float %56, 0.000000e+00
  %58 = select i1 %57, float %56, float 0.000000e+00
  %59 = getelementptr inbounds float, float addrspace(1)* %0, i64 %54
  store float %58, float addrspace(1)* %59, align 4, !tbaa !8
  %60 = shl i32 %6, 16
  %61 = add i32 %60, 393216
  %62 = add i32 %5, %61
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds float, float addrspace(1)* %1, i64 %63
  %65 = load float, float addrspace(1)* %64, align 4, !tbaa !4
  %66 = fcmp ogt float %65, 0.000000e+00
  %67 = select i1 %66, float %65, float 0.000000e+00
  %68 = getelementptr inbounds float, float addrspace(1)* %0, i64 %63
  store float %67, float addrspace(1)* %68, align 4, !tbaa !8
  %69 = shl i32 %6, 16
  %70 = add i32 %69, 458752
  %71 = add i32 %5, %70
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds float, float addrspace(1)* %1, i64 %72
  %74 = load float, float addrspace(1)* %73, align 4, !tbaa !4
  %75 = fcmp ogt float %74, 0.000000e+00
  %76 = select i1 %75, float %74, float 0.000000e+00
  %77 = getelementptr inbounds float, float addrspace(1)* %0, i64 %72
  store float %76, float addrspace(1)* %77, align 4, !tbaa !8
  %78 = shl i32 %6, 16
  %79 = add i32 %78, 524288
  %80 = add i32 %5, %79
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds float, float addrspace(1)* %1, i64 %81
  %83 = load float, float addrspace(1)* %82, align 4, !tbaa !4
  %84 = fcmp ogt float %83, 0.000000e+00
  %85 = select i1 %84, float %83, float 0.000000e+00
  %86 = getelementptr inbounds float, float addrspace(1)* %0, i64 %81
  store float %85, float addrspace(1)* %86, align 4, !tbaa !8
  %87 = shl i32 %6, 16
  %88 = add i32 %87, 589824
  %89 = add i32 %5, %88
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds float, float addrspace(1)* %1, i64 %90
  %92 = load float, float addrspace(1)* %91, align 4, !tbaa !4
  %93 = fcmp ogt float %92, 0.000000e+00
  %94 = select i1 %93, float %92, float 0.000000e+00
  %95 = getelementptr inbounds float, float addrspace(1)* %0, i64 %90
  store float %94, float addrspace(1)* %95, align 4, !tbaa !8
  %96 = shl i32 %6, 16
  %97 = add i32 %96, 655360
  %98 = add i32 %5, %97
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds float, float addrspace(1)* %1, i64 %99
  %101 = load float, float addrspace(1)* %100, align 4, !tbaa !4
  %102 = fcmp ogt float %101, 0.000000e+00
  %103 = select i1 %102, float %101, float 0.000000e+00
  %104 = getelementptr inbounds float, float addrspace(1)* %0, i64 %99
  store float %103, float addrspace(1)* %104, align 4, !tbaa !8
  %105 = shl i32 %6, 16
  %106 = add i32 %105, 720896
  %107 = add i32 %5, %106
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds float, float addrspace(1)* %1, i64 %108
  %110 = load float, float addrspace(1)* %109, align 4, !tbaa !4
  %111 = fcmp ogt float %110, 0.000000e+00
  %112 = select i1 %111, float %110, float 0.000000e+00
  %113 = getelementptr inbounds float, float addrspace(1)* %0, i64 %108
  store float %112, float addrspace(1)* %113, align 4, !tbaa !8
  %114 = shl i32 %6, 16
  %115 = add i32 %114, 786432
  %116 = add i32 %5, %115
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds float, float addrspace(1)* %1, i64 %117
  %119 = load float, float addrspace(1)* %118, align 4, !tbaa !4
  %120 = fcmp ogt float %119, 0.000000e+00
  %121 = select i1 %120, float %119, float 0.000000e+00
  %122 = getelementptr inbounds float, float addrspace(1)* %0, i64 %117
  store float %121, float addrspace(1)* %122, align 4, !tbaa !8
  %123 = shl i32 %6, 16
  %124 = add i32 %123, 851968
  %125 = add i32 %5, %124
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds float, float addrspace(1)* %1, i64 %126
  %128 = load float, float addrspace(1)* %127, align 4, !tbaa !4
  %129 = fcmp ogt float %128, 0.000000e+00
  %130 = select i1 %129, float %128, float 0.000000e+00
  %131 = getelementptr inbounds float, float addrspace(1)* %0, i64 %126
  store float %130, float addrspace(1)* %131, align 4, !tbaa !8
  %132 = add nuw nsw i32 %6, 14
  %exitcond.13 = icmp eq i32 %132, 98
  br i1 %exitcond.13, label %for_end, label %for_body, !prof !11

for_end:                                          ; preds = %for_body
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workgroup.id.x() #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workitem.id.x() #1

attributes #0 = { nofree nounwind "amdgpu-flat-work-group-size"="1,1024" "no-nans-fp-math"="true" }
attributes #1 = { nounwind readnone speculatable }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 12.0.0 (/src/external/llvm-project/clang 1100ebe275a9dcc79a9abbda902b6f10738f2f5d)"}
!4 = !{!5, !5, i64 0}
!5 = !{!"float", !6, i64 0}
!6 = !{!"0x21b5df0", !7, i64 0}
!7 = !{!"tvm-tbaa"}
!8 = !{!9, !9, i64 0}
!9 = !{!"float", !10, i64 0}
!10 = !{!"0x21b5d30", !7, i64 0}
!11 = !{!"branch_weights", i32 1, i32 1048576}

relu (128, 1024, 14, 14)
Time cost of this operator: 0.0002904775
Lowered TIR:
@main = primfn(input0_1: handle, compute_1: handle) -> ()
  attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
  buffers = {compute: Buffer(compute_2: Pointer(float32), float32, [128, 1024, 14, 14], []),
             input0: Buffer(input0_2: Pointer(float32), float32, [128, 1024, 14, 14], [])}
  buffer_map = {input0_1: input0, compute_1: compute} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 256;
  for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 392) {
    compute_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)] = max((float32*)input0_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)], 0f32)
  }
}


; ModuleID = 'TVMAMDGPUModule'
source_filename = "TVMAMDGPUModule"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-ni:7"
target triple = "amdgcn-amd-amdhsa-hcc"

; Function Attrs: nofree nounwind
define dllexport amdgpu_kernel void @default_function_kernel0(float addrspace(1)* noalias nocapture %0, float addrspace(1)* noalias nocapture readonly %1) local_unnamed_addr #0 {
entry:
  %2 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %3 = tail call i32 @llvm.amdgcn.workitem.id.x()
  %4 = shl i32 %2, 8
  %5 = add i32 %4, %3
  br label %for_body

for_body:                                         ; preds = %for_body, %entry
  %6 = phi i32 [ 0, %entry ], [ %132, %for_body ]
  %7 = shl nuw nsw i32 %6, 16
  %8 = add i32 %5, %7
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds float, float addrspace(1)* %1, i64 %9
  %11 = load float, float addrspace(1)* %10, align 4, !tbaa !4
  %12 = fcmp ogt float %11, 0.000000e+00
  %13 = select i1 %12, float %11, float 0.000000e+00
  %14 = getelementptr inbounds float, float addrspace(1)* %0, i64 %9
  store float %13, float addrspace(1)* %14, align 4, !tbaa !8
  %15 = shl i32 %6, 16
  %16 = or i32 %15, 65536
  %17 = add i32 %5, %16
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds float, float addrspace(1)* %1, i64 %18
  %20 = load float, float addrspace(1)* %19, align 4, !tbaa !4
  %21 = fcmp ogt float %20, 0.000000e+00
  %22 = select i1 %21, float %20, float 0.000000e+00
  %23 = getelementptr inbounds float, float addrspace(1)* %0, i64 %18
  store float %22, float addrspace(1)* %23, align 4, !tbaa !8
  %24 = shl i32 %6, 16
  %25 = add i32 %24, 131072
  %26 = add i32 %5, %25
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds float, float addrspace(1)* %1, i64 %27
  %29 = load float, float addrspace(1)* %28, align 4, !tbaa !4
  %30 = fcmp ogt float %29, 0.000000e+00
  %31 = select i1 %30, float %29, float 0.000000e+00
  %32 = getelementptr inbounds float, float addrspace(1)* %0, i64 %27
  store float %31, float addrspace(1)* %32, align 4, !tbaa !8
  %33 = shl i32 %6, 16
  %34 = add i32 %33, 196608
  %35 = add i32 %5, %34
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds float, float addrspace(1)* %1, i64 %36
  %38 = load float, float addrspace(1)* %37, align 4, !tbaa !4
  %39 = fcmp ogt float %38, 0.000000e+00
  %40 = select i1 %39, float %38, float 0.000000e+00
  %41 = getelementptr inbounds float, float addrspace(1)* %0, i64 %36
  store float %40, float addrspace(1)* %41, align 4, !tbaa !8
  %42 = shl i32 %6, 16
  %43 = add i32 %42, 262144
  %44 = add i32 %5, %43
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds float, float addrspace(1)* %1, i64 %45
  %47 = load float, float addrspace(1)* %46, align 4, !tbaa !4
  %48 = fcmp ogt float %47, 0.000000e+00
  %49 = select i1 %48, float %47, float 0.000000e+00
  %50 = getelementptr inbounds float, float addrspace(1)* %0, i64 %45
  store float %49, float addrspace(1)* %50, align 4, !tbaa !8
  %51 = shl i32 %6, 16
  %52 = add i32 %51, 327680
  %53 = add i32 %5, %52
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds float, float addrspace(1)* %1, i64 %54
  %56 = load float, float addrspace(1)* %55, align 4, !tbaa !4
  %57 = fcmp ogt float %56, 0.000000e+00
  %58 = select i1 %57, float %56, float 0.000000e+00
  %59 = getelementptr inbounds float, float addrspace(1)* %0, i64 %54
  store float %58, float addrspace(1)* %59, align 4, !tbaa !8
  %60 = shl i32 %6, 16
  %61 = add i32 %60, 393216
  %62 = add i32 %5, %61
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds float, float addrspace(1)* %1, i64 %63
  %65 = load float, float addrspace(1)* %64, align 4, !tbaa !4
  %66 = fcmp ogt float %65, 0.000000e+00
  %67 = select i1 %66, float %65, float 0.000000e+00
  %68 = getelementptr inbounds float, float addrspace(1)* %0, i64 %63
  store float %67, float addrspace(1)* %68, align 4, !tbaa !8
  %69 = shl i32 %6, 16
  %70 = add i32 %69, 458752
  %71 = add i32 %5, %70
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds float, float addrspace(1)* %1, i64 %72
  %74 = load float, float addrspace(1)* %73, align 4, !tbaa !4
  %75 = fcmp ogt float %74, 0.000000e+00
  %76 = select i1 %75, float %74, float 0.000000e+00
  %77 = getelementptr inbounds float, float addrspace(1)* %0, i64 %72
  store float %76, float addrspace(1)* %77, align 4, !tbaa !8
  %78 = shl i32 %6, 16
  %79 = add i32 %78, 524288
  %80 = add i32 %5, %79
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds float, float addrspace(1)* %1, i64 %81
  %83 = load float, float addrspace(1)* %82, align 4, !tbaa !4
  %84 = fcmp ogt float %83, 0.000000e+00
  %85 = select i1 %84, float %83, float 0.000000e+00
  %86 = getelementptr inbounds float, float addrspace(1)* %0, i64 %81
  store float %85, float addrspace(1)* %86, align 4, !tbaa !8
  %87 = shl i32 %6, 16
  %88 = add i32 %87, 589824
  %89 = add i32 %5, %88
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds float, float addrspace(1)* %1, i64 %90
  %92 = load float, float addrspace(1)* %91, align 4, !tbaa !4
  %93 = fcmp ogt float %92, 0.000000e+00
  %94 = select i1 %93, float %92, float 0.000000e+00
  %95 = getelementptr inbounds float, float addrspace(1)* %0, i64 %90
  store float %94, float addrspace(1)* %95, align 4, !tbaa !8
  %96 = shl i32 %6, 16
  %97 = add i32 %96, 655360
  %98 = add i32 %5, %97
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds float, float addrspace(1)* %1, i64 %99
  %101 = load float, float addrspace(1)* %100, align 4, !tbaa !4
  %102 = fcmp ogt float %101, 0.000000e+00
  %103 = select i1 %102, float %101, float 0.000000e+00
  %104 = getelementptr inbounds float, float addrspace(1)* %0, i64 %99
  store float %103, float addrspace(1)* %104, align 4, !tbaa !8
  %105 = shl i32 %6, 16
  %106 = add i32 %105, 720896
  %107 = add i32 %5, %106
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds float, float addrspace(1)* %1, i64 %108
  %110 = load float, float addrspace(1)* %109, align 4, !tbaa !4
  %111 = fcmp ogt float %110, 0.000000e+00
  %112 = select i1 %111, float %110, float 0.000000e+00
  %113 = getelementptr inbounds float, float addrspace(1)* %0, i64 %108
  store float %112, float addrspace(1)* %113, align 4, !tbaa !8
  %114 = shl i32 %6, 16
  %115 = add i32 %114, 786432
  %116 = add i32 %5, %115
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds float, float addrspace(1)* %1, i64 %117
  %119 = load float, float addrspace(1)* %118, align 4, !tbaa !4
  %120 = fcmp ogt float %119, 0.000000e+00
  %121 = select i1 %120, float %119, float 0.000000e+00
  %122 = getelementptr inbounds float, float addrspace(1)* %0, i64 %117
  store float %121, float addrspace(1)* %122, align 4, !tbaa !8
  %123 = shl i32 %6, 16
  %124 = add i32 %123, 851968
  %125 = add i32 %5, %124
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds float, float addrspace(1)* %1, i64 %126
  %128 = load float, float addrspace(1)* %127, align 4, !tbaa !4
  %129 = fcmp ogt float %128, 0.000000e+00
  %130 = select i1 %129, float %128, float 0.000000e+00
  %131 = getelementptr inbounds float, float addrspace(1)* %0, i64 %126
  store float %130, float addrspace(1)* %131, align 4, !tbaa !8
  %132 = add nuw nsw i32 %6, 14
  %exitcond.13 = icmp eq i32 %132, 392
  br i1 %exitcond.13, label %for_end, label %for_body, !prof !11

for_end:                                          ; preds = %for_body
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workgroup.id.x() #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workitem.id.x() #1

attributes #0 = { nofree nounwind "amdgpu-flat-work-group-size"="1,1024" "no-nans-fp-math"="true" }
attributes #1 = { nounwind readnone speculatable }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 12.0.0 (/src/external/llvm-project/clang 1100ebe275a9dcc79a9abbda902b6f10738f2f5d)"}
!4 = !{!5, !5, i64 0}
!5 = !{!"float", !6, i64 0}
!6 = !{!"0x2274b90", !7, i64 0}
!7 = !{!"tvm-tbaa"}
!8 = !{!9, !9, i64 0}
!9 = !{!"float", !10, i64 0}
!10 = !{!"0x2274d30", !7, i64 0}
!11 = !{!"branch_weights", i32 1, i32 1048576}

relu (128, 512, 14, 14)
Time cost of this operator: 0.0001459343
Lowered TIR:
@main = primfn(input0_1: handle, compute_1: handle) -> ()
  attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
  buffers = {compute: Buffer(compute_2: Pointer(float32), float32, [128, 512, 14, 14], []),
             input0: Buffer(input0_2: Pointer(float32), float32, [128, 512, 14, 14], [])}
  buffer_map = {input0_1: input0, compute_1: compute} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 256;
  for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 196) {
    compute_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)] = max((float32*)input0_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)], 0f32)
  }
}


; ModuleID = 'TVMAMDGPUModule'
source_filename = "TVMAMDGPUModule"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-ni:7"
target triple = "amdgcn-amd-amdhsa-hcc"

; Function Attrs: nofree nounwind
define dllexport amdgpu_kernel void @default_function_kernel0(float addrspace(1)* noalias nocapture %0, float addrspace(1)* noalias nocapture readonly %1) local_unnamed_addr #0 {
entry:
  %2 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %3 = tail call i32 @llvm.amdgcn.workitem.id.x()
  %4 = shl i32 %2, 8
  %5 = add i32 %4, %3
  br label %for_body

for_body:                                         ; preds = %for_body, %entry
  %6 = phi i32 [ 0, %entry ], [ %132, %for_body ]
  %7 = shl nuw nsw i32 %6, 16
  %8 = add i32 %5, %7
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds float, float addrspace(1)* %1, i64 %9
  %11 = load float, float addrspace(1)* %10, align 4, !tbaa !4
  %12 = fcmp ogt float %11, 0.000000e+00
  %13 = select i1 %12, float %11, float 0.000000e+00
  %14 = getelementptr inbounds float, float addrspace(1)* %0, i64 %9
  store float %13, float addrspace(1)* %14, align 4, !tbaa !8
  %15 = shl i32 %6, 16
  %16 = or i32 %15, 65536
  %17 = add i32 %5, %16
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds float, float addrspace(1)* %1, i64 %18
  %20 = load float, float addrspace(1)* %19, align 4, !tbaa !4
  %21 = fcmp ogt float %20, 0.000000e+00
  %22 = select i1 %21, float %20, float 0.000000e+00
  %23 = getelementptr inbounds float, float addrspace(1)* %0, i64 %18
  store float %22, float addrspace(1)* %23, align 4, !tbaa !8
  %24 = shl i32 %6, 16
  %25 = add i32 %24, 131072
  %26 = add i32 %5, %25
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds float, float addrspace(1)* %1, i64 %27
  %29 = load float, float addrspace(1)* %28, align 4, !tbaa !4
  %30 = fcmp ogt float %29, 0.000000e+00
  %31 = select i1 %30, float %29, float 0.000000e+00
  %32 = getelementptr inbounds float, float addrspace(1)* %0, i64 %27
  store float %31, float addrspace(1)* %32, align 4, !tbaa !8
  %33 = shl i32 %6, 16
  %34 = add i32 %33, 196608
  %35 = add i32 %5, %34
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds float, float addrspace(1)* %1, i64 %36
  %38 = load float, float addrspace(1)* %37, align 4, !tbaa !4
  %39 = fcmp ogt float %38, 0.000000e+00
  %40 = select i1 %39, float %38, float 0.000000e+00
  %41 = getelementptr inbounds float, float addrspace(1)* %0, i64 %36
  store float %40, float addrspace(1)* %41, align 4, !tbaa !8
  %42 = shl i32 %6, 16
  %43 = add i32 %42, 262144
  %44 = add i32 %5, %43
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds float, float addrspace(1)* %1, i64 %45
  %47 = load float, float addrspace(1)* %46, align 4, !tbaa !4
  %48 = fcmp ogt float %47, 0.000000e+00
  %49 = select i1 %48, float %47, float 0.000000e+00
  %50 = getelementptr inbounds float, float addrspace(1)* %0, i64 %45
  store float %49, float addrspace(1)* %50, align 4, !tbaa !8
  %51 = shl i32 %6, 16
  %52 = add i32 %51, 327680
  %53 = add i32 %5, %52
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds float, float addrspace(1)* %1, i64 %54
  %56 = load float, float addrspace(1)* %55, align 4, !tbaa !4
  %57 = fcmp ogt float %56, 0.000000e+00
  %58 = select i1 %57, float %56, float 0.000000e+00
  %59 = getelementptr inbounds float, float addrspace(1)* %0, i64 %54
  store float %58, float addrspace(1)* %59, align 4, !tbaa !8
  %60 = shl i32 %6, 16
  %61 = add i32 %60, 393216
  %62 = add i32 %5, %61
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds float, float addrspace(1)* %1, i64 %63
  %65 = load float, float addrspace(1)* %64, align 4, !tbaa !4
  %66 = fcmp ogt float %65, 0.000000e+00
  %67 = select i1 %66, float %65, float 0.000000e+00
  %68 = getelementptr inbounds float, float addrspace(1)* %0, i64 %63
  store float %67, float addrspace(1)* %68, align 4, !tbaa !8
  %69 = shl i32 %6, 16
  %70 = add i32 %69, 458752
  %71 = add i32 %5, %70
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds float, float addrspace(1)* %1, i64 %72
  %74 = load float, float addrspace(1)* %73, align 4, !tbaa !4
  %75 = fcmp ogt float %74, 0.000000e+00
  %76 = select i1 %75, float %74, float 0.000000e+00
  %77 = getelementptr inbounds float, float addrspace(1)* %0, i64 %72
  store float %76, float addrspace(1)* %77, align 4, !tbaa !8
  %78 = shl i32 %6, 16
  %79 = add i32 %78, 524288
  %80 = add i32 %5, %79
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds float, float addrspace(1)* %1, i64 %81
  %83 = load float, float addrspace(1)* %82, align 4, !tbaa !4
  %84 = fcmp ogt float %83, 0.000000e+00
  %85 = select i1 %84, float %83, float 0.000000e+00
  %86 = getelementptr inbounds float, float addrspace(1)* %0, i64 %81
  store float %85, float addrspace(1)* %86, align 4, !tbaa !8
  %87 = shl i32 %6, 16
  %88 = add i32 %87, 589824
  %89 = add i32 %5, %88
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds float, float addrspace(1)* %1, i64 %90
  %92 = load float, float addrspace(1)* %91, align 4, !tbaa !4
  %93 = fcmp ogt float %92, 0.000000e+00
  %94 = select i1 %93, float %92, float 0.000000e+00
  %95 = getelementptr inbounds float, float addrspace(1)* %0, i64 %90
  store float %94, float addrspace(1)* %95, align 4, !tbaa !8
  %96 = shl i32 %6, 16
  %97 = add i32 %96, 655360
  %98 = add i32 %5, %97
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds float, float addrspace(1)* %1, i64 %99
  %101 = load float, float addrspace(1)* %100, align 4, !tbaa !4
  %102 = fcmp ogt float %101, 0.000000e+00
  %103 = select i1 %102, float %101, float 0.000000e+00
  %104 = getelementptr inbounds float, float addrspace(1)* %0, i64 %99
  store float %103, float addrspace(1)* %104, align 4, !tbaa !8
  %105 = shl i32 %6, 16
  %106 = add i32 %105, 720896
  %107 = add i32 %5, %106
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds float, float addrspace(1)* %1, i64 %108
  %110 = load float, float addrspace(1)* %109, align 4, !tbaa !4
  %111 = fcmp ogt float %110, 0.000000e+00
  %112 = select i1 %111, float %110, float 0.000000e+00
  %113 = getelementptr inbounds float, float addrspace(1)* %0, i64 %108
  store float %112, float addrspace(1)* %113, align 4, !tbaa !8
  %114 = shl i32 %6, 16
  %115 = add i32 %114, 786432
  %116 = add i32 %5, %115
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds float, float addrspace(1)* %1, i64 %117
  %119 = load float, float addrspace(1)* %118, align 4, !tbaa !4
  %120 = fcmp ogt float %119, 0.000000e+00
  %121 = select i1 %120, float %119, float 0.000000e+00
  %122 = getelementptr inbounds float, float addrspace(1)* %0, i64 %117
  store float %121, float addrspace(1)* %122, align 4, !tbaa !8
  %123 = shl i32 %6, 16
  %124 = add i32 %123, 851968
  %125 = add i32 %5, %124
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds float, float addrspace(1)* %1, i64 %126
  %128 = load float, float addrspace(1)* %127, align 4, !tbaa !4
  %129 = fcmp ogt float %128, 0.000000e+00
  %130 = select i1 %129, float %128, float 0.000000e+00
  %131 = getelementptr inbounds float, float addrspace(1)* %0, i64 %126
  store float %130, float addrspace(1)* %131, align 4, !tbaa !8
  %132 = add nuw nsw i32 %6, 14
  %exitcond.13 = icmp eq i32 %132, 196
  br i1 %exitcond.13, label %for_end, label %for_body, !prof !11

for_end:                                          ; preds = %for_body
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workgroup.id.x() #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workitem.id.x() #1

attributes #0 = { nofree nounwind "amdgpu-flat-work-group-size"="1,1024" "no-nans-fp-math"="true" }
attributes #1 = { nounwind readnone speculatable }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 12.0.0 (/src/external/llvm-project/clang 1100ebe275a9dcc79a9abbda902b6f10738f2f5d)"}
!4 = !{!5, !5, i64 0}
!5 = !{!"float", !6, i64 0}
!6 = !{!"0x224f850", !7, i64 0}
!7 = !{!"tvm-tbaa"}
!8 = !{!9, !9, i64 0}
!9 = !{!"float", !10, i64 0}
!10 = !{!"0x224fd30", !7, i64 0}
!11 = !{!"branch_weights", i32 1, i32 1048576}

relu (128, 96, 165, 165)
Time cost of this operator: 0.0039242880
Lowered TIR:
@main = primfn(input0_1: handle, compute_1: handle) -> ()
  attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
  buffers = {compute: Buffer(compute_2: Pointer(float32), float32, [128, 96, 165, 165], []),
             input0: Buffer(input0_2: Pointer(float32), float32, [128, 96, 165, 165], [])}
  buffer_map = {input0_1: input0, compute_1: compute} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 256;
  for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 5105) {
    if @tir.likely(((((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x) < 334540800), dtype=bool) {
      compute_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)] = max((float32*)input0_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)], 0f32)
    }
  }
}


; ModuleID = 'TVMAMDGPUModule'
source_filename = "TVMAMDGPUModule"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-ni:7"
target triple = "amdgcn-amd-amdhsa-hcc"

; Function Attrs: nofree nounwind
define dllexport amdgpu_kernel void @default_function_kernel0(float addrspace(1)* noalias nocapture %0, float addrspace(1)* noalias nocapture readonly %1) local_unnamed_addr #0 {
entry:
  %2 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %3 = tail call i32 @llvm.amdgcn.workitem.id.x()
  %4 = shl i32 %2, 8
  %5 = add i32 %4, %3
  br label %for_body

for_body:                                         ; preds = %if_end.4, %entry
  %6 = phi i32 [ 0, %entry ], [ %56, %if_end.4 ]
  %7 = shl nuw nsw i32 %6, 16
  %8 = add i32 %5, %7
  %9 = icmp slt i32 %8, 334540800
  %10 = sext i32 %8 to i64
  br i1 %9, label %if_then, label %if_end, !prof !4

for_end:                                          ; preds = %if_end.4
  ret void

if_then:                                          ; preds = %for_body
  %11 = getelementptr inbounds float, float addrspace(1)* %0, i64 %10
  %12 = getelementptr inbounds float, float addrspace(1)* %1, i64 %10
  %13 = load float, float addrspace(1)* %12, align 4, !tbaa !5
  %14 = fcmp ogt float %13, 0.000000e+00
  %15 = select i1 %14, float %13, float 0.000000e+00
  store float %15, float addrspace(1)* %11, align 4, !tbaa !9
  br label %if_end

if_end:                                           ; preds = %if_then, %for_body
  %16 = shl i32 %6, 16
  %17 = add i32 %16, 65536
  %18 = add i32 %5, %17
  %19 = icmp slt i32 %18, 334540800
  %20 = sext i32 %18 to i64
  br i1 %19, label %if_then.1, label %if_end.1, !prof !4

if_then.1:                                        ; preds = %if_end
  %21 = getelementptr inbounds float, float addrspace(1)* %0, i64 %20
  %22 = getelementptr inbounds float, float addrspace(1)* %1, i64 %20
  %23 = load float, float addrspace(1)* %22, align 4, !tbaa !5
  %24 = fcmp ogt float %23, 0.000000e+00
  %25 = select i1 %24, float %23, float 0.000000e+00
  store float %25, float addrspace(1)* %21, align 4, !tbaa !9
  br label %if_end.1

if_end.1:                                         ; preds = %if_then.1, %if_end
  %26 = shl i32 %6, 16
  %27 = add i32 %26, 131072
  %28 = add i32 %5, %27
  %29 = icmp slt i32 %28, 334540800
  %30 = sext i32 %28 to i64
  br i1 %29, label %if_then.2, label %if_end.2, !prof !4

if_then.2:                                        ; preds = %if_end.1
  %31 = getelementptr inbounds float, float addrspace(1)* %0, i64 %30
  %32 = getelementptr inbounds float, float addrspace(1)* %1, i64 %30
  %33 = load float, float addrspace(1)* %32, align 4, !tbaa !5
  %34 = fcmp ogt float %33, 0.000000e+00
  %35 = select i1 %34, float %33, float 0.000000e+00
  store float %35, float addrspace(1)* %31, align 4, !tbaa !9
  br label %if_end.2

if_end.2:                                         ; preds = %if_then.2, %if_end.1
  %36 = shl i32 %6, 16
  %37 = add i32 %36, 196608
  %38 = add i32 %5, %37
  %39 = icmp slt i32 %38, 334540800
  %40 = sext i32 %38 to i64
  br i1 %39, label %if_then.3, label %if_end.3, !prof !4

if_then.3:                                        ; preds = %if_end.2
  %41 = getelementptr inbounds float, float addrspace(1)* %0, i64 %40
  %42 = getelementptr inbounds float, float addrspace(1)* %1, i64 %40
  %43 = load float, float addrspace(1)* %42, align 4, !tbaa !5
  %44 = fcmp ogt float %43, 0.000000e+00
  %45 = select i1 %44, float %43, float 0.000000e+00
  store float %45, float addrspace(1)* %41, align 4, !tbaa !9
  br label %if_end.3

if_end.3:                                         ; preds = %if_then.3, %if_end.2
  %46 = shl i32 %6, 16
  %47 = add i32 %46, 262144
  %48 = add i32 %5, %47
  %49 = icmp slt i32 %48, 334540800
  %50 = sext i32 %48 to i64
  br i1 %49, label %if_then.4, label %if_end.4, !prof !4

if_then.4:                                        ; preds = %if_end.3
  %51 = getelementptr inbounds float, float addrspace(1)* %0, i64 %50
  %52 = getelementptr inbounds float, float addrspace(1)* %1, i64 %50
  %53 = load float, float addrspace(1)* %52, align 4, !tbaa !5
  %54 = fcmp ogt float %53, 0.000000e+00
  %55 = select i1 %54, float %53, float 0.000000e+00
  store float %55, float addrspace(1)* %51, align 4, !tbaa !9
  br label %if_end.4

if_end.4:                                         ; preds = %if_then.4, %if_end.3
  %56 = add nuw nsw i32 %6, 5
  %exitcond.4 = icmp eq i32 %56, 5105
  br i1 %exitcond.4, label %for_end, label %for_body, !prof !12
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workgroup.id.x() #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workitem.id.x() #1

attributes #0 = { nofree nounwind "amdgpu-flat-work-group-size"="1,1024" "no-nans-fp-math"="true" }
attributes #1 = { nounwind readnone speculatable }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 12.0.0 (/src/external/llvm-project/clang 1100ebe275a9dcc79a9abbda902b6f10738f2f5d)"}
!4 = !{!"branch_weights", i32 1048576, i32 1}
!5 = !{!6, !6, i64 0}
!6 = !{!"float", !7, i64 0}
!7 = !{!"0x1c49930", !8, i64 0}
!8 = !{!"tvm-tbaa"}
!9 = !{!10, !10, i64 0}
!10 = !{!"float", !11, i64 0}
!11 = !{!"0x1c4b700", !8, i64 0}
!12 = !{!"branch_weights", i32 1, i32 1048576}

relu (128, 1344, 21, 21)
Time cost of this operator: 0.0008843166
Lowered TIR:
@main = primfn(input0_1: handle, compute_1: handle) -> ()
  attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
  buffers = {compute: Buffer(compute_2: Pointer(float32), float32, [128, 1344, 21, 21], []),
             input0: Buffer(input0_2: Pointer(float32), float32, [128, 1344, 21, 21], [])}
  buffer_map = {input0_1: input0, compute_1: compute} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 256;
  for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 1158) {
    if @tir.likely(((((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x) < 75866112), dtype=bool) {
      compute_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)] = max((float32*)input0_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)], 0f32)
    }
  }
}


; ModuleID = 'TVMAMDGPUModule'
source_filename = "TVMAMDGPUModule"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-ni:7"
target triple = "amdgcn-amd-amdhsa-hcc"

; Function Attrs: nofree nounwind
define dllexport amdgpu_kernel void @default_function_kernel0(float addrspace(1)* noalias nocapture %0, float addrspace(1)* noalias nocapture readonly %1) local_unnamed_addr #0 {
entry:
  %2 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %3 = tail call i32 @llvm.amdgcn.workitem.id.x()
  %4 = shl i32 %2, 8
  %5 = add i32 %4, %3
  br label %for_body

for_body:                                         ; preds = %if_end.5, %entry
  %6 = phi i32 [ 0, %entry ], [ %66, %if_end.5 ]
  %7 = shl nuw nsw i32 %6, 16
  %8 = add i32 %5, %7
  %9 = icmp slt i32 %8, 75866112
  %10 = sext i32 %8 to i64
  br i1 %9, label %if_then, label %if_end, !prof !4

for_end:                                          ; preds = %if_end.5
  ret void

if_then:                                          ; preds = %for_body
  %11 = getelementptr inbounds float, float addrspace(1)* %0, i64 %10
  %12 = getelementptr inbounds float, float addrspace(1)* %1, i64 %10
  %13 = load float, float addrspace(1)* %12, align 4, !tbaa !5
  %14 = fcmp ogt float %13, 0.000000e+00
  %15 = select i1 %14, float %13, float 0.000000e+00
  store float %15, float addrspace(1)* %11, align 4, !tbaa !9
  br label %if_end

if_end:                                           ; preds = %if_then, %for_body
  %16 = shl i32 %6, 16
  %17 = or i32 %16, 65536
  %18 = add i32 %5, %17
  %19 = icmp slt i32 %18, 75866112
  %20 = sext i32 %18 to i64
  br i1 %19, label %if_then.1, label %if_end.1, !prof !4

if_then.1:                                        ; preds = %if_end
  %21 = getelementptr inbounds float, float addrspace(1)* %0, i64 %20
  %22 = getelementptr inbounds float, float addrspace(1)* %1, i64 %20
  %23 = load float, float addrspace(1)* %22, align 4, !tbaa !5
  %24 = fcmp ogt float %23, 0.000000e+00
  %25 = select i1 %24, float %23, float 0.000000e+00
  store float %25, float addrspace(1)* %21, align 4, !tbaa !9
  br label %if_end.1

if_end.1:                                         ; preds = %if_then.1, %if_end
  %26 = shl i32 %6, 16
  %27 = add i32 %26, 131072
  %28 = add i32 %5, %27
  %29 = icmp slt i32 %28, 75866112
  %30 = sext i32 %28 to i64
  br i1 %29, label %if_then.2, label %if_end.2, !prof !4

if_then.2:                                        ; preds = %if_end.1
  %31 = getelementptr inbounds float, float addrspace(1)* %0, i64 %30
  %32 = getelementptr inbounds float, float addrspace(1)* %1, i64 %30
  %33 = load float, float addrspace(1)* %32, align 4, !tbaa !5
  %34 = fcmp ogt float %33, 0.000000e+00
  %35 = select i1 %34, float %33, float 0.000000e+00
  store float %35, float addrspace(1)* %31, align 4, !tbaa !9
  br label %if_end.2

if_end.2:                                         ; preds = %if_then.2, %if_end.1
  %36 = shl i32 %6, 16
  %37 = add i32 %36, 196608
  %38 = add i32 %5, %37
  %39 = icmp slt i32 %38, 75866112
  %40 = sext i32 %38 to i64
  br i1 %39, label %if_then.3, label %if_end.3, !prof !4

if_then.3:                                        ; preds = %if_end.2
  %41 = getelementptr inbounds float, float addrspace(1)* %0, i64 %40
  %42 = getelementptr inbounds float, float addrspace(1)* %1, i64 %40
  %43 = load float, float addrspace(1)* %42, align 4, !tbaa !5
  %44 = fcmp ogt float %43, 0.000000e+00
  %45 = select i1 %44, float %43, float 0.000000e+00
  store float %45, float addrspace(1)* %41, align 4, !tbaa !9
  br label %if_end.3

if_end.3:                                         ; preds = %if_then.3, %if_end.2
  %46 = shl i32 %6, 16
  %47 = add i32 %46, 262144
  %48 = add i32 %5, %47
  %49 = icmp slt i32 %48, 75866112
  %50 = sext i32 %48 to i64
  br i1 %49, label %if_then.4, label %if_end.4, !prof !4

if_then.4:                                        ; preds = %if_end.3
  %51 = getelementptr inbounds float, float addrspace(1)* %0, i64 %50
  %52 = getelementptr inbounds float, float addrspace(1)* %1, i64 %50
  %53 = load float, float addrspace(1)* %52, align 4, !tbaa !5
  %54 = fcmp ogt float %53, 0.000000e+00
  %55 = select i1 %54, float %53, float 0.000000e+00
  store float %55, float addrspace(1)* %51, align 4, !tbaa !9
  br label %if_end.4

if_end.4:                                         ; preds = %if_then.4, %if_end.3
  %56 = shl i32 %6, 16
  %57 = add i32 %56, 327680
  %58 = add i32 %5, %57
  %59 = icmp slt i32 %58, 75866112
  %60 = sext i32 %58 to i64
  br i1 %59, label %if_then.5, label %if_end.5, !prof !4

if_then.5:                                        ; preds = %if_end.4
  %61 = getelementptr inbounds float, float addrspace(1)* %0, i64 %60
  %62 = getelementptr inbounds float, float addrspace(1)* %1, i64 %60
  %63 = load float, float addrspace(1)* %62, align 4, !tbaa !5
  %64 = fcmp ogt float %63, 0.000000e+00
  %65 = select i1 %64, float %63, float 0.000000e+00
  store float %65, float addrspace(1)* %61, align 4, !tbaa !9
  br label %if_end.5

if_end.5:                                         ; preds = %if_then.5, %if_end.4
  %66 = add nuw nsw i32 %6, 6
  %exitcond.5 = icmp eq i32 %66, 1158
  br i1 %exitcond.5, label %for_end, label %for_body, !prof !12
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workgroup.id.x() #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workitem.id.x() #1

attributes #0 = { nofree nounwind "amdgpu-flat-work-group-size"="1,1024" "no-nans-fp-math"="true" }
attributes #1 = { nounwind readnone speculatable }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 12.0.0 (/src/external/llvm-project/clang 1100ebe275a9dcc79a9abbda902b6f10738f2f5d)"}
!4 = !{!"branch_weights", i32 1048576, i32 1}
!5 = !{!6, !6, i64 0}
!6 = !{!"float", !7, i64 0}
!7 = !{!"0x1c45930", !8, i64 0}
!8 = !{!"tvm-tbaa"}
!9 = !{!10, !10, i64 0}
!10 = !{!"float", !11, i64 0}
!11 = !{!"0x1c47700", !8, i64 0}
!12 = !{!"branch_weights", i32 1, i32 1048576}

relu (128, 2688, 11, 11)
Time cost of this operator: 0.0004866761
Lowered TIR:
@main = primfn(input0_1: handle, compute_1: handle) -> ()
  attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
  buffers = {compute: Buffer(compute_2: Pointer(float32), float32, [128, 2688, 11, 11], []),
             input0: Buffer(input0_2: Pointer(float32), float32, [128, 2688, 11, 11], [])}
  buffer_map = {input0_1: input0, compute_1: compute} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 256;
  for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 636) {
    if @tir.likely(((((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x) < 41631744), dtype=bool) {
      compute_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)] = max((float32*)input0_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)], 0f32)
    }
  }
}


; ModuleID = 'TVMAMDGPUModule'
source_filename = "TVMAMDGPUModule"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-ni:7"
target triple = "amdgcn-amd-amdhsa-hcc"

; Function Attrs: nofree nounwind
define dllexport amdgpu_kernel void @default_function_kernel0(float addrspace(1)* noalias nocapture %0, float addrspace(1)* noalias nocapture readonly %1) local_unnamed_addr #0 {
entry:
  %2 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %3 = tail call i32 @llvm.amdgcn.workitem.id.x()
  %4 = shl i32 %2, 8
  %5 = add i32 %4, %3
  br label %for_body

for_body:                                         ; preds = %if_end.5, %entry
  %6 = phi i32 [ 0, %entry ], [ %66, %if_end.5 ]
  %7 = shl nuw nsw i32 %6, 16
  %8 = add i32 %5, %7
  %9 = icmp slt i32 %8, 41631744
  %10 = sext i32 %8 to i64
  br i1 %9, label %if_then, label %if_end, !prof !4

for_end:                                          ; preds = %if_end.5
  ret void

if_then:                                          ; preds = %for_body
  %11 = getelementptr inbounds float, float addrspace(1)* %0, i64 %10
  %12 = getelementptr inbounds float, float addrspace(1)* %1, i64 %10
  %13 = load float, float addrspace(1)* %12, align 4, !tbaa !5
  %14 = fcmp ogt float %13, 0.000000e+00
  %15 = select i1 %14, float %13, float 0.000000e+00
  store float %15, float addrspace(1)* %11, align 4, !tbaa !9
  br label %if_end

if_end:                                           ; preds = %if_then, %for_body
  %16 = shl i32 %6, 16
  %17 = or i32 %16, 65536
  %18 = add i32 %5, %17
  %19 = icmp slt i32 %18, 41631744
  %20 = sext i32 %18 to i64
  br i1 %19, label %if_then.1, label %if_end.1, !prof !4

if_then.1:                                        ; preds = %if_end
  %21 = getelementptr inbounds float, float addrspace(1)* %0, i64 %20
  %22 = getelementptr inbounds float, float addrspace(1)* %1, i64 %20
  %23 = load float, float addrspace(1)* %22, align 4, !tbaa !5
  %24 = fcmp ogt float %23, 0.000000e+00
  %25 = select i1 %24, float %23, float 0.000000e+00
  store float %25, float addrspace(1)* %21, align 4, !tbaa !9
  br label %if_end.1

if_end.1:                                         ; preds = %if_then.1, %if_end
  %26 = shl i32 %6, 16
  %27 = add i32 %26, 131072
  %28 = add i32 %5, %27
  %29 = icmp slt i32 %28, 41631744
  %30 = sext i32 %28 to i64
  br i1 %29, label %if_then.2, label %if_end.2, !prof !4

if_then.2:                                        ; preds = %if_end.1
  %31 = getelementptr inbounds float, float addrspace(1)* %0, i64 %30
  %32 = getelementptr inbounds float, float addrspace(1)* %1, i64 %30
  %33 = load float, float addrspace(1)* %32, align 4, !tbaa !5
  %34 = fcmp ogt float %33, 0.000000e+00
  %35 = select i1 %34, float %33, float 0.000000e+00
  store float %35, float addrspace(1)* %31, align 4, !tbaa !9
  br label %if_end.2

if_end.2:                                         ; preds = %if_then.2, %if_end.1
  %36 = shl i32 %6, 16
  %37 = add i32 %36, 196608
  %38 = add i32 %5, %37
  %39 = icmp slt i32 %38, 41631744
  %40 = sext i32 %38 to i64
  br i1 %39, label %if_then.3, label %if_end.3, !prof !4

if_then.3:                                        ; preds = %if_end.2
  %41 = getelementptr inbounds float, float addrspace(1)* %0, i64 %40
  %42 = getelementptr inbounds float, float addrspace(1)* %1, i64 %40
  %43 = load float, float addrspace(1)* %42, align 4, !tbaa !5
  %44 = fcmp ogt float %43, 0.000000e+00
  %45 = select i1 %44, float %43, float 0.000000e+00
  store float %45, float addrspace(1)* %41, align 4, !tbaa !9
  br label %if_end.3

if_end.3:                                         ; preds = %if_then.3, %if_end.2
  %46 = shl i32 %6, 16
  %47 = add i32 %46, 262144
  %48 = add i32 %5, %47
  %49 = icmp slt i32 %48, 41631744
  %50 = sext i32 %48 to i64
  br i1 %49, label %if_then.4, label %if_end.4, !prof !4

if_then.4:                                        ; preds = %if_end.3
  %51 = getelementptr inbounds float, float addrspace(1)* %0, i64 %50
  %52 = getelementptr inbounds float, float addrspace(1)* %1, i64 %50
  %53 = load float, float addrspace(1)* %52, align 4, !tbaa !5
  %54 = fcmp ogt float %53, 0.000000e+00
  %55 = select i1 %54, float %53, float 0.000000e+00
  store float %55, float addrspace(1)* %51, align 4, !tbaa !9
  br label %if_end.4

if_end.4:                                         ; preds = %if_then.4, %if_end.3
  %56 = shl i32 %6, 16
  %57 = add i32 %56, 327680
  %58 = add i32 %5, %57
  %59 = icmp slt i32 %58, 41631744
  %60 = sext i32 %58 to i64
  br i1 %59, label %if_then.5, label %if_end.5, !prof !4

if_then.5:                                        ; preds = %if_end.4
  %61 = getelementptr inbounds float, float addrspace(1)* %0, i64 %60
  %62 = getelementptr inbounds float, float addrspace(1)* %1, i64 %60
  %63 = load float, float addrspace(1)* %62, align 4, !tbaa !5
  %64 = fcmp ogt float %63, 0.000000e+00
  %65 = select i1 %64, float %63, float 0.000000e+00
  store float %65, float addrspace(1)* %61, align 4, !tbaa !9
  br label %if_end.5

if_end.5:                                         ; preds = %if_then.5, %if_end.4
  %66 = add nuw nsw i32 %6, 6
  %exitcond.5 = icmp eq i32 %66, 636
  br i1 %exitcond.5, label %for_end, label %for_body, !prof !12
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workgroup.id.x() #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workitem.id.x() #1

attributes #0 = { nofree nounwind "amdgpu-flat-work-group-size"="1,1024" "no-nans-fp-math"="true" }
attributes #1 = { nounwind readnone speculatable }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 12.0.0 (/src/external/llvm-project/clang 1100ebe275a9dcc79a9abbda902b6f10738f2f5d)"}
!4 = !{!"branch_weights", i32 1048576, i32 1}
!5 = !{!6, !6, i64 0}
!6 = !{!"float", !7, i64 0}
!7 = !{!"0x257cd10", !8, i64 0}
!8 = !{!"tvm-tbaa"}
!9 = !{!10, !10, i64 0}
!10 = !{!"float", !11, i64 0}
!11 = !{!"0x257e700", !8, i64 0}
!12 = !{!"branch_weights", i32 1, i32 1048576}

relu (128, 64, 112, 112)
Time cost of this operator: 0.0011534260
Lowered TIR:
@main = primfn(input0_1: handle, compute_1: handle) -> ()
  attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
  buffers = {compute: Buffer(compute_2: Pointer(float32), float32, [128, 64, 112, 112], []),
             input0: Buffer(input0_2: Pointer(float32), float32, [128, 64, 112, 112], [])}
  buffer_map = {input0_1: input0, compute_1: compute} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 256;
  for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 1568) {
    compute_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)] = max((float32*)input0_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)], 0f32)
  }
}


; ModuleID = 'TVMAMDGPUModule'
source_filename = "TVMAMDGPUModule"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-ni:7"
target triple = "amdgcn-amd-amdhsa-hcc"

; Function Attrs: nofree nounwind
define dllexport amdgpu_kernel void @default_function_kernel0(float addrspace(1)* noalias nocapture %0, float addrspace(1)* noalias nocapture readonly %1) local_unnamed_addr #0 {
entry:
  %2 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %3 = tail call i32 @llvm.amdgcn.workitem.id.x()
  %4 = shl i32 %2, 8
  %5 = add i32 %4, %3
  br label %for_body

for_body:                                         ; preds = %for_body, %entry
  %6 = phi i32 [ 0, %entry ], [ %132, %for_body ]
  %7 = shl nuw nsw i32 %6, 16
  %8 = add i32 %5, %7
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds float, float addrspace(1)* %1, i64 %9
  %11 = load float, float addrspace(1)* %10, align 4, !tbaa !4
  %12 = fcmp ogt float %11, 0.000000e+00
  %13 = select i1 %12, float %11, float 0.000000e+00
  %14 = getelementptr inbounds float, float addrspace(1)* %0, i64 %9
  store float %13, float addrspace(1)* %14, align 4, !tbaa !8
  %15 = shl i32 %6, 16
  %16 = or i32 %15, 65536
  %17 = add i32 %5, %16
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds float, float addrspace(1)* %1, i64 %18
  %20 = load float, float addrspace(1)* %19, align 4, !tbaa !4
  %21 = fcmp ogt float %20, 0.000000e+00
  %22 = select i1 %21, float %20, float 0.000000e+00
  %23 = getelementptr inbounds float, float addrspace(1)* %0, i64 %18
  store float %22, float addrspace(1)* %23, align 4, !tbaa !8
  %24 = shl i32 %6, 16
  %25 = add i32 %24, 131072
  %26 = add i32 %5, %25
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds float, float addrspace(1)* %1, i64 %27
  %29 = load float, float addrspace(1)* %28, align 4, !tbaa !4
  %30 = fcmp ogt float %29, 0.000000e+00
  %31 = select i1 %30, float %29, float 0.000000e+00
  %32 = getelementptr inbounds float, float addrspace(1)* %0, i64 %27
  store float %31, float addrspace(1)* %32, align 4, !tbaa !8
  %33 = shl i32 %6, 16
  %34 = add i32 %33, 196608
  %35 = add i32 %5, %34
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds float, float addrspace(1)* %1, i64 %36
  %38 = load float, float addrspace(1)* %37, align 4, !tbaa !4
  %39 = fcmp ogt float %38, 0.000000e+00
  %40 = select i1 %39, float %38, float 0.000000e+00
  %41 = getelementptr inbounds float, float addrspace(1)* %0, i64 %36
  store float %40, float addrspace(1)* %41, align 4, !tbaa !8
  %42 = shl i32 %6, 16
  %43 = add i32 %42, 262144
  %44 = add i32 %5, %43
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds float, float addrspace(1)* %1, i64 %45
  %47 = load float, float addrspace(1)* %46, align 4, !tbaa !4
  %48 = fcmp ogt float %47, 0.000000e+00
  %49 = select i1 %48, float %47, float 0.000000e+00
  %50 = getelementptr inbounds float, float addrspace(1)* %0, i64 %45
  store float %49, float addrspace(1)* %50, align 4, !tbaa !8
  %51 = shl i32 %6, 16
  %52 = add i32 %51, 327680
  %53 = add i32 %5, %52
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds float, float addrspace(1)* %1, i64 %54
  %56 = load float, float addrspace(1)* %55, align 4, !tbaa !4
  %57 = fcmp ogt float %56, 0.000000e+00
  %58 = select i1 %57, float %56, float 0.000000e+00
  %59 = getelementptr inbounds float, float addrspace(1)* %0, i64 %54
  store float %58, float addrspace(1)* %59, align 4, !tbaa !8
  %60 = shl i32 %6, 16
  %61 = add i32 %60, 393216
  %62 = add i32 %5, %61
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds float, float addrspace(1)* %1, i64 %63
  %65 = load float, float addrspace(1)* %64, align 4, !tbaa !4
  %66 = fcmp ogt float %65, 0.000000e+00
  %67 = select i1 %66, float %65, float 0.000000e+00
  %68 = getelementptr inbounds float, float addrspace(1)* %0, i64 %63
  store float %67, float addrspace(1)* %68, align 4, !tbaa !8
  %69 = shl i32 %6, 16
  %70 = add i32 %69, 458752
  %71 = add i32 %5, %70
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds float, float addrspace(1)* %1, i64 %72
  %74 = load float, float addrspace(1)* %73, align 4, !tbaa !4
  %75 = fcmp ogt float %74, 0.000000e+00
  %76 = select i1 %75, float %74, float 0.000000e+00
  %77 = getelementptr inbounds float, float addrspace(1)* %0, i64 %72
  store float %76, float addrspace(1)* %77, align 4, !tbaa !8
  %78 = shl i32 %6, 16
  %79 = add i32 %78, 524288
  %80 = add i32 %5, %79
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds float, float addrspace(1)* %1, i64 %81
  %83 = load float, float addrspace(1)* %82, align 4, !tbaa !4
  %84 = fcmp ogt float %83, 0.000000e+00
  %85 = select i1 %84, float %83, float 0.000000e+00
  %86 = getelementptr inbounds float, float addrspace(1)* %0, i64 %81
  store float %85, float addrspace(1)* %86, align 4, !tbaa !8
  %87 = shl i32 %6, 16
  %88 = add i32 %87, 589824
  %89 = add i32 %5, %88
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds float, float addrspace(1)* %1, i64 %90
  %92 = load float, float addrspace(1)* %91, align 4, !tbaa !4
  %93 = fcmp ogt float %92, 0.000000e+00
  %94 = select i1 %93, float %92, float 0.000000e+00
  %95 = getelementptr inbounds float, float addrspace(1)* %0, i64 %90
  store float %94, float addrspace(1)* %95, align 4, !tbaa !8
  %96 = shl i32 %6, 16
  %97 = add i32 %96, 655360
  %98 = add i32 %5, %97
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds float, float addrspace(1)* %1, i64 %99
  %101 = load float, float addrspace(1)* %100, align 4, !tbaa !4
  %102 = fcmp ogt float %101, 0.000000e+00
  %103 = select i1 %102, float %101, float 0.000000e+00
  %104 = getelementptr inbounds float, float addrspace(1)* %0, i64 %99
  store float %103, float addrspace(1)* %104, align 4, !tbaa !8
  %105 = shl i32 %6, 16
  %106 = add i32 %105, 720896
  %107 = add i32 %5, %106
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds float, float addrspace(1)* %1, i64 %108
  %110 = load float, float addrspace(1)* %109, align 4, !tbaa !4
  %111 = fcmp ogt float %110, 0.000000e+00
  %112 = select i1 %111, float %110, float 0.000000e+00
  %113 = getelementptr inbounds float, float addrspace(1)* %0, i64 %108
  store float %112, float addrspace(1)* %113, align 4, !tbaa !8
  %114 = shl i32 %6, 16
  %115 = add i32 %114, 786432
  %116 = add i32 %5, %115
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds float, float addrspace(1)* %1, i64 %117
  %119 = load float, float addrspace(1)* %118, align 4, !tbaa !4
  %120 = fcmp ogt float %119, 0.000000e+00
  %121 = select i1 %120, float %119, float 0.000000e+00
  %122 = getelementptr inbounds float, float addrspace(1)* %0, i64 %117
  store float %121, float addrspace(1)* %122, align 4, !tbaa !8
  %123 = shl i32 %6, 16
  %124 = add i32 %123, 851968
  %125 = add i32 %5, %124
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds float, float addrspace(1)* %1, i64 %126
  %128 = load float, float addrspace(1)* %127, align 4, !tbaa !4
  %129 = fcmp ogt float %128, 0.000000e+00
  %130 = select i1 %129, float %128, float 0.000000e+00
  %131 = getelementptr inbounds float, float addrspace(1)* %0, i64 %126
  store float %130, float addrspace(1)* %131, align 4, !tbaa !8
  %132 = add nuw nsw i32 %6, 14
  %exitcond.13 = icmp eq i32 %132, 1568
  br i1 %exitcond.13, label %for_end, label %for_body, !prof !11

for_end:                                          ; preds = %for_body
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workgroup.id.x() #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workitem.id.x() #1

attributes #0 = { nofree nounwind "amdgpu-flat-work-group-size"="1,1024" "no-nans-fp-math"="true" }
attributes #1 = { nounwind readnone speculatable }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 12.0.0 (/src/external/llvm-project/clang 1100ebe275a9dcc79a9abbda902b6f10738f2f5d)"}
!4 = !{!5, !5, i64 0}
!5 = !{!"float", !6, i64 0}
!6 = !{!"0x32d7dd0", !7, i64 0}
!7 = !{!"tvm-tbaa"}
!8 = !{!9, !9, i64 0}
!9 = !{!"float", !10, i64 0}
!10 = !{!"0x32d7d30", !7, i64 0}
!11 = !{!"branch_weights", i32 1, i32 1048576}

relu (128, 256, 56, 56)
Time cost of this operator: 0.0011535095
Lowered TIR:
@main = primfn(input0_1: handle, compute_1: handle) -> ()
  attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
  buffers = {compute: Buffer(compute_2: Pointer(float32), float32, [128, 256, 56, 56], []),
             input0: Buffer(input0_2: Pointer(float32), float32, [128, 256, 56, 56], [])}
  buffer_map = {input0_1: input0, compute_1: compute} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 256;
  for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 1568) {
    compute_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)] = max((float32*)input0_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)], 0f32)
  }
}


; ModuleID = 'TVMAMDGPUModule'
source_filename = "TVMAMDGPUModule"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-ni:7"
target triple = "amdgcn-amd-amdhsa-hcc"

; Function Attrs: nofree nounwind
define dllexport amdgpu_kernel void @default_function_kernel0(float addrspace(1)* noalias nocapture %0, float addrspace(1)* noalias nocapture readonly %1) local_unnamed_addr #0 {
entry:
  %2 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %3 = tail call i32 @llvm.amdgcn.workitem.id.x()
  %4 = shl i32 %2, 8
  %5 = add i32 %4, %3
  br label %for_body

for_body:                                         ; preds = %for_body, %entry
  %6 = phi i32 [ 0, %entry ], [ %132, %for_body ]
  %7 = shl nuw nsw i32 %6, 16
  %8 = add i32 %5, %7
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds float, float addrspace(1)* %1, i64 %9
  %11 = load float, float addrspace(1)* %10, align 4, !tbaa !4
  %12 = fcmp ogt float %11, 0.000000e+00
  %13 = select i1 %12, float %11, float 0.000000e+00
  %14 = getelementptr inbounds float, float addrspace(1)* %0, i64 %9
  store float %13, float addrspace(1)* %14, align 4, !tbaa !8
  %15 = shl i32 %6, 16
  %16 = or i32 %15, 65536
  %17 = add i32 %5, %16
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds float, float addrspace(1)* %1, i64 %18
  %20 = load float, float addrspace(1)* %19, align 4, !tbaa !4
  %21 = fcmp ogt float %20, 0.000000e+00
  %22 = select i1 %21, float %20, float 0.000000e+00
  %23 = getelementptr inbounds float, float addrspace(1)* %0, i64 %18
  store float %22, float addrspace(1)* %23, align 4, !tbaa !8
  %24 = shl i32 %6, 16
  %25 = add i32 %24, 131072
  %26 = add i32 %5, %25
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds float, float addrspace(1)* %1, i64 %27
  %29 = load float, float addrspace(1)* %28, align 4, !tbaa !4
  %30 = fcmp ogt float %29, 0.000000e+00
  %31 = select i1 %30, float %29, float 0.000000e+00
  %32 = getelementptr inbounds float, float addrspace(1)* %0, i64 %27
  store float %31, float addrspace(1)* %32, align 4, !tbaa !8
  %33 = shl i32 %6, 16
  %34 = add i32 %33, 196608
  %35 = add i32 %5, %34
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds float, float addrspace(1)* %1, i64 %36
  %38 = load float, float addrspace(1)* %37, align 4, !tbaa !4
  %39 = fcmp ogt float %38, 0.000000e+00
  %40 = select i1 %39, float %38, float 0.000000e+00
  %41 = getelementptr inbounds float, float addrspace(1)* %0, i64 %36
  store float %40, float addrspace(1)* %41, align 4, !tbaa !8
  %42 = shl i32 %6, 16
  %43 = add i32 %42, 262144
  %44 = add i32 %5, %43
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds float, float addrspace(1)* %1, i64 %45
  %47 = load float, float addrspace(1)* %46, align 4, !tbaa !4
  %48 = fcmp ogt float %47, 0.000000e+00
  %49 = select i1 %48, float %47, float 0.000000e+00
  %50 = getelementptr inbounds float, float addrspace(1)* %0, i64 %45
  store float %49, float addrspace(1)* %50, align 4, !tbaa !8
  %51 = shl i32 %6, 16
  %52 = add i32 %51, 327680
  %53 = add i32 %5, %52
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds float, float addrspace(1)* %1, i64 %54
  %56 = load float, float addrspace(1)* %55, align 4, !tbaa !4
  %57 = fcmp ogt float %56, 0.000000e+00
  %58 = select i1 %57, float %56, float 0.000000e+00
  %59 = getelementptr inbounds float, float addrspace(1)* %0, i64 %54
  store float %58, float addrspace(1)* %59, align 4, !tbaa !8
  %60 = shl i32 %6, 16
  %61 = add i32 %60, 393216
  %62 = add i32 %5, %61
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds float, float addrspace(1)* %1, i64 %63
  %65 = load float, float addrspace(1)* %64, align 4, !tbaa !4
  %66 = fcmp ogt float %65, 0.000000e+00
  %67 = select i1 %66, float %65, float 0.000000e+00
  %68 = getelementptr inbounds float, float addrspace(1)* %0, i64 %63
  store float %67, float addrspace(1)* %68, align 4, !tbaa !8
  %69 = shl i32 %6, 16
  %70 = add i32 %69, 458752
  %71 = add i32 %5, %70
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds float, float addrspace(1)* %1, i64 %72
  %74 = load float, float addrspace(1)* %73, align 4, !tbaa !4
  %75 = fcmp ogt float %74, 0.000000e+00
  %76 = select i1 %75, float %74, float 0.000000e+00
  %77 = getelementptr inbounds float, float addrspace(1)* %0, i64 %72
  store float %76, float addrspace(1)* %77, align 4, !tbaa !8
  %78 = shl i32 %6, 16
  %79 = add i32 %78, 524288
  %80 = add i32 %5, %79
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds float, float addrspace(1)* %1, i64 %81
  %83 = load float, float addrspace(1)* %82, align 4, !tbaa !4
  %84 = fcmp ogt float %83, 0.000000e+00
  %85 = select i1 %84, float %83, float 0.000000e+00
  %86 = getelementptr inbounds float, float addrspace(1)* %0, i64 %81
  store float %85, float addrspace(1)* %86, align 4, !tbaa !8
  %87 = shl i32 %6, 16
  %88 = add i32 %87, 589824
  %89 = add i32 %5, %88
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds float, float addrspace(1)* %1, i64 %90
  %92 = load float, float addrspace(1)* %91, align 4, !tbaa !4
  %93 = fcmp ogt float %92, 0.000000e+00
  %94 = select i1 %93, float %92, float 0.000000e+00
  %95 = getelementptr inbounds float, float addrspace(1)* %0, i64 %90
  store float %94, float addrspace(1)* %95, align 4, !tbaa !8
  %96 = shl i32 %6, 16
  %97 = add i32 %96, 655360
  %98 = add i32 %5, %97
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds float, float addrspace(1)* %1, i64 %99
  %101 = load float, float addrspace(1)* %100, align 4, !tbaa !4
  %102 = fcmp ogt float %101, 0.000000e+00
  %103 = select i1 %102, float %101, float 0.000000e+00
  %104 = getelementptr inbounds float, float addrspace(1)* %0, i64 %99
  store float %103, float addrspace(1)* %104, align 4, !tbaa !8
  %105 = shl i32 %6, 16
  %106 = add i32 %105, 720896
  %107 = add i32 %5, %106
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds float, float addrspace(1)* %1, i64 %108
  %110 = load float, float addrspace(1)* %109, align 4, !tbaa !4
  %111 = fcmp ogt float %110, 0.000000e+00
  %112 = select i1 %111, float %110, float 0.000000e+00
  %113 = getelementptr inbounds float, float addrspace(1)* %0, i64 %108
  store float %112, float addrspace(1)* %113, align 4, !tbaa !8
  %114 = shl i32 %6, 16
  %115 = add i32 %114, 786432
  %116 = add i32 %5, %115
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds float, float addrspace(1)* %1, i64 %117
  %119 = load float, float addrspace(1)* %118, align 4, !tbaa !4
  %120 = fcmp ogt float %119, 0.000000e+00
  %121 = select i1 %120, float %119, float 0.000000e+00
  %122 = getelementptr inbounds float, float addrspace(1)* %0, i64 %117
  store float %121, float addrspace(1)* %122, align 4, !tbaa !8
  %123 = shl i32 %6, 16
  %124 = add i32 %123, 851968
  %125 = add i32 %5, %124
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds float, float addrspace(1)* %1, i64 %126
  %128 = load float, float addrspace(1)* %127, align 4, !tbaa !4
  %129 = fcmp ogt float %128, 0.000000e+00
  %130 = select i1 %129, float %128, float 0.000000e+00
  %131 = getelementptr inbounds float, float addrspace(1)* %0, i64 %126
  store float %130, float addrspace(1)* %131, align 4, !tbaa !8
  %132 = add nuw nsw i32 %6, 14
  %exitcond.13 = icmp eq i32 %132, 1568
  br i1 %exitcond.13, label %for_end, label %for_body, !prof !11

for_end:                                          ; preds = %for_body
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workgroup.id.x() #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workitem.id.x() #1

attributes #0 = { nofree nounwind "amdgpu-flat-work-group-size"="1,1024" "no-nans-fp-math"="true" }
attributes #1 = { nounwind readnone speculatable }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 12.0.0 (/src/external/llvm-project/clang 1100ebe275a9dcc79a9abbda902b6f10738f2f5d)"}
!4 = !{!5, !5, i64 0}
!5 = !{!"float", !6, i64 0}
!6 = !{!"0x1e78e40", !7, i64 0}
!7 = !{!"tvm-tbaa"}
!8 = !{!9, !9, i64 0}
!9 = !{!"float", !10, i64 0}
!10 = !{!"0x1e78d30", !7, i64 0}
!11 = !{!"branch_weights", i32 1, i32 1048576}

relu (128, 128, 28, 28)
Time cost of this operator: 0.0001458557
Lowered TIR:
@main = primfn(input0_1: handle, compute_1: handle) -> ()
  attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
  buffers = {compute: Buffer(compute_2: Pointer(float32), float32, [128, 128, 28, 28], []),
             input0: Buffer(input0_2: Pointer(float32), float32, [128, 128, 28, 28], [])}
  buffer_map = {input0_1: input0, compute_1: compute} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 256;
  for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 196) {
    compute_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)] = max((float32*)input0_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)], 0f32)
  }
}


; ModuleID = 'TVMAMDGPUModule'
source_filename = "TVMAMDGPUModule"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-ni:7"
target triple = "amdgcn-amd-amdhsa-hcc"

; Function Attrs: nofree nounwind
define dllexport amdgpu_kernel void @default_function_kernel0(float addrspace(1)* noalias nocapture %0, float addrspace(1)* noalias nocapture readonly %1) local_unnamed_addr #0 {
entry:
  %2 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %3 = tail call i32 @llvm.amdgcn.workitem.id.x()
  %4 = shl i32 %2, 8
  %5 = add i32 %4, %3
  br label %for_body

for_body:                                         ; preds = %for_body, %entry
  %6 = phi i32 [ 0, %entry ], [ %132, %for_body ]
  %7 = shl nuw nsw i32 %6, 16
  %8 = add i32 %5, %7
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds float, float addrspace(1)* %1, i64 %9
  %11 = load float, float addrspace(1)* %10, align 4, !tbaa !4
  %12 = fcmp ogt float %11, 0.000000e+00
  %13 = select i1 %12, float %11, float 0.000000e+00
  %14 = getelementptr inbounds float, float addrspace(1)* %0, i64 %9
  store float %13, float addrspace(1)* %14, align 4, !tbaa !8
  %15 = shl i32 %6, 16
  %16 = or i32 %15, 65536
  %17 = add i32 %5, %16
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds float, float addrspace(1)* %1, i64 %18
  %20 = load float, float addrspace(1)* %19, align 4, !tbaa !4
  %21 = fcmp ogt float %20, 0.000000e+00
  %22 = select i1 %21, float %20, float 0.000000e+00
  %23 = getelementptr inbounds float, float addrspace(1)* %0, i64 %18
  store float %22, float addrspace(1)* %23, align 4, !tbaa !8
  %24 = shl i32 %6, 16
  %25 = add i32 %24, 131072
  %26 = add i32 %5, %25
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds float, float addrspace(1)* %1, i64 %27
  %29 = load float, float addrspace(1)* %28, align 4, !tbaa !4
  %30 = fcmp ogt float %29, 0.000000e+00
  %31 = select i1 %30, float %29, float 0.000000e+00
  %32 = getelementptr inbounds float, float addrspace(1)* %0, i64 %27
  store float %31, float addrspace(1)* %32, align 4, !tbaa !8
  %33 = shl i32 %6, 16
  %34 = add i32 %33, 196608
  %35 = add i32 %5, %34
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds float, float addrspace(1)* %1, i64 %36
  %38 = load float, float addrspace(1)* %37, align 4, !tbaa !4
  %39 = fcmp ogt float %38, 0.000000e+00
  %40 = select i1 %39, float %38, float 0.000000e+00
  %41 = getelementptr inbounds float, float addrspace(1)* %0, i64 %36
  store float %40, float addrspace(1)* %41, align 4, !tbaa !8
  %42 = shl i32 %6, 16
  %43 = add i32 %42, 262144
  %44 = add i32 %5, %43
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds float, float addrspace(1)* %1, i64 %45
  %47 = load float, float addrspace(1)* %46, align 4, !tbaa !4
  %48 = fcmp ogt float %47, 0.000000e+00
  %49 = select i1 %48, float %47, float 0.000000e+00
  %50 = getelementptr inbounds float, float addrspace(1)* %0, i64 %45
  store float %49, float addrspace(1)* %50, align 4, !tbaa !8
  %51 = shl i32 %6, 16
  %52 = add i32 %51, 327680
  %53 = add i32 %5, %52
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds float, float addrspace(1)* %1, i64 %54
  %56 = load float, float addrspace(1)* %55, align 4, !tbaa !4
  %57 = fcmp ogt float %56, 0.000000e+00
  %58 = select i1 %57, float %56, float 0.000000e+00
  %59 = getelementptr inbounds float, float addrspace(1)* %0, i64 %54
  store float %58, float addrspace(1)* %59, align 4, !tbaa !8
  %60 = shl i32 %6, 16
  %61 = add i32 %60, 393216
  %62 = add i32 %5, %61
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds float, float addrspace(1)* %1, i64 %63
  %65 = load float, float addrspace(1)* %64, align 4, !tbaa !4
  %66 = fcmp ogt float %65, 0.000000e+00
  %67 = select i1 %66, float %65, float 0.000000e+00
  %68 = getelementptr inbounds float, float addrspace(1)* %0, i64 %63
  store float %67, float addrspace(1)* %68, align 4, !tbaa !8
  %69 = shl i32 %6, 16
  %70 = add i32 %69, 458752
  %71 = add i32 %5, %70
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds float, float addrspace(1)* %1, i64 %72
  %74 = load float, float addrspace(1)* %73, align 4, !tbaa !4
  %75 = fcmp ogt float %74, 0.000000e+00
  %76 = select i1 %75, float %74, float 0.000000e+00
  %77 = getelementptr inbounds float, float addrspace(1)* %0, i64 %72
  store float %76, float addrspace(1)* %77, align 4, !tbaa !8
  %78 = shl i32 %6, 16
  %79 = add i32 %78, 524288
  %80 = add i32 %5, %79
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds float, float addrspace(1)* %1, i64 %81
  %83 = load float, float addrspace(1)* %82, align 4, !tbaa !4
  %84 = fcmp ogt float %83, 0.000000e+00
  %85 = select i1 %84, float %83, float 0.000000e+00
  %86 = getelementptr inbounds float, float addrspace(1)* %0, i64 %81
  store float %85, float addrspace(1)* %86, align 4, !tbaa !8
  %87 = shl i32 %6, 16
  %88 = add i32 %87, 589824
  %89 = add i32 %5, %88
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds float, float addrspace(1)* %1, i64 %90
  %92 = load float, float addrspace(1)* %91, align 4, !tbaa !4
  %93 = fcmp ogt float %92, 0.000000e+00
  %94 = select i1 %93, float %92, float 0.000000e+00
  %95 = getelementptr inbounds float, float addrspace(1)* %0, i64 %90
  store float %94, float addrspace(1)* %95, align 4, !tbaa !8
  %96 = shl i32 %6, 16
  %97 = add i32 %96, 655360
  %98 = add i32 %5, %97
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds float, float addrspace(1)* %1, i64 %99
  %101 = load float, float addrspace(1)* %100, align 4, !tbaa !4
  %102 = fcmp ogt float %101, 0.000000e+00
  %103 = select i1 %102, float %101, float 0.000000e+00
  %104 = getelementptr inbounds float, float addrspace(1)* %0, i64 %99
  store float %103, float addrspace(1)* %104, align 4, !tbaa !8
  %105 = shl i32 %6, 16
  %106 = add i32 %105, 720896
  %107 = add i32 %5, %106
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds float, float addrspace(1)* %1, i64 %108
  %110 = load float, float addrspace(1)* %109, align 4, !tbaa !4
  %111 = fcmp ogt float %110, 0.000000e+00
  %112 = select i1 %111, float %110, float 0.000000e+00
  %113 = getelementptr inbounds float, float addrspace(1)* %0, i64 %108
  store float %112, float addrspace(1)* %113, align 4, !tbaa !8
  %114 = shl i32 %6, 16
  %115 = add i32 %114, 786432
  %116 = add i32 %5, %115
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds float, float addrspace(1)* %1, i64 %117
  %119 = load float, float addrspace(1)* %118, align 4, !tbaa !4
  %120 = fcmp ogt float %119, 0.000000e+00
  %121 = select i1 %120, float %119, float 0.000000e+00
  %122 = getelementptr inbounds float, float addrspace(1)* %0, i64 %117
  store float %121, float addrspace(1)* %122, align 4, !tbaa !8
  %123 = shl i32 %6, 16
  %124 = add i32 %123, 851968
  %125 = add i32 %5, %124
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds float, float addrspace(1)* %1, i64 %126
  %128 = load float, float addrspace(1)* %127, align 4, !tbaa !4
  %129 = fcmp ogt float %128, 0.000000e+00
  %130 = select i1 %129, float %128, float 0.000000e+00
  %131 = getelementptr inbounds float, float addrspace(1)* %0, i64 %126
  store float %130, float addrspace(1)* %131, align 4, !tbaa !8
  %132 = add nuw nsw i32 %6, 14
  %exitcond.13 = icmp eq i32 %132, 196
  br i1 %exitcond.13, label %for_end, label %for_body, !prof !11

for_end:                                          ; preds = %for_body
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workgroup.id.x() #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workitem.id.x() #1

attributes #0 = { nofree nounwind "amdgpu-flat-work-group-size"="1,1024" "no-nans-fp-math"="true" }
attributes #1 = { nounwind readnone speculatable }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 12.0.0 (/src/external/llvm-project/clang 1100ebe275a9dcc79a9abbda902b6f10738f2f5d)"}
!4 = !{!5, !5, i64 0}
!5 = !{!"float", !6, i64 0}
!6 = !{!"0x28c1870", !7, i64 0}
!7 = !{!"tvm-tbaa"}
!8 = !{!9, !9, i64 0}
!9 = !{!"float", !10, i64 0}
!10 = !{!"0x28c1d30", !7, i64 0}
!11 = !{!"branch_weights", i32 1, i32 1048576}

relu (128, 512, 28, 28)
Time cost of this operator: 0.0005768451
Lowered TIR:
@main = primfn(input0_1: handle, compute_1: handle) -> ()
  attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
  buffers = {compute: Buffer(compute_2: Pointer(float32), float32, [128, 512, 28, 28], []),
             input0: Buffer(input0_2: Pointer(float32), float32, [128, 512, 28, 28], [])}
  buffer_map = {input0_1: input0, compute_1: compute} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 256;
  for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 784) {
    compute_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)] = max((float32*)input0_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)], 0f32)
  }
}


; ModuleID = 'TVMAMDGPUModule'
source_filename = "TVMAMDGPUModule"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-ni:7"
target triple = "amdgcn-amd-amdhsa-hcc"

; Function Attrs: nofree nounwind
define dllexport amdgpu_kernel void @default_function_kernel0(float addrspace(1)* noalias nocapture %0, float addrspace(1)* noalias nocapture readonly %1) local_unnamed_addr #0 {
entry:
  %2 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %3 = tail call i32 @llvm.amdgcn.workitem.id.x()
  %4 = shl i32 %2, 8
  %5 = add i32 %4, %3
  br label %for_body

for_body:                                         ; preds = %for_body, %entry
  %6 = phi i32 [ 0, %entry ], [ %132, %for_body ]
  %7 = shl nuw nsw i32 %6, 16
  %8 = add i32 %5, %7
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds float, float addrspace(1)* %1, i64 %9
  %11 = load float, float addrspace(1)* %10, align 4, !tbaa !4
  %12 = fcmp ogt float %11, 0.000000e+00
  %13 = select i1 %12, float %11, float 0.000000e+00
  %14 = getelementptr inbounds float, float addrspace(1)* %0, i64 %9
  store float %13, float addrspace(1)* %14, align 4, !tbaa !8
  %15 = shl i32 %6, 16
  %16 = or i32 %15, 65536
  %17 = add i32 %5, %16
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds float, float addrspace(1)* %1, i64 %18
  %20 = load float, float addrspace(1)* %19, align 4, !tbaa !4
  %21 = fcmp ogt float %20, 0.000000e+00
  %22 = select i1 %21, float %20, float 0.000000e+00
  %23 = getelementptr inbounds float, float addrspace(1)* %0, i64 %18
  store float %22, float addrspace(1)* %23, align 4, !tbaa !8
  %24 = shl i32 %6, 16
  %25 = add i32 %24, 131072
  %26 = add i32 %5, %25
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds float, float addrspace(1)* %1, i64 %27
  %29 = load float, float addrspace(1)* %28, align 4, !tbaa !4
  %30 = fcmp ogt float %29, 0.000000e+00
  %31 = select i1 %30, float %29, float 0.000000e+00
  %32 = getelementptr inbounds float, float addrspace(1)* %0, i64 %27
  store float %31, float addrspace(1)* %32, align 4, !tbaa !8
  %33 = shl i32 %6, 16
  %34 = add i32 %33, 196608
  %35 = add i32 %5, %34
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds float, float addrspace(1)* %1, i64 %36
  %38 = load float, float addrspace(1)* %37, align 4, !tbaa !4
  %39 = fcmp ogt float %38, 0.000000e+00
  %40 = select i1 %39, float %38, float 0.000000e+00
  %41 = getelementptr inbounds float, float addrspace(1)* %0, i64 %36
  store float %40, float addrspace(1)* %41, align 4, !tbaa !8
  %42 = shl i32 %6, 16
  %43 = add i32 %42, 262144
  %44 = add i32 %5, %43
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds float, float addrspace(1)* %1, i64 %45
  %47 = load float, float addrspace(1)* %46, align 4, !tbaa !4
  %48 = fcmp ogt float %47, 0.000000e+00
  %49 = select i1 %48, float %47, float 0.000000e+00
  %50 = getelementptr inbounds float, float addrspace(1)* %0, i64 %45
  store float %49, float addrspace(1)* %50, align 4, !tbaa !8
  %51 = shl i32 %6, 16
  %52 = add i32 %51, 327680
  %53 = add i32 %5, %52
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds float, float addrspace(1)* %1, i64 %54
  %56 = load float, float addrspace(1)* %55, align 4, !tbaa !4
  %57 = fcmp ogt float %56, 0.000000e+00
  %58 = select i1 %57, float %56, float 0.000000e+00
  %59 = getelementptr inbounds float, float addrspace(1)* %0, i64 %54
  store float %58, float addrspace(1)* %59, align 4, !tbaa !8
  %60 = shl i32 %6, 16
  %61 = add i32 %60, 393216
  %62 = add i32 %5, %61
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds float, float addrspace(1)* %1, i64 %63
  %65 = load float, float addrspace(1)* %64, align 4, !tbaa !4
  %66 = fcmp ogt float %65, 0.000000e+00
  %67 = select i1 %66, float %65, float 0.000000e+00
  %68 = getelementptr inbounds float, float addrspace(1)* %0, i64 %63
  store float %67, float addrspace(1)* %68, align 4, !tbaa !8
  %69 = shl i32 %6, 16
  %70 = add i32 %69, 458752
  %71 = add i32 %5, %70
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds float, float addrspace(1)* %1, i64 %72
  %74 = load float, float addrspace(1)* %73, align 4, !tbaa !4
  %75 = fcmp ogt float %74, 0.000000e+00
  %76 = select i1 %75, float %74, float 0.000000e+00
  %77 = getelementptr inbounds float, float addrspace(1)* %0, i64 %72
  store float %76, float addrspace(1)* %77, align 4, !tbaa !8
  %78 = shl i32 %6, 16
  %79 = add i32 %78, 524288
  %80 = add i32 %5, %79
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds float, float addrspace(1)* %1, i64 %81
  %83 = load float, float addrspace(1)* %82, align 4, !tbaa !4
  %84 = fcmp ogt float %83, 0.000000e+00
  %85 = select i1 %84, float %83, float 0.000000e+00
  %86 = getelementptr inbounds float, float addrspace(1)* %0, i64 %81
  store float %85, float addrspace(1)* %86, align 4, !tbaa !8
  %87 = shl i32 %6, 16
  %88 = add i32 %87, 589824
  %89 = add i32 %5, %88
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds float, float addrspace(1)* %1, i64 %90
  %92 = load float, float addrspace(1)* %91, align 4, !tbaa !4
  %93 = fcmp ogt float %92, 0.000000e+00
  %94 = select i1 %93, float %92, float 0.000000e+00
  %95 = getelementptr inbounds float, float addrspace(1)* %0, i64 %90
  store float %94, float addrspace(1)* %95, align 4, !tbaa !8
  %96 = shl i32 %6, 16
  %97 = add i32 %96, 655360
  %98 = add i32 %5, %97
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds float, float addrspace(1)* %1, i64 %99
  %101 = load float, float addrspace(1)* %100, align 4, !tbaa !4
  %102 = fcmp ogt float %101, 0.000000e+00
  %103 = select i1 %102, float %101, float 0.000000e+00
  %104 = getelementptr inbounds float, float addrspace(1)* %0, i64 %99
  store float %103, float addrspace(1)* %104, align 4, !tbaa !8
  %105 = shl i32 %6, 16
  %106 = add i32 %105, 720896
  %107 = add i32 %5, %106
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds float, float addrspace(1)* %1, i64 %108
  %110 = load float, float addrspace(1)* %109, align 4, !tbaa !4
  %111 = fcmp ogt float %110, 0.000000e+00
  %112 = select i1 %111, float %110, float 0.000000e+00
  %113 = getelementptr inbounds float, float addrspace(1)* %0, i64 %108
  store float %112, float addrspace(1)* %113, align 4, !tbaa !8
  %114 = shl i32 %6, 16
  %115 = add i32 %114, 786432
  %116 = add i32 %5, %115
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds float, float addrspace(1)* %1, i64 %117
  %119 = load float, float addrspace(1)* %118, align 4, !tbaa !4
  %120 = fcmp ogt float %119, 0.000000e+00
  %121 = select i1 %120, float %119, float 0.000000e+00
  %122 = getelementptr inbounds float, float addrspace(1)* %0, i64 %117
  store float %121, float addrspace(1)* %122, align 4, !tbaa !8
  %123 = shl i32 %6, 16
  %124 = add i32 %123, 851968
  %125 = add i32 %5, %124
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds float, float addrspace(1)* %1, i64 %126
  %128 = load float, float addrspace(1)* %127, align 4, !tbaa !4
  %129 = fcmp ogt float %128, 0.000000e+00
  %130 = select i1 %129, float %128, float 0.000000e+00
  %131 = getelementptr inbounds float, float addrspace(1)* %0, i64 %126
  store float %130, float addrspace(1)* %131, align 4, !tbaa !8
  %132 = add nuw nsw i32 %6, 14
  %exitcond.13 = icmp eq i32 %132, 784
  br i1 %exitcond.13, label %for_end, label %for_body, !prof !11

for_end:                                          ; preds = %for_body
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workgroup.id.x() #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workitem.id.x() #1

attributes #0 = { nofree nounwind "amdgpu-flat-work-group-size"="1,1024" "no-nans-fp-math"="true" }
attributes #1 = { nounwind readnone speculatable }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 12.0.0 (/src/external/llvm-project/clang 1100ebe275a9dcc79a9abbda902b6f10738f2f5d)"}
!4 = !{!5, !5, i64 0}
!5 = !{!"float", !6, i64 0}
!6 = !{!"0x2ff2c90", !7, i64 0}
!7 = !{!"tvm-tbaa"}
!8 = !{!9, !9, i64 0}
!9 = !{!"float", !10, i64 0}
!10 = !{!"0x2ff2d30", !7, i64 0}
!11 = !{!"branch_weights", i32 1, i32 1048576}

relu (128, 256, 28, 28)
Time cost of this operator: 0.0002889125
Lowered TIR:
@main = primfn(input0_1: handle, compute_1: handle) -> ()
  attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
  buffers = {compute: Buffer(compute_2: Pointer(float32), float32, [128, 256, 28, 28], []),
             input0: Buffer(input0_2: Pointer(float32), float32, [128, 256, 28, 28], [])}
  buffer_map = {input0_1: input0, compute_1: compute} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 256;
  for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 392) {
    compute_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)] = max((float32*)input0_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)], 0f32)
  }
}


; ModuleID = 'TVMAMDGPUModule'
source_filename = "TVMAMDGPUModule"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-ni:7"
target triple = "amdgcn-amd-amdhsa-hcc"

; Function Attrs: nofree nounwind
define dllexport amdgpu_kernel void @default_function_kernel0(float addrspace(1)* noalias nocapture %0, float addrspace(1)* noalias nocapture readonly %1) local_unnamed_addr #0 {
entry:
  %2 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %3 = tail call i32 @llvm.amdgcn.workitem.id.x()
  %4 = shl i32 %2, 8
  %5 = add i32 %4, %3
  br label %for_body

for_body:                                         ; preds = %for_body, %entry
  %6 = phi i32 [ 0, %entry ], [ %132, %for_body ]
  %7 = shl nuw nsw i32 %6, 16
  %8 = add i32 %5, %7
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds float, float addrspace(1)* %1, i64 %9
  %11 = load float, float addrspace(1)* %10, align 4, !tbaa !4
  %12 = fcmp ogt float %11, 0.000000e+00
  %13 = select i1 %12, float %11, float 0.000000e+00
  %14 = getelementptr inbounds float, float addrspace(1)* %0, i64 %9
  store float %13, float addrspace(1)* %14, align 4, !tbaa !8
  %15 = shl i32 %6, 16
  %16 = or i32 %15, 65536
  %17 = add i32 %5, %16
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds float, float addrspace(1)* %1, i64 %18
  %20 = load float, float addrspace(1)* %19, align 4, !tbaa !4
  %21 = fcmp ogt float %20, 0.000000e+00
  %22 = select i1 %21, float %20, float 0.000000e+00
  %23 = getelementptr inbounds float, float addrspace(1)* %0, i64 %18
  store float %22, float addrspace(1)* %23, align 4, !tbaa !8
  %24 = shl i32 %6, 16
  %25 = add i32 %24, 131072
  %26 = add i32 %5, %25
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds float, float addrspace(1)* %1, i64 %27
  %29 = load float, float addrspace(1)* %28, align 4, !tbaa !4
  %30 = fcmp ogt float %29, 0.000000e+00
  %31 = select i1 %30, float %29, float 0.000000e+00
  %32 = getelementptr inbounds float, float addrspace(1)* %0, i64 %27
  store float %31, float addrspace(1)* %32, align 4, !tbaa !8
  %33 = shl i32 %6, 16
  %34 = add i32 %33, 196608
  %35 = add i32 %5, %34
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds float, float addrspace(1)* %1, i64 %36
  %38 = load float, float addrspace(1)* %37, align 4, !tbaa !4
  %39 = fcmp ogt float %38, 0.000000e+00
  %40 = select i1 %39, float %38, float 0.000000e+00
  %41 = getelementptr inbounds float, float addrspace(1)* %0, i64 %36
  store float %40, float addrspace(1)* %41, align 4, !tbaa !8
  %42 = shl i32 %6, 16
  %43 = add i32 %42, 262144
  %44 = add i32 %5, %43
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds float, float addrspace(1)* %1, i64 %45
  %47 = load float, float addrspace(1)* %46, align 4, !tbaa !4
  %48 = fcmp ogt float %47, 0.000000e+00
  %49 = select i1 %48, float %47, float 0.000000e+00
  %50 = getelementptr inbounds float, float addrspace(1)* %0, i64 %45
  store float %49, float addrspace(1)* %50, align 4, !tbaa !8
  %51 = shl i32 %6, 16
  %52 = add i32 %51, 327680
  %53 = add i32 %5, %52
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds float, float addrspace(1)* %1, i64 %54
  %56 = load float, float addrspace(1)* %55, align 4, !tbaa !4
  %57 = fcmp ogt float %56, 0.000000e+00
  %58 = select i1 %57, float %56, float 0.000000e+00
  %59 = getelementptr inbounds float, float addrspace(1)* %0, i64 %54
  store float %58, float addrspace(1)* %59, align 4, !tbaa !8
  %60 = shl i32 %6, 16
  %61 = add i32 %60, 393216
  %62 = add i32 %5, %61
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds float, float addrspace(1)* %1, i64 %63
  %65 = load float, float addrspace(1)* %64, align 4, !tbaa !4
  %66 = fcmp ogt float %65, 0.000000e+00
  %67 = select i1 %66, float %65, float 0.000000e+00
  %68 = getelementptr inbounds float, float addrspace(1)* %0, i64 %63
  store float %67, float addrspace(1)* %68, align 4, !tbaa !8
  %69 = shl i32 %6, 16
  %70 = add i32 %69, 458752
  %71 = add i32 %5, %70
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds float, float addrspace(1)* %1, i64 %72
  %74 = load float, float addrspace(1)* %73, align 4, !tbaa !4
  %75 = fcmp ogt float %74, 0.000000e+00
  %76 = select i1 %75, float %74, float 0.000000e+00
  %77 = getelementptr inbounds float, float addrspace(1)* %0, i64 %72
  store float %76, float addrspace(1)* %77, align 4, !tbaa !8
  %78 = shl i32 %6, 16
  %79 = add i32 %78, 524288
  %80 = add i32 %5, %79
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds float, float addrspace(1)* %1, i64 %81
  %83 = load float, float addrspace(1)* %82, align 4, !tbaa !4
  %84 = fcmp ogt float %83, 0.000000e+00
  %85 = select i1 %84, float %83, float 0.000000e+00
  %86 = getelementptr inbounds float, float addrspace(1)* %0, i64 %81
  store float %85, float addrspace(1)* %86, align 4, !tbaa !8
  %87 = shl i32 %6, 16
  %88 = add i32 %87, 589824
  %89 = add i32 %5, %88
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds float, float addrspace(1)* %1, i64 %90
  %92 = load float, float addrspace(1)* %91, align 4, !tbaa !4
  %93 = fcmp ogt float %92, 0.000000e+00
  %94 = select i1 %93, float %92, float 0.000000e+00
  %95 = getelementptr inbounds float, float addrspace(1)* %0, i64 %90
  store float %94, float addrspace(1)* %95, align 4, !tbaa !8
  %96 = shl i32 %6, 16
  %97 = add i32 %96, 655360
  %98 = add i32 %5, %97
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds float, float addrspace(1)* %1, i64 %99
  %101 = load float, float addrspace(1)* %100, align 4, !tbaa !4
  %102 = fcmp ogt float %101, 0.000000e+00
  %103 = select i1 %102, float %101, float 0.000000e+00
  %104 = getelementptr inbounds float, float addrspace(1)* %0, i64 %99
  store float %103, float addrspace(1)* %104, align 4, !tbaa !8
  %105 = shl i32 %6, 16
  %106 = add i32 %105, 720896
  %107 = add i32 %5, %106
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds float, float addrspace(1)* %1, i64 %108
  %110 = load float, float addrspace(1)* %109, align 4, !tbaa !4
  %111 = fcmp ogt float %110, 0.000000e+00
  %112 = select i1 %111, float %110, float 0.000000e+00
  %113 = getelementptr inbounds float, float addrspace(1)* %0, i64 %108
  store float %112, float addrspace(1)* %113, align 4, !tbaa !8
  %114 = shl i32 %6, 16
  %115 = add i32 %114, 786432
  %116 = add i32 %5, %115
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds float, float addrspace(1)* %1, i64 %117
  %119 = load float, float addrspace(1)* %118, align 4, !tbaa !4
  %120 = fcmp ogt float %119, 0.000000e+00
  %121 = select i1 %120, float %119, float 0.000000e+00
  %122 = getelementptr inbounds float, float addrspace(1)* %0, i64 %117
  store float %121, float addrspace(1)* %122, align 4, !tbaa !8
  %123 = shl i32 %6, 16
  %124 = add i32 %123, 851968
  %125 = add i32 %5, %124
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds float, float addrspace(1)* %1, i64 %126
  %128 = load float, float addrspace(1)* %127, align 4, !tbaa !4
  %129 = fcmp ogt float %128, 0.000000e+00
  %130 = select i1 %129, float %128, float 0.000000e+00
  %131 = getelementptr inbounds float, float addrspace(1)* %0, i64 %126
  store float %130, float addrspace(1)* %131, align 4, !tbaa !8
  %132 = add nuw nsw i32 %6, 14
  %exitcond.13 = icmp eq i32 %132, 392
  br i1 %exitcond.13, label %for_end, label %for_body, !prof !11

for_end:                                          ; preds = %for_body
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workgroup.id.x() #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workitem.id.x() #1

attributes #0 = { nofree nounwind "amdgpu-flat-work-group-size"="1,1024" "no-nans-fp-math"="true" }
attributes #1 = { nounwind readnone speculatable }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 12.0.0 (/src/external/llvm-project/clang 1100ebe275a9dcc79a9abbda902b6f10738f2f5d)"}
!4 = !{!5, !5, i64 0}
!5 = !{!"float", !6, i64 0}
!6 = !{!"0x2cd8b30", !7, i64 0}
!7 = !{!"tvm-tbaa"}
!8 = !{!9, !9, i64 0}
!9 = !{!"float", !10, i64 0}
!10 = !{!"0x2cd8d30", !7, i64 0}
!11 = !{!"branch_weights", i32 1, i32 1048576}

relu (128, 2016, 21, 21)
Time cost of this operator: 0.0013249797
Lowered TIR:
@main = primfn(input0_1: handle, compute_1: handle) -> ()
  attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
  buffers = {compute: Buffer(compute_2: Pointer(float32), float32, [128, 2016, 21, 21], []),
             input0: Buffer(input0_2: Pointer(float32), float32, [128, 2016, 21, 21], [])}
  buffer_map = {input0_1: input0, compute_1: compute} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 256;
  for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 1737) {
    if @tir.likely(((((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x) < 113799168), dtype=bool) {
      compute_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)] = max((float32*)input0_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)], 0f32)
    }
  }
}


; ModuleID = 'TVMAMDGPUModule'
source_filename = "TVMAMDGPUModule"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-ni:7"
target triple = "amdgcn-amd-amdhsa-hcc"

; Function Attrs: nofree nounwind
define dllexport amdgpu_kernel void @default_function_kernel0(float addrspace(1)* noalias nocapture %0, float addrspace(1)* noalias nocapture readonly %1) local_unnamed_addr #0 {
entry:
  %2 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %3 = tail call i32 @llvm.amdgcn.workitem.id.x()
  %4 = shl i32 %2, 8
  %5 = add i32 %4, %3
  br label %for_body

for_body:                                         ; preds = %if_end.8, %entry
  %6 = phi i32 [ 0, %entry ], [ %96, %if_end.8 ]
  %7 = shl nuw nsw i32 %6, 16
  %8 = add i32 %5, %7
  %9 = icmp slt i32 %8, 113799168
  %10 = sext i32 %8 to i64
  br i1 %9, label %if_then, label %if_end, !prof !4

for_end:                                          ; preds = %if_end.8
  ret void

if_then:                                          ; preds = %for_body
  %11 = getelementptr inbounds float, float addrspace(1)* %0, i64 %10
  %12 = getelementptr inbounds float, float addrspace(1)* %1, i64 %10
  %13 = load float, float addrspace(1)* %12, align 4, !tbaa !5
  %14 = fcmp ogt float %13, 0.000000e+00
  %15 = select i1 %14, float %13, float 0.000000e+00
  store float %15, float addrspace(1)* %11, align 4, !tbaa !9
  br label %if_end

if_end:                                           ; preds = %if_then, %for_body
  %16 = shl i32 %6, 16
  %17 = add i32 %16, 65536
  %18 = add i32 %5, %17
  %19 = icmp slt i32 %18, 113799168
  %20 = sext i32 %18 to i64
  br i1 %19, label %if_then.1, label %if_end.1, !prof !4

if_then.1:                                        ; preds = %if_end
  %21 = getelementptr inbounds float, float addrspace(1)* %0, i64 %20
  %22 = getelementptr inbounds float, float addrspace(1)* %1, i64 %20
  %23 = load float, float addrspace(1)* %22, align 4, !tbaa !5
  %24 = fcmp ogt float %23, 0.000000e+00
  %25 = select i1 %24, float %23, float 0.000000e+00
  store float %25, float addrspace(1)* %21, align 4, !tbaa !9
  br label %if_end.1

if_end.1:                                         ; preds = %if_then.1, %if_end
  %26 = shl i32 %6, 16
  %27 = add i32 %26, 131072
  %28 = add i32 %5, %27
  %29 = icmp slt i32 %28, 113799168
  %30 = sext i32 %28 to i64
  br i1 %29, label %if_then.2, label %if_end.2, !prof !4

if_then.2:                                        ; preds = %if_end.1
  %31 = getelementptr inbounds float, float addrspace(1)* %0, i64 %30
  %32 = getelementptr inbounds float, float addrspace(1)* %1, i64 %30
  %33 = load float, float addrspace(1)* %32, align 4, !tbaa !5
  %34 = fcmp ogt float %33, 0.000000e+00
  %35 = select i1 %34, float %33, float 0.000000e+00
  store float %35, float addrspace(1)* %31, align 4, !tbaa !9
  br label %if_end.2

if_end.2:                                         ; preds = %if_then.2, %if_end.1
  %36 = shl i32 %6, 16
  %37 = add i32 %36, 196608
  %38 = add i32 %5, %37
  %39 = icmp slt i32 %38, 113799168
  %40 = sext i32 %38 to i64
  br i1 %39, label %if_then.3, label %if_end.3, !prof !4

if_then.3:                                        ; preds = %if_end.2
  %41 = getelementptr inbounds float, float addrspace(1)* %0, i64 %40
  %42 = getelementptr inbounds float, float addrspace(1)* %1, i64 %40
  %43 = load float, float addrspace(1)* %42, align 4, !tbaa !5
  %44 = fcmp ogt float %43, 0.000000e+00
  %45 = select i1 %44, float %43, float 0.000000e+00
  store float %45, float addrspace(1)* %41, align 4, !tbaa !9
  br label %if_end.3

if_end.3:                                         ; preds = %if_then.3, %if_end.2
  %46 = shl i32 %6, 16
  %47 = add i32 %46, 262144
  %48 = add i32 %5, %47
  %49 = icmp slt i32 %48, 113799168
  %50 = sext i32 %48 to i64
  br i1 %49, label %if_then.4, label %if_end.4, !prof !4

if_then.4:                                        ; preds = %if_end.3
  %51 = getelementptr inbounds float, float addrspace(1)* %0, i64 %50
  %52 = getelementptr inbounds float, float addrspace(1)* %1, i64 %50
  %53 = load float, float addrspace(1)* %52, align 4, !tbaa !5
  %54 = fcmp ogt float %53, 0.000000e+00
  %55 = select i1 %54, float %53, float 0.000000e+00
  store float %55, float addrspace(1)* %51, align 4, !tbaa !9
  br label %if_end.4

if_end.4:                                         ; preds = %if_then.4, %if_end.3
  %56 = shl i32 %6, 16
  %57 = add i32 %56, 327680
  %58 = add i32 %5, %57
  %59 = icmp slt i32 %58, 113799168
  %60 = sext i32 %58 to i64
  br i1 %59, label %if_then.5, label %if_end.5, !prof !4

if_then.5:                                        ; preds = %if_end.4
  %61 = getelementptr inbounds float, float addrspace(1)* %0, i64 %60
  %62 = getelementptr inbounds float, float addrspace(1)* %1, i64 %60
  %63 = load float, float addrspace(1)* %62, align 4, !tbaa !5
  %64 = fcmp ogt float %63, 0.000000e+00
  %65 = select i1 %64, float %63, float 0.000000e+00
  store float %65, float addrspace(1)* %61, align 4, !tbaa !9
  br label %if_end.5

if_end.5:                                         ; preds = %if_then.5, %if_end.4
  %66 = shl i32 %6, 16
  %67 = add i32 %66, 393216
  %68 = add i32 %5, %67
  %69 = icmp slt i32 %68, 113799168
  %70 = sext i32 %68 to i64
  br i1 %69, label %if_then.6, label %if_end.6, !prof !4

if_then.6:                                        ; preds = %if_end.5
  %71 = getelementptr inbounds float, float addrspace(1)* %0, i64 %70
  %72 = getelementptr inbounds float, float addrspace(1)* %1, i64 %70
  %73 = load float, float addrspace(1)* %72, align 4, !tbaa !5
  %74 = fcmp ogt float %73, 0.000000e+00
  %75 = select i1 %74, float %73, float 0.000000e+00
  store float %75, float addrspace(1)* %71, align 4, !tbaa !9
  br label %if_end.6

if_end.6:                                         ; preds = %if_then.6, %if_end.5
  %76 = shl i32 %6, 16
  %77 = add i32 %76, 458752
  %78 = add i32 %5, %77
  %79 = icmp slt i32 %78, 113799168
  %80 = sext i32 %78 to i64
  br i1 %79, label %if_then.7, label %if_end.7, !prof !4

if_then.7:                                        ; preds = %if_end.6
  %81 = getelementptr inbounds float, float addrspace(1)* %0, i64 %80
  %82 = getelementptr inbounds float, float addrspace(1)* %1, i64 %80
  %83 = load float, float addrspace(1)* %82, align 4, !tbaa !5
  %84 = fcmp ogt float %83, 0.000000e+00
  %85 = select i1 %84, float %83, float 0.000000e+00
  store float %85, float addrspace(1)* %81, align 4, !tbaa !9
  br label %if_end.7

if_end.7:                                         ; preds = %if_then.7, %if_end.6
  %86 = shl i32 %6, 16
  %87 = add i32 %86, 524288
  %88 = add i32 %5, %87
  %89 = icmp slt i32 %88, 113799168
  %90 = sext i32 %88 to i64
  br i1 %89, label %if_then.8, label %if_end.8, !prof !4

if_then.8:                                        ; preds = %if_end.7
  %91 = getelementptr inbounds float, float addrspace(1)* %0, i64 %90
  %92 = getelementptr inbounds float, float addrspace(1)* %1, i64 %90
  %93 = load float, float addrspace(1)* %92, align 4, !tbaa !5
  %94 = fcmp ogt float %93, 0.000000e+00
  %95 = select i1 %94, float %93, float 0.000000e+00
  store float %95, float addrspace(1)* %91, align 4, !tbaa !9
  br label %if_end.8

if_end.8:                                         ; preds = %if_then.8, %if_end.7
  %96 = add nuw nsw i32 %6, 9
  %exitcond.8 = icmp eq i32 %96, 1737
  br i1 %exitcond.8, label %for_end, label %for_body, !prof !12
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workgroup.id.x() #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workitem.id.x() #1

attributes #0 = { nofree nounwind "amdgpu-flat-work-group-size"="1,1024" "no-nans-fp-math"="true" }
attributes #1 = { nounwind readnone speculatable }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 12.0.0 (/src/external/llvm-project/clang 1100ebe275a9dcc79a9abbda902b6f10738f2f5d)"}
!4 = !{!"branch_weights", i32 1048576, i32 1}
!5 = !{!6, !6, i64 0}
!6 = !{!"float", !7, i64 0}
!7 = !{!"0x2567930", !8, i64 0}
!8 = !{!"tvm-tbaa"}
!9 = !{!10, !10, i64 0}
!10 = !{!"float", !11, i64 0}
!11 = !{!"0x2569700", !8, i64 0}
!12 = !{!"branch_weights", i32 1, i32 1048576}

relu (128, 672, 11, 11)
Time cost of this operator: 0.0001242827
Lowered TIR:
@main = primfn(input0_1: handle, compute_1: handle) -> ()
  attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
  buffers = {compute: Buffer(compute_2: Pointer(float32), float32, [128, 672, 11, 11], []),
             input0: Buffer(input0_2: Pointer(float32), float32, [128, 672, 11, 11], [])}
  buffer_map = {input0_1: input0, compute_1: compute} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 256;
  for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 159) {
    if @tir.likely(((((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x) < 10407936), dtype=bool) {
      compute_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)] = max((float32*)input0_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)], 0f32)
    }
  }
}


; ModuleID = 'TVMAMDGPUModule'
source_filename = "TVMAMDGPUModule"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-ni:7"
target triple = "amdgcn-amd-amdhsa-hcc"

; Function Attrs: nofree nounwind
define dllexport amdgpu_kernel void @default_function_kernel0(float addrspace(1)* noalias nocapture %0, float addrspace(1)* noalias nocapture readonly %1) local_unnamed_addr #0 {
entry:
  %2 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %3 = tail call i32 @llvm.amdgcn.workitem.id.x()
  %4 = shl i32 %2, 8
  %5 = add i32 %4, %3
  br label %for_body

for_body:                                         ; preds = %if_end.2, %entry
  %6 = phi i32 [ 0, %entry ], [ %36, %if_end.2 ]
  %7 = shl nuw nsw i32 %6, 16
  %8 = add i32 %5, %7
  %9 = icmp slt i32 %8, 10407936
  %10 = sext i32 %8 to i64
  br i1 %9, label %if_then, label %if_end, !prof !4

for_end:                                          ; preds = %if_end.2
  ret void

if_then:                                          ; preds = %for_body
  %11 = getelementptr inbounds float, float addrspace(1)* %0, i64 %10
  %12 = getelementptr inbounds float, float addrspace(1)* %1, i64 %10
  %13 = load float, float addrspace(1)* %12, align 4, !tbaa !5
  %14 = fcmp ogt float %13, 0.000000e+00
  %15 = select i1 %14, float %13, float 0.000000e+00
  store float %15, float addrspace(1)* %11, align 4, !tbaa !9
  br label %if_end

if_end:                                           ; preds = %if_then, %for_body
  %16 = shl i32 %6, 16
  %17 = add i32 %16, 65536
  %18 = add i32 %5, %17
  %19 = icmp slt i32 %18, 10407936
  %20 = sext i32 %18 to i64
  br i1 %19, label %if_then.1, label %if_end.1, !prof !4

if_then.1:                                        ; preds = %if_end
  %21 = getelementptr inbounds float, float addrspace(1)* %0, i64 %20
  %22 = getelementptr inbounds float, float addrspace(1)* %1, i64 %20
  %23 = load float, float addrspace(1)* %22, align 4, !tbaa !5
  %24 = fcmp ogt float %23, 0.000000e+00
  %25 = select i1 %24, float %23, float 0.000000e+00
  store float %25, float addrspace(1)* %21, align 4, !tbaa !9
  br label %if_end.1

if_end.1:                                         ; preds = %if_then.1, %if_end
  %26 = shl i32 %6, 16
  %27 = add i32 %26, 131072
  %28 = add i32 %5, %27
  %29 = icmp slt i32 %28, 10407936
  %30 = sext i32 %28 to i64
  br i1 %29, label %if_then.2, label %if_end.2, !prof !4

if_then.2:                                        ; preds = %if_end.1
  %31 = getelementptr inbounds float, float addrspace(1)* %0, i64 %30
  %32 = getelementptr inbounds float, float addrspace(1)* %1, i64 %30
  %33 = load float, float addrspace(1)* %32, align 4, !tbaa !5
  %34 = fcmp ogt float %33, 0.000000e+00
  %35 = select i1 %34, float %33, float 0.000000e+00
  store float %35, float addrspace(1)* %31, align 4, !tbaa !9
  br label %if_end.2

if_end.2:                                         ; preds = %if_then.2, %if_end.1
  %36 = add nuw nsw i32 %6, 3
  %exitcond.2 = icmp eq i32 %36, 159
  br i1 %exitcond.2, label %for_end, label %for_body, !prof !12
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workgroup.id.x() #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workitem.id.x() #1

attributes #0 = { nofree nounwind "amdgpu-flat-work-group-size"="1,1024" "no-nans-fp-math"="true" }
attributes #1 = { nounwind readnone speculatable }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 12.0.0 (/src/external/llvm-project/clang 1100ebe275a9dcc79a9abbda902b6f10738f2f5d)"}
!4 = !{!"branch_weights", i32 1048576, i32 1}
!5 = !{!6, !6, i64 0}
!6 = !{!"float", !7, i64 0}
!7 = !{!"0x1fb1930", !8, i64 0}
!8 = !{!"tvm-tbaa"}
!9 = !{!10, !10, i64 0}
!10 = !{!"float", !11, i64 0}
!11 = !{!"0x1fb3700", !8, i64 0}
!12 = !{!"branch_weights", i32 1, i32 1048576}

relu (128, 168, 83, 83)
Time cost of this operator: 0.0017474777
Lowered TIR:
@main = primfn(input0_1: handle, compute_1: handle) -> ()
  attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
  buffers = {compute: Buffer(compute_2: Pointer(float32), float32, [128, 168, 83, 83], []),
             input0: Buffer(input0_2: Pointer(float32), float32, [128, 168, 83, 83], [])}
  buffer_map = {input0_1: input0, compute_1: compute} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 256;
  for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 2261) {
    if @tir.likely(((((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x) < 148141056), dtype=bool) {
      compute_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)] = max((float32*)input0_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)], 0f32)
    }
  }
}


; ModuleID = 'TVMAMDGPUModule'
source_filename = "TVMAMDGPUModule"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-ni:7"
target triple = "amdgcn-amd-amdhsa-hcc"

; Function Attrs: nofree nounwind
define dllexport amdgpu_kernel void @default_function_kernel0(float addrspace(1)* noalias nocapture %0, float addrspace(1)* noalias nocapture readonly %1) local_unnamed_addr #0 {
entry:
  %2 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %3 = tail call i32 @llvm.amdgcn.workitem.id.x()
  %4 = shl i32 %2, 8
  %5 = add i32 %4, %3
  br label %for_body

for_body:                                         ; preds = %if_end.6, %entry
  %6 = phi i32 [ 0, %entry ], [ %76, %if_end.6 ]
  %7 = shl nuw nsw i32 %6, 16
  %8 = add i32 %5, %7
  %9 = icmp slt i32 %8, 148141056
  %10 = sext i32 %8 to i64
  br i1 %9, label %if_then, label %if_end, !prof !4

for_end:                                          ; preds = %if_end.6
  ret void

if_then:                                          ; preds = %for_body
  %11 = getelementptr inbounds float, float addrspace(1)* %0, i64 %10
  %12 = getelementptr inbounds float, float addrspace(1)* %1, i64 %10
  %13 = load float, float addrspace(1)* %12, align 4, !tbaa !5
  %14 = fcmp ogt float %13, 0.000000e+00
  %15 = select i1 %14, float %13, float 0.000000e+00
  store float %15, float addrspace(1)* %11, align 4, !tbaa !9
  br label %if_end

if_end:                                           ; preds = %if_then, %for_body
  %16 = shl i32 %6, 16
  %17 = add i32 %16, 65536
  %18 = add i32 %5, %17
  %19 = icmp slt i32 %18, 148141056
  %20 = sext i32 %18 to i64
  br i1 %19, label %if_then.1, label %if_end.1, !prof !4

if_then.1:                                        ; preds = %if_end
  %21 = getelementptr inbounds float, float addrspace(1)* %0, i64 %20
  %22 = getelementptr inbounds float, float addrspace(1)* %1, i64 %20
  %23 = load float, float addrspace(1)* %22, align 4, !tbaa !5
  %24 = fcmp ogt float %23, 0.000000e+00
  %25 = select i1 %24, float %23, float 0.000000e+00
  store float %25, float addrspace(1)* %21, align 4, !tbaa !9
  br label %if_end.1

if_end.1:                                         ; preds = %if_then.1, %if_end
  %26 = shl i32 %6, 16
  %27 = add i32 %26, 131072
  %28 = add i32 %5, %27
  %29 = icmp slt i32 %28, 148141056
  %30 = sext i32 %28 to i64
  br i1 %29, label %if_then.2, label %if_end.2, !prof !4

if_then.2:                                        ; preds = %if_end.1
  %31 = getelementptr inbounds float, float addrspace(1)* %0, i64 %30
  %32 = getelementptr inbounds float, float addrspace(1)* %1, i64 %30
  %33 = load float, float addrspace(1)* %32, align 4, !tbaa !5
  %34 = fcmp ogt float %33, 0.000000e+00
  %35 = select i1 %34, float %33, float 0.000000e+00
  store float %35, float addrspace(1)* %31, align 4, !tbaa !9
  br label %if_end.2

if_end.2:                                         ; preds = %if_then.2, %if_end.1
  %36 = shl i32 %6, 16
  %37 = add i32 %36, 196608
  %38 = add i32 %5, %37
  %39 = icmp slt i32 %38, 148141056
  %40 = sext i32 %38 to i64
  br i1 %39, label %if_then.3, label %if_end.3, !prof !4

if_then.3:                                        ; preds = %if_end.2
  %41 = getelementptr inbounds float, float addrspace(1)* %0, i64 %40
  %42 = getelementptr inbounds float, float addrspace(1)* %1, i64 %40
  %43 = load float, float addrspace(1)* %42, align 4, !tbaa !5
  %44 = fcmp ogt float %43, 0.000000e+00
  %45 = select i1 %44, float %43, float 0.000000e+00
  store float %45, float addrspace(1)* %41, align 4, !tbaa !9
  br label %if_end.3

if_end.3:                                         ; preds = %if_then.3, %if_end.2
  %46 = shl i32 %6, 16
  %47 = add i32 %46, 262144
  %48 = add i32 %5, %47
  %49 = icmp slt i32 %48, 148141056
  %50 = sext i32 %48 to i64
  br i1 %49, label %if_then.4, label %if_end.4, !prof !4

if_then.4:                                        ; preds = %if_end.3
  %51 = getelementptr inbounds float, float addrspace(1)* %0, i64 %50
  %52 = getelementptr inbounds float, float addrspace(1)* %1, i64 %50
  %53 = load float, float addrspace(1)* %52, align 4, !tbaa !5
  %54 = fcmp ogt float %53, 0.000000e+00
  %55 = select i1 %54, float %53, float 0.000000e+00
  store float %55, float addrspace(1)* %51, align 4, !tbaa !9
  br label %if_end.4

if_end.4:                                         ; preds = %if_then.4, %if_end.3
  %56 = shl i32 %6, 16
  %57 = add i32 %56, 327680
  %58 = add i32 %5, %57
  %59 = icmp slt i32 %58, 148141056
  %60 = sext i32 %58 to i64
  br i1 %59, label %if_then.5, label %if_end.5, !prof !4

if_then.5:                                        ; preds = %if_end.4
  %61 = getelementptr inbounds float, float addrspace(1)* %0, i64 %60
  %62 = getelementptr inbounds float, float addrspace(1)* %1, i64 %60
  %63 = load float, float addrspace(1)* %62, align 4, !tbaa !5
  %64 = fcmp ogt float %63, 0.000000e+00
  %65 = select i1 %64, float %63, float 0.000000e+00
  store float %65, float addrspace(1)* %61, align 4, !tbaa !9
  br label %if_end.5

if_end.5:                                         ; preds = %if_then.5, %if_end.4
  %66 = shl i32 %6, 16
  %67 = add i32 %66, 393216
  %68 = add i32 %5, %67
  %69 = icmp slt i32 %68, 148141056
  %70 = sext i32 %68 to i64
  br i1 %69, label %if_then.6, label %if_end.6, !prof !4

if_then.6:                                        ; preds = %if_end.5
  %71 = getelementptr inbounds float, float addrspace(1)* %0, i64 %70
  %72 = getelementptr inbounds float, float addrspace(1)* %1, i64 %70
  %73 = load float, float addrspace(1)* %72, align 4, !tbaa !5
  %74 = fcmp ogt float %73, 0.000000e+00
  %75 = select i1 %74, float %73, float 0.000000e+00
  store float %75, float addrspace(1)* %71, align 4, !tbaa !9
  br label %if_end.6

if_end.6:                                         ; preds = %if_then.6, %if_end.5
  %76 = add nuw nsw i32 %6, 7
  %exitcond.6 = icmp eq i32 %76, 2261
  br i1 %exitcond.6, label %for_end, label %for_body, !prof !12
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workgroup.id.x() #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workitem.id.x() #1

attributes #0 = { nofree nounwind "amdgpu-flat-work-group-size"="1,1024" "no-nans-fp-math"="true" }
attributes #1 = { nounwind readnone speculatable }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 12.0.0 (/src/external/llvm-project/clang 1100ebe275a9dcc79a9abbda902b6f10738f2f5d)"}
!4 = !{!"branch_weights", i32 1048576, i32 1}
!5 = !{!6, !6, i64 0}
!6 = !{!"float", !7, i64 0}
!7 = !{!"0x2c17930", !8, i64 0}
!8 = !{!"tvm-tbaa"}
!9 = !{!10, !10, i64 0}
!10 = !{!"float", !11, i64 0}
!11 = !{!"0x2c19700", !8, i64 0}
!12 = !{!"branch_weights", i32 1, i32 1048576}

relu (128, 64, 56, 56)
Time cost of this operator: 0.0002892602
Lowered TIR:
@main = primfn(input0_1: handle, compute_1: handle) -> ()
  attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
  buffers = {compute: Buffer(compute_2: Pointer(float32), float32, [128, 64, 56, 56], []),
             input0: Buffer(input0_2: Pointer(float32), float32, [128, 64, 56, 56], [])}
  buffer_map = {input0_1: input0, compute_1: compute} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 256;
  for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 392) {
    compute_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)] = max((float32*)input0_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)], 0f32)
  }
}


; ModuleID = 'TVMAMDGPUModule'
source_filename = "TVMAMDGPUModule"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-ni:7"
target triple = "amdgcn-amd-amdhsa-hcc"

; Function Attrs: nofree nounwind
define dllexport amdgpu_kernel void @default_function_kernel0(float addrspace(1)* noalias nocapture %0, float addrspace(1)* noalias nocapture readonly %1) local_unnamed_addr #0 {
entry:
  %2 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %3 = tail call i32 @llvm.amdgcn.workitem.id.x()
  %4 = shl i32 %2, 8
  %5 = add i32 %4, %3
  br label %for_body

for_body:                                         ; preds = %for_body, %entry
  %6 = phi i32 [ 0, %entry ], [ %132, %for_body ]
  %7 = shl nuw nsw i32 %6, 16
  %8 = add i32 %5, %7
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds float, float addrspace(1)* %1, i64 %9
  %11 = load float, float addrspace(1)* %10, align 4, !tbaa !4
  %12 = fcmp ogt float %11, 0.000000e+00
  %13 = select i1 %12, float %11, float 0.000000e+00
  %14 = getelementptr inbounds float, float addrspace(1)* %0, i64 %9
  store float %13, float addrspace(1)* %14, align 4, !tbaa !8
  %15 = shl i32 %6, 16
  %16 = or i32 %15, 65536
  %17 = add i32 %5, %16
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds float, float addrspace(1)* %1, i64 %18
  %20 = load float, float addrspace(1)* %19, align 4, !tbaa !4
  %21 = fcmp ogt float %20, 0.000000e+00
  %22 = select i1 %21, float %20, float 0.000000e+00
  %23 = getelementptr inbounds float, float addrspace(1)* %0, i64 %18
  store float %22, float addrspace(1)* %23, align 4, !tbaa !8
  %24 = shl i32 %6, 16
  %25 = add i32 %24, 131072
  %26 = add i32 %5, %25
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds float, float addrspace(1)* %1, i64 %27
  %29 = load float, float addrspace(1)* %28, align 4, !tbaa !4
  %30 = fcmp ogt float %29, 0.000000e+00
  %31 = select i1 %30, float %29, float 0.000000e+00
  %32 = getelementptr inbounds float, float addrspace(1)* %0, i64 %27
  store float %31, float addrspace(1)* %32, align 4, !tbaa !8
  %33 = shl i32 %6, 16
  %34 = add i32 %33, 196608
  %35 = add i32 %5, %34
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds float, float addrspace(1)* %1, i64 %36
  %38 = load float, float addrspace(1)* %37, align 4, !tbaa !4
  %39 = fcmp ogt float %38, 0.000000e+00
  %40 = select i1 %39, float %38, float 0.000000e+00
  %41 = getelementptr inbounds float, float addrspace(1)* %0, i64 %36
  store float %40, float addrspace(1)* %41, align 4, !tbaa !8
  %42 = shl i32 %6, 16
  %43 = add i32 %42, 262144
  %44 = add i32 %5, %43
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds float, float addrspace(1)* %1, i64 %45
  %47 = load float, float addrspace(1)* %46, align 4, !tbaa !4
  %48 = fcmp ogt float %47, 0.000000e+00
  %49 = select i1 %48, float %47, float 0.000000e+00
  %50 = getelementptr inbounds float, float addrspace(1)* %0, i64 %45
  store float %49, float addrspace(1)* %50, align 4, !tbaa !8
  %51 = shl i32 %6, 16
  %52 = add i32 %51, 327680
  %53 = add i32 %5, %52
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds float, float addrspace(1)* %1, i64 %54
  %56 = load float, float addrspace(1)* %55, align 4, !tbaa !4
  %57 = fcmp ogt float %56, 0.000000e+00
  %58 = select i1 %57, float %56, float 0.000000e+00
  %59 = getelementptr inbounds float, float addrspace(1)* %0, i64 %54
  store float %58, float addrspace(1)* %59, align 4, !tbaa !8
  %60 = shl i32 %6, 16
  %61 = add i32 %60, 393216
  %62 = add i32 %5, %61
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds float, float addrspace(1)* %1, i64 %63
  %65 = load float, float addrspace(1)* %64, align 4, !tbaa !4
  %66 = fcmp ogt float %65, 0.000000e+00
  %67 = select i1 %66, float %65, float 0.000000e+00
  %68 = getelementptr inbounds float, float addrspace(1)* %0, i64 %63
  store float %67, float addrspace(1)* %68, align 4, !tbaa !8
  %69 = shl i32 %6, 16
  %70 = add i32 %69, 458752
  %71 = add i32 %5, %70
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds float, float addrspace(1)* %1, i64 %72
  %74 = load float, float addrspace(1)* %73, align 4, !tbaa !4
  %75 = fcmp ogt float %74, 0.000000e+00
  %76 = select i1 %75, float %74, float 0.000000e+00
  %77 = getelementptr inbounds float, float addrspace(1)* %0, i64 %72
  store float %76, float addrspace(1)* %77, align 4, !tbaa !8
  %78 = shl i32 %6, 16
  %79 = add i32 %78, 524288
  %80 = add i32 %5, %79
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds float, float addrspace(1)* %1, i64 %81
  %83 = load float, float addrspace(1)* %82, align 4, !tbaa !4
  %84 = fcmp ogt float %83, 0.000000e+00
  %85 = select i1 %84, float %83, float 0.000000e+00
  %86 = getelementptr inbounds float, float addrspace(1)* %0, i64 %81
  store float %85, float addrspace(1)* %86, align 4, !tbaa !8
  %87 = shl i32 %6, 16
  %88 = add i32 %87, 589824
  %89 = add i32 %5, %88
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds float, float addrspace(1)* %1, i64 %90
  %92 = load float, float addrspace(1)* %91, align 4, !tbaa !4
  %93 = fcmp ogt float %92, 0.000000e+00
  %94 = select i1 %93, float %92, float 0.000000e+00
  %95 = getelementptr inbounds float, float addrspace(1)* %0, i64 %90
  store float %94, float addrspace(1)* %95, align 4, !tbaa !8
  %96 = shl i32 %6, 16
  %97 = add i32 %96, 655360
  %98 = add i32 %5, %97
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds float, float addrspace(1)* %1, i64 %99
  %101 = load float, float addrspace(1)* %100, align 4, !tbaa !4
  %102 = fcmp ogt float %101, 0.000000e+00
  %103 = select i1 %102, float %101, float 0.000000e+00
  %104 = getelementptr inbounds float, float addrspace(1)* %0, i64 %99
  store float %103, float addrspace(1)* %104, align 4, !tbaa !8
  %105 = shl i32 %6, 16
  %106 = add i32 %105, 720896
  %107 = add i32 %5, %106
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds float, float addrspace(1)* %1, i64 %108
  %110 = load float, float addrspace(1)* %109, align 4, !tbaa !4
  %111 = fcmp ogt float %110, 0.000000e+00
  %112 = select i1 %111, float %110, float 0.000000e+00
  %113 = getelementptr inbounds float, float addrspace(1)* %0, i64 %108
  store float %112, float addrspace(1)* %113, align 4, !tbaa !8
  %114 = shl i32 %6, 16
  %115 = add i32 %114, 786432
  %116 = add i32 %5, %115
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds float, float addrspace(1)* %1, i64 %117
  %119 = load float, float addrspace(1)* %118, align 4, !tbaa !4
  %120 = fcmp ogt float %119, 0.000000e+00
  %121 = select i1 %120, float %119, float 0.000000e+00
  %122 = getelementptr inbounds float, float addrspace(1)* %0, i64 %117
  store float %121, float addrspace(1)* %122, align 4, !tbaa !8
  %123 = shl i32 %6, 16
  %124 = add i32 %123, 851968
  %125 = add i32 %5, %124
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds float, float addrspace(1)* %1, i64 %126
  %128 = load float, float addrspace(1)* %127, align 4, !tbaa !4
  %129 = fcmp ogt float %128, 0.000000e+00
  %130 = select i1 %129, float %128, float 0.000000e+00
  %131 = getelementptr inbounds float, float addrspace(1)* %0, i64 %126
  store float %130, float addrspace(1)* %131, align 4, !tbaa !8
  %132 = add nuw nsw i32 %6, 14
  %exitcond.13 = icmp eq i32 %132, 392
  br i1 %exitcond.13, label %for_end, label %for_body, !prof !11

for_end:                                          ; preds = %for_body
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workgroup.id.x() #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workitem.id.x() #1

attributes #0 = { nofree nounwind "amdgpu-flat-work-group-size"="1,1024" "no-nans-fp-math"="true" }
attributes #1 = { nounwind readnone speculatable }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 12.0.0 (/src/external/llvm-project/clang 1100ebe275a9dcc79a9abbda902b6f10738f2f5d)"}
!4 = !{!5, !5, i64 0}
!5 = !{!"float", !6, i64 0}
!6 = !{!"0x2c19ab0", !7, i64 0}
!7 = !{!"tvm-tbaa"}
!8 = !{!9, !9, i64 0}
!9 = !{!"float", !10, i64 0}
!10 = !{!"0x2c19d90", !7, i64 0}
!11 = !{!"branch_weights", i32 1, i32 1048576}

relu (128, 168, 42, 42)
Time cost of this operator: 0.0004452808
Lowered TIR:
@main = primfn(input0_1: handle, compute_1: handle) -> ()
  attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
  buffers = {compute: Buffer(compute_2: Pointer(float32), float32, [128, 168, 42, 42], []),
             input0: Buffer(input0_2: Pointer(float32), float32, [128, 168, 42, 42], [])}
  buffer_map = {input0_1: input0, compute_1: compute} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 256;
  for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 579) {
    if @tir.likely(((((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x) < 37933056), dtype=bool) {
      compute_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)] = max((float32*)input0_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)], 0f32)
    }
  }
}


; ModuleID = 'TVMAMDGPUModule'
source_filename = "TVMAMDGPUModule"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-ni:7"
target triple = "amdgcn-amd-amdhsa-hcc"

; Function Attrs: nofree nounwind
define dllexport amdgpu_kernel void @default_function_kernel0(float addrspace(1)* noalias nocapture %0, float addrspace(1)* noalias nocapture readonly %1) local_unnamed_addr #0 {
entry:
  %2 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %3 = tail call i32 @llvm.amdgcn.workitem.id.x()
  %4 = shl i32 %2, 8
  %5 = add i32 %4, %3
  br label %for_body

for_body:                                         ; preds = %if_end.2, %entry
  %6 = phi i32 [ 0, %entry ], [ %36, %if_end.2 ]
  %7 = shl nuw nsw i32 %6, 16
  %8 = add i32 %5, %7
  %9 = icmp slt i32 %8, 37933056
  %10 = sext i32 %8 to i64
  br i1 %9, label %if_then, label %if_end, !prof !4

for_end:                                          ; preds = %if_end.2
  ret void

if_then:                                          ; preds = %for_body
  %11 = getelementptr inbounds float, float addrspace(1)* %0, i64 %10
  %12 = getelementptr inbounds float, float addrspace(1)* %1, i64 %10
  %13 = load float, float addrspace(1)* %12, align 4, !tbaa !5
  %14 = fcmp ogt float %13, 0.000000e+00
  %15 = select i1 %14, float %13, float 0.000000e+00
  store float %15, float addrspace(1)* %11, align 4, !tbaa !9
  br label %if_end

if_end:                                           ; preds = %if_then, %for_body
  %16 = shl i32 %6, 16
  %17 = add i32 %16, 65536
  %18 = add i32 %5, %17
  %19 = icmp slt i32 %18, 37933056
  %20 = sext i32 %18 to i64
  br i1 %19, label %if_then.1, label %if_end.1, !prof !4

if_then.1:                                        ; preds = %if_end
  %21 = getelementptr inbounds float, float addrspace(1)* %0, i64 %20
  %22 = getelementptr inbounds float, float addrspace(1)* %1, i64 %20
  %23 = load float, float addrspace(1)* %22, align 4, !tbaa !5
  %24 = fcmp ogt float %23, 0.000000e+00
  %25 = select i1 %24, float %23, float 0.000000e+00
  store float %25, float addrspace(1)* %21, align 4, !tbaa !9
  br label %if_end.1

if_end.1:                                         ; preds = %if_then.1, %if_end
  %26 = shl i32 %6, 16
  %27 = add i32 %26, 131072
  %28 = add i32 %5, %27
  %29 = icmp slt i32 %28, 37933056
  %30 = sext i32 %28 to i64
  br i1 %29, label %if_then.2, label %if_end.2, !prof !4

if_then.2:                                        ; preds = %if_end.1
  %31 = getelementptr inbounds float, float addrspace(1)* %0, i64 %30
  %32 = getelementptr inbounds float, float addrspace(1)* %1, i64 %30
  %33 = load float, float addrspace(1)* %32, align 4, !tbaa !5
  %34 = fcmp ogt float %33, 0.000000e+00
  %35 = select i1 %34, float %33, float 0.000000e+00
  store float %35, float addrspace(1)* %31, align 4, !tbaa !9
  br label %if_end.2

if_end.2:                                         ; preds = %if_then.2, %if_end.1
  %36 = add nuw nsw i32 %6, 3
  %exitcond.2 = icmp eq i32 %36, 579
  br i1 %exitcond.2, label %for_end, label %for_body, !prof !12
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workgroup.id.x() #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workitem.id.x() #1

attributes #0 = { nofree nounwind "amdgpu-flat-work-group-size"="1,1024" "no-nans-fp-math"="true" }
attributes #1 = { nounwind readnone speculatable }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 12.0.0 (/src/external/llvm-project/clang 1100ebe275a9dcc79a9abbda902b6f10738f2f5d)"}
!4 = !{!"branch_weights", i32 1048576, i32 1}
!5 = !{!6, !6, i64 0}
!6 = !{!"float", !7, i64 0}
!7 = !{!"0x17c2930", !8, i64 0}
!8 = !{!"tvm-tbaa"}
!9 = !{!10, !10, i64 0}
!10 = !{!"float", !11, i64 0}
!11 = !{!"0x17c4700", !8, i64 0}
!12 = !{!"branch_weights", i32 1, i32 1048576}

relu (128, 336, 21, 21)
Time cost of this operator: 0.0002229182
Lowered TIR:
@main = primfn(input0_1: handle, compute_1: handle) -> ()
  attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
  buffers = {compute: Buffer(compute_2: Pointer(float32), float32, [128, 336, 21, 21], []),
             input0: Buffer(input0_2: Pointer(float32), float32, [128, 336, 21, 21], [])}
  buffer_map = {input0_1: input0, compute_1: compute} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 256;
  for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 290) {
    if @tir.likely(((((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x) < 18966528), dtype=bool) {
      compute_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)] = max((float32*)input0_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)], 0f32)
    }
  }
}


; ModuleID = 'TVMAMDGPUModule'
source_filename = "TVMAMDGPUModule"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-ni:7"
target triple = "amdgcn-amd-amdhsa-hcc"

; Function Attrs: nofree nounwind
define dllexport amdgpu_kernel void @default_function_kernel0(float addrspace(1)* noalias nocapture %0, float addrspace(1)* noalias nocapture readonly %1) local_unnamed_addr #0 {
entry:
  %2 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %3 = tail call i32 @llvm.amdgcn.workitem.id.x()
  %4 = shl i32 %2, 8
  %5 = add i32 %4, %3
  br label %for_body

for_body:                                         ; preds = %if_end.9, %entry
  %6 = phi i32 [ 0, %entry ], [ %106, %if_end.9 ]
  %7 = shl nuw nsw i32 %6, 16
  %8 = add i32 %5, %7
  %9 = icmp slt i32 %8, 18966528
  %10 = sext i32 %8 to i64
  br i1 %9, label %if_then, label %if_end, !prof !4

for_end:                                          ; preds = %if_end.9
  ret void

if_then:                                          ; preds = %for_body
  %11 = getelementptr inbounds float, float addrspace(1)* %0, i64 %10
  %12 = getelementptr inbounds float, float addrspace(1)* %1, i64 %10
  %13 = load float, float addrspace(1)* %12, align 4, !tbaa !5
  %14 = fcmp ogt float %13, 0.000000e+00
  %15 = select i1 %14, float %13, float 0.000000e+00
  store float %15, float addrspace(1)* %11, align 4, !tbaa !9
  br label %if_end

if_end:                                           ; preds = %if_then, %for_body
  %16 = shl i32 %6, 16
  %17 = or i32 %16, 65536
  %18 = add i32 %5, %17
  %19 = icmp slt i32 %18, 18966528
  %20 = sext i32 %18 to i64
  br i1 %19, label %if_then.1, label %if_end.1, !prof !4

if_then.1:                                        ; preds = %if_end
  %21 = getelementptr inbounds float, float addrspace(1)* %0, i64 %20
  %22 = getelementptr inbounds float, float addrspace(1)* %1, i64 %20
  %23 = load float, float addrspace(1)* %22, align 4, !tbaa !5
  %24 = fcmp ogt float %23, 0.000000e+00
  %25 = select i1 %24, float %23, float 0.000000e+00
  store float %25, float addrspace(1)* %21, align 4, !tbaa !9
  br label %if_end.1

if_end.1:                                         ; preds = %if_then.1, %if_end
  %26 = shl i32 %6, 16
  %27 = add i32 %26, 131072
  %28 = add i32 %5, %27
  %29 = icmp slt i32 %28, 18966528
  %30 = sext i32 %28 to i64
  br i1 %29, label %if_then.2, label %if_end.2, !prof !4

if_then.2:                                        ; preds = %if_end.1
  %31 = getelementptr inbounds float, float addrspace(1)* %0, i64 %30
  %32 = getelementptr inbounds float, float addrspace(1)* %1, i64 %30
  %33 = load float, float addrspace(1)* %32, align 4, !tbaa !5
  %34 = fcmp ogt float %33, 0.000000e+00
  %35 = select i1 %34, float %33, float 0.000000e+00
  store float %35, float addrspace(1)* %31, align 4, !tbaa !9
  br label %if_end.2

if_end.2:                                         ; preds = %if_then.2, %if_end.1
  %36 = shl i32 %6, 16
  %37 = add i32 %36, 196608
  %38 = add i32 %5, %37
  %39 = icmp slt i32 %38, 18966528
  %40 = sext i32 %38 to i64
  br i1 %39, label %if_then.3, label %if_end.3, !prof !4

if_then.3:                                        ; preds = %if_end.2
  %41 = getelementptr inbounds float, float addrspace(1)* %0, i64 %40
  %42 = getelementptr inbounds float, float addrspace(1)* %1, i64 %40
  %43 = load float, float addrspace(1)* %42, align 4, !tbaa !5
  %44 = fcmp ogt float %43, 0.000000e+00
  %45 = select i1 %44, float %43, float 0.000000e+00
  store float %45, float addrspace(1)* %41, align 4, !tbaa !9
  br label %if_end.3

if_end.3:                                         ; preds = %if_then.3, %if_end.2
  %46 = shl i32 %6, 16
  %47 = add i32 %46, 262144
  %48 = add i32 %5, %47
  %49 = icmp slt i32 %48, 18966528
  %50 = sext i32 %48 to i64
  br i1 %49, label %if_then.4, label %if_end.4, !prof !4

if_then.4:                                        ; preds = %if_end.3
  %51 = getelementptr inbounds float, float addrspace(1)* %0, i64 %50
  %52 = getelementptr inbounds float, float addrspace(1)* %1, i64 %50
  %53 = load float, float addrspace(1)* %52, align 4, !tbaa !5
  %54 = fcmp ogt float %53, 0.000000e+00
  %55 = select i1 %54, float %53, float 0.000000e+00
  store float %55, float addrspace(1)* %51, align 4, !tbaa !9
  br label %if_end.4

if_end.4:                                         ; preds = %if_then.4, %if_end.3
  %56 = shl i32 %6, 16
  %57 = add i32 %56, 327680
  %58 = add i32 %5, %57
  %59 = icmp slt i32 %58, 18966528
  %60 = sext i32 %58 to i64
  br i1 %59, label %if_then.5, label %if_end.5, !prof !4

if_then.5:                                        ; preds = %if_end.4
  %61 = getelementptr inbounds float, float addrspace(1)* %0, i64 %60
  %62 = getelementptr inbounds float, float addrspace(1)* %1, i64 %60
  %63 = load float, float addrspace(1)* %62, align 4, !tbaa !5
  %64 = fcmp ogt float %63, 0.000000e+00
  %65 = select i1 %64, float %63, float 0.000000e+00
  store float %65, float addrspace(1)* %61, align 4, !tbaa !9
  br label %if_end.5

if_end.5:                                         ; preds = %if_then.5, %if_end.4
  %66 = shl i32 %6, 16
  %67 = add i32 %66, 393216
  %68 = add i32 %5, %67
  %69 = icmp slt i32 %68, 18966528
  %70 = sext i32 %68 to i64
  br i1 %69, label %if_then.6, label %if_end.6, !prof !4

if_then.6:                                        ; preds = %if_end.5
  %71 = getelementptr inbounds float, float addrspace(1)* %0, i64 %70
  %72 = getelementptr inbounds float, float addrspace(1)* %1, i64 %70
  %73 = load float, float addrspace(1)* %72, align 4, !tbaa !5
  %74 = fcmp ogt float %73, 0.000000e+00
  %75 = select i1 %74, float %73, float 0.000000e+00
  store float %75, float addrspace(1)* %71, align 4, !tbaa !9
  br label %if_end.6

if_end.6:                                         ; preds = %if_then.6, %if_end.5
  %76 = shl i32 %6, 16
  %77 = add i32 %76, 458752
  %78 = add i32 %5, %77
  %79 = icmp slt i32 %78, 18966528
  %80 = sext i32 %78 to i64
  br i1 %79, label %if_then.7, label %if_end.7, !prof !4

if_then.7:                                        ; preds = %if_end.6
  %81 = getelementptr inbounds float, float addrspace(1)* %0, i64 %80
  %82 = getelementptr inbounds float, float addrspace(1)* %1, i64 %80
  %83 = load float, float addrspace(1)* %82, align 4, !tbaa !5
  %84 = fcmp ogt float %83, 0.000000e+00
  %85 = select i1 %84, float %83, float 0.000000e+00
  store float %85, float addrspace(1)* %81, align 4, !tbaa !9
  br label %if_end.7

if_end.7:                                         ; preds = %if_then.7, %if_end.6
  %86 = shl i32 %6, 16
  %87 = add i32 %86, 524288
  %88 = add i32 %5, %87
  %89 = icmp slt i32 %88, 18966528
  %90 = sext i32 %88 to i64
  br i1 %89, label %if_then.8, label %if_end.8, !prof !4

if_then.8:                                        ; preds = %if_end.7
  %91 = getelementptr inbounds float, float addrspace(1)* %0, i64 %90
  %92 = getelementptr inbounds float, float addrspace(1)* %1, i64 %90
  %93 = load float, float addrspace(1)* %92, align 4, !tbaa !5
  %94 = fcmp ogt float %93, 0.000000e+00
  %95 = select i1 %94, float %93, float 0.000000e+00
  store float %95, float addrspace(1)* %91, align 4, !tbaa !9
  br label %if_end.8

if_end.8:                                         ; preds = %if_then.8, %if_end.7
  %96 = shl i32 %6, 16
  %97 = add i32 %96, 589824
  %98 = add i32 %5, %97
  %99 = icmp slt i32 %98, 18966528
  %100 = sext i32 %98 to i64
  br i1 %99, label %if_then.9, label %if_end.9, !prof !4

if_then.9:                                        ; preds = %if_end.8
  %101 = getelementptr inbounds float, float addrspace(1)* %0, i64 %100
  %102 = getelementptr inbounds float, float addrspace(1)* %1, i64 %100
  %103 = load float, float addrspace(1)* %102, align 4, !tbaa !5
  %104 = fcmp ogt float %103, 0.000000e+00
  %105 = select i1 %104, float %103, float 0.000000e+00
  store float %105, float addrspace(1)* %101, align 4, !tbaa !9
  br label %if_end.9

if_end.9:                                         ; preds = %if_then.9, %if_end.8
  %106 = add nuw nsw i32 %6, 10
  %exitcond.9 = icmp eq i32 %106, 290
  br i1 %exitcond.9, label %for_end, label %for_body, !prof !12
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workgroup.id.x() #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workitem.id.x() #1

attributes #0 = { nofree nounwind "amdgpu-flat-work-group-size"="1,1024" "no-nans-fp-math"="true" }
attributes #1 = { nounwind readnone speculatable }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 12.0.0 (/src/external/llvm-project/clang 1100ebe275a9dcc79a9abbda902b6f10738f2f5d)"}
!4 = !{!"branch_weights", i32 1048576, i32 1}
!5 = !{!6, !6, i64 0}
!6 = !{!"float", !7, i64 0}
!7 = !{!"0x3455d10", !8, i64 0}
!8 = !{!"tvm-tbaa"}
!9 = !{!10, !10, i64 0}
!10 = !{!"float", !11, i64 0}
!11 = !{!"0x3457700", !8, i64 0}
!12 = !{!"branch_weights", i32 1, i32 1048576}

relu (128, 4032, 11, 11)
Time cost of this operator: 0.0007283594
Lowered TIR:
@main = primfn(input0_1: handle, compute_1: handle) -> ()
  attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
  buffers = {compute: Buffer(compute_2: Pointer(float32), float32, [128, 4032, 11, 11], []),
             input0: Buffer(input0_2: Pointer(float32), float32, [128, 4032, 11, 11], [])}
  buffer_map = {input0_1: input0, compute_1: compute} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 256;
  for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 953) {
    if @tir.likely(((((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x) < 62447616), dtype=bool) {
      compute_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)] = max((float32*)input0_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)], 0f32)
    }
  }
}


; ModuleID = 'TVMAMDGPUModule'
source_filename = "TVMAMDGPUModule"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-ni:7"
target triple = "amdgcn-amd-amdhsa-hcc"

; Function Attrs: nofree nounwind
define dllexport amdgpu_kernel void @default_function_kernel0(float addrspace(1)* noalias nocapture %0, float addrspace(1)* noalias nocapture readonly %1) local_unnamed_addr #0 {
entry:
  %2 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %3 = tail call i32 @llvm.amdgcn.workitem.id.x()
  %4 = shl i32 %2, 8
  %5 = add i32 %4, %3
  br label %for_body

for_body:                                         ; preds = %if_end.7, %entry
  %6 = phi i32 [ 0, %entry ], [ %86, %if_end.7 ]
  %7 = shl nuw nsw i32 %6, 16
  %8 = add i32 %5, %7
  %9 = icmp slt i32 %8, 62447616
  %10 = sext i32 %8 to i64
  br i1 %9, label %if_then, label %if_end, !prof !4

for_end:                                          ; preds = %if_end
  ret void

if_then:                                          ; preds = %for_body
  %11 = getelementptr inbounds float, float addrspace(1)* %0, i64 %10
  %12 = getelementptr inbounds float, float addrspace(1)* %1, i64 %10
  %13 = load float, float addrspace(1)* %12, align 4, !tbaa !5
  %14 = fcmp ogt float %13, 0.000000e+00
  %15 = select i1 %14, float %13, float 0.000000e+00
  store float %15, float addrspace(1)* %11, align 4, !tbaa !9
  br label %if_end

if_end:                                           ; preds = %if_then, %for_body
  %16 = or i32 %6, 1
  %exitcond = icmp eq i32 %16, 953
  br i1 %exitcond, label %for_end, label %for_body.1, !prof !12

for_body.1:                                       ; preds = %if_end
  %17 = shl nuw nsw i32 %16, 16
  %18 = add i32 %5, %17
  %19 = icmp slt i32 %18, 62447616
  %20 = sext i32 %18 to i64
  br i1 %19, label %if_then.1, label %if_end.1, !prof !4

if_then.1:                                        ; preds = %for_body.1
  %21 = getelementptr inbounds float, float addrspace(1)* %0, i64 %20
  %22 = getelementptr inbounds float, float addrspace(1)* %1, i64 %20
  %23 = load float, float addrspace(1)* %22, align 4, !tbaa !5
  %24 = fcmp ogt float %23, 0.000000e+00
  %25 = select i1 %24, float %23, float 0.000000e+00
  store float %25, float addrspace(1)* %21, align 4, !tbaa !9
  br label %if_end.1

if_end.1:                                         ; preds = %if_then.1, %for_body.1
  %26 = shl i32 %6, 16
  %27 = or i32 %26, 131072
  %28 = add i32 %5, %27
  %29 = icmp slt i32 %28, 62447616
  %30 = sext i32 %28 to i64
  br i1 %29, label %if_then.2, label %if_end.2, !prof !4

if_then.2:                                        ; preds = %if_end.1
  %31 = getelementptr inbounds float, float addrspace(1)* %0, i64 %30
  %32 = getelementptr inbounds float, float addrspace(1)* %1, i64 %30
  %33 = load float, float addrspace(1)* %32, align 4, !tbaa !5
  %34 = fcmp ogt float %33, 0.000000e+00
  %35 = select i1 %34, float %33, float 0.000000e+00
  store float %35, float addrspace(1)* %31, align 4, !tbaa !9
  br label %if_end.2

if_end.2:                                         ; preds = %if_then.2, %if_end.1
  %36 = shl i32 %6, 16
  %37 = or i32 %36, 196608
  %38 = add i32 %5, %37
  %39 = icmp slt i32 %38, 62447616
  %40 = sext i32 %38 to i64
  br i1 %39, label %if_then.3, label %if_end.3, !prof !4

if_then.3:                                        ; preds = %if_end.2
  %41 = getelementptr inbounds float, float addrspace(1)* %0, i64 %40
  %42 = getelementptr inbounds float, float addrspace(1)* %1, i64 %40
  %43 = load float, float addrspace(1)* %42, align 4, !tbaa !5
  %44 = fcmp ogt float %43, 0.000000e+00
  %45 = select i1 %44, float %43, float 0.000000e+00
  store float %45, float addrspace(1)* %41, align 4, !tbaa !9
  br label %if_end.3

if_end.3:                                         ; preds = %if_then.3, %if_end.2
  %46 = shl i32 %6, 16
  %47 = or i32 %46, 262144
  %48 = add i32 %5, %47
  %49 = icmp slt i32 %48, 62447616
  %50 = sext i32 %48 to i64
  br i1 %49, label %if_then.4, label %if_end.4, !prof !4

if_then.4:                                        ; preds = %if_end.3
  %51 = getelementptr inbounds float, float addrspace(1)* %0, i64 %50
  %52 = getelementptr inbounds float, float addrspace(1)* %1, i64 %50
  %53 = load float, float addrspace(1)* %52, align 4, !tbaa !5
  %54 = fcmp ogt float %53, 0.000000e+00
  %55 = select i1 %54, float %53, float 0.000000e+00
  store float %55, float addrspace(1)* %51, align 4, !tbaa !9
  br label %if_end.4

if_end.4:                                         ; preds = %if_then.4, %if_end.3
  %56 = shl i32 %6, 16
  %57 = or i32 %56, 327680
  %58 = add i32 %5, %57
  %59 = icmp slt i32 %58, 62447616
  %60 = sext i32 %58 to i64
  br i1 %59, label %if_then.5, label %if_end.5, !prof !4

if_then.5:                                        ; preds = %if_end.4
  %61 = getelementptr inbounds float, float addrspace(1)* %0, i64 %60
  %62 = getelementptr inbounds float, float addrspace(1)* %1, i64 %60
  %63 = load float, float addrspace(1)* %62, align 4, !tbaa !5
  %64 = fcmp ogt float %63, 0.000000e+00
  %65 = select i1 %64, float %63, float 0.000000e+00
  store float %65, float addrspace(1)* %61, align 4, !tbaa !9
  br label %if_end.5

if_end.5:                                         ; preds = %if_then.5, %if_end.4
  %66 = shl i32 %6, 16
  %67 = or i32 %66, 393216
  %68 = add i32 %5, %67
  %69 = icmp slt i32 %68, 62447616
  %70 = sext i32 %68 to i64
  br i1 %69, label %if_then.6, label %if_end.6, !prof !4

if_then.6:                                        ; preds = %if_end.5
  %71 = getelementptr inbounds float, float addrspace(1)* %0, i64 %70
  %72 = getelementptr inbounds float, float addrspace(1)* %1, i64 %70
  %73 = load float, float addrspace(1)* %72, align 4, !tbaa !5
  %74 = fcmp ogt float %73, 0.000000e+00
  %75 = select i1 %74, float %73, float 0.000000e+00
  store float %75, float addrspace(1)* %71, align 4, !tbaa !9
  br label %if_end.6

if_end.6:                                         ; preds = %if_then.6, %if_end.5
  %76 = shl i32 %6, 16
  %77 = or i32 %76, 458752
  %78 = add i32 %5, %77
  %79 = icmp slt i32 %78, 62447616
  %80 = sext i32 %78 to i64
  br i1 %79, label %if_then.7, label %if_end.7, !prof !4

if_then.7:                                        ; preds = %if_end.6
  %81 = getelementptr inbounds float, float addrspace(1)* %0, i64 %80
  %82 = getelementptr inbounds float, float addrspace(1)* %1, i64 %80
  %83 = load float, float addrspace(1)* %82, align 4, !tbaa !5
  %84 = fcmp ogt float %83, 0.000000e+00
  %85 = select i1 %84, float %83, float 0.000000e+00
  store float %85, float addrspace(1)* %81, align 4, !tbaa !9
  br label %if_end.7

if_end.7:                                         ; preds = %if_then.7, %if_end.6
  %86 = add nuw nsw i32 %6, 8
  br label %for_body
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workgroup.id.x() #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workitem.id.x() #1

attributes #0 = { nofree nounwind "amdgpu-flat-work-group-size"="1,1024" "no-nans-fp-math"="true" }
attributes #1 = { nounwind readnone speculatable }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 12.0.0 (/src/external/llvm-project/clang 1100ebe275a9dcc79a9abbda902b6f10738f2f5d)"}
!4 = !{!"branch_weights", i32 1048576, i32 1}
!5 = !{!6, !6, i64 0}
!6 = !{!"float", !7, i64 0}
!7 = !{!"0x32b6d10", !8, i64 0}
!8 = !{!"tvm-tbaa"}
!9 = !{!10, !10, i64 0}
!10 = !{!"float", !11, i64 0}
!11 = !{!"0x32b8700", !8, i64 0}
!12 = !{!"branch_weights", i32 1, i32 1048576}

relu (128, 512, 7, 7)
Time cost of this operator: 0.0000395916
Lowered TIR:
@main = primfn(input0_1: handle, compute_1: handle) -> ()
  attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
  buffers = {compute: Buffer(compute_2: Pointer(float32), float32, [128, 512, 7, 7], []),
             input0: Buffer(input0_2: Pointer(float32), float32, [128, 512, 7, 7], [])}
  buffer_map = {input0_1: input0, compute_1: compute} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 256;
  for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 49) {
    compute_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)] = max((float32*)input0_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)], 0f32)
  }
}


; ModuleID = 'TVMAMDGPUModule'
source_filename = "TVMAMDGPUModule"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-ni:7"
target triple = "amdgcn-amd-amdhsa-hcc"

; Function Attrs: nofree nounwind
define dllexport amdgpu_kernel void @default_function_kernel0(float addrspace(1)* noalias nocapture %0, float addrspace(1)* noalias nocapture readonly %1) local_unnamed_addr #0 {
entry:
  %2 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %3 = tail call i32 @llvm.amdgcn.workitem.id.x()
  %4 = shl i32 %2, 8
  %5 = add i32 %4, %3
  br label %for_body

for_body:                                         ; preds = %for_body, %entry
  %6 = phi i32 [ 0, %entry ], [ %69, %for_body ]
  %7 = shl nuw nsw i32 %6, 16
  %8 = add i32 %5, %7
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds float, float addrspace(1)* %1, i64 %9
  %11 = load float, float addrspace(1)* %10, align 4, !tbaa !4
  %12 = fcmp ogt float %11, 0.000000e+00
  %13 = select i1 %12, float %11, float 0.000000e+00
  %14 = getelementptr inbounds float, float addrspace(1)* %0, i64 %9
  store float %13, float addrspace(1)* %14, align 4, !tbaa !8
  %15 = shl i32 %6, 16
  %16 = add i32 %15, 65536
  %17 = add i32 %5, %16
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds float, float addrspace(1)* %1, i64 %18
  %20 = load float, float addrspace(1)* %19, align 4, !tbaa !4
  %21 = fcmp ogt float %20, 0.000000e+00
  %22 = select i1 %21, float %20, float 0.000000e+00
  %23 = getelementptr inbounds float, float addrspace(1)* %0, i64 %18
  store float %22, float addrspace(1)* %23, align 4, !tbaa !8
  %24 = shl i32 %6, 16
  %25 = add i32 %24, 131072
  %26 = add i32 %5, %25
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds float, float addrspace(1)* %1, i64 %27
  %29 = load float, float addrspace(1)* %28, align 4, !tbaa !4
  %30 = fcmp ogt float %29, 0.000000e+00
  %31 = select i1 %30, float %29, float 0.000000e+00
  %32 = getelementptr inbounds float, float addrspace(1)* %0, i64 %27
  store float %31, float addrspace(1)* %32, align 4, !tbaa !8
  %33 = shl i32 %6, 16
  %34 = add i32 %33, 196608
  %35 = add i32 %5, %34
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds float, float addrspace(1)* %1, i64 %36
  %38 = load float, float addrspace(1)* %37, align 4, !tbaa !4
  %39 = fcmp ogt float %38, 0.000000e+00
  %40 = select i1 %39, float %38, float 0.000000e+00
  %41 = getelementptr inbounds float, float addrspace(1)* %0, i64 %36
  store float %40, float addrspace(1)* %41, align 4, !tbaa !8
  %42 = shl i32 %6, 16
  %43 = add i32 %42, 262144
  %44 = add i32 %5, %43
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds float, float addrspace(1)* %1, i64 %45
  %47 = load float, float addrspace(1)* %46, align 4, !tbaa !4
  %48 = fcmp ogt float %47, 0.000000e+00
  %49 = select i1 %48, float %47, float 0.000000e+00
  %50 = getelementptr inbounds float, float addrspace(1)* %0, i64 %45
  store float %49, float addrspace(1)* %50, align 4, !tbaa !8
  %51 = shl i32 %6, 16
  %52 = add i32 %51, 327680
  %53 = add i32 %5, %52
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds float, float addrspace(1)* %1, i64 %54
  %56 = load float, float addrspace(1)* %55, align 4, !tbaa !4
  %57 = fcmp ogt float %56, 0.000000e+00
  %58 = select i1 %57, float %56, float 0.000000e+00
  %59 = getelementptr inbounds float, float addrspace(1)* %0, i64 %54
  store float %58, float addrspace(1)* %59, align 4, !tbaa !8
  %60 = shl i32 %6, 16
  %61 = add i32 %60, 393216
  %62 = add i32 %5, %61
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds float, float addrspace(1)* %1, i64 %63
  %65 = load float, float addrspace(1)* %64, align 4, !tbaa !4
  %66 = fcmp ogt float %65, 0.000000e+00
  %67 = select i1 %66, float %65, float 0.000000e+00
  %68 = getelementptr inbounds float, float addrspace(1)* %0, i64 %63
  store float %67, float addrspace(1)* %68, align 4, !tbaa !8
  %69 = add nuw nsw i32 %6, 7
  %exitcond.6 = icmp eq i32 %69, 49
  br i1 %exitcond.6, label %for_end, label %for_body, !prof !11

for_end:                                          ; preds = %for_body
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workgroup.id.x() #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workitem.id.x() #1

attributes #0 = { nofree nounwind "amdgpu-flat-work-group-size"="1,1024" "no-nans-fp-math"="true" }
attributes #1 = { nounwind readnone speculatable }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 12.0.0 (/src/external/llvm-project/clang 1100ebe275a9dcc79a9abbda902b6f10738f2f5d)"}
!4 = !{!5, !5, i64 0}
!5 = !{!"float", !6, i64 0}
!6 = !{!"0x1b29c90", !7, i64 0}
!7 = !{!"tvm-tbaa"}
!8 = !{!9, !9, i64 0}
!9 = !{!"float", !10, i64 0}
!10 = !{!"0x1b29d30", !7, i64 0}
!11 = !{!"branch_weights", i32 1, i32 1048576}

relu (128, 2048, 7, 7)
Time cost of this operator: 0.0001459233
Lowered TIR:
@main = primfn(input0_1: handle, compute_1: handle) -> ()
  attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
  buffers = {compute: Buffer(compute_2: Pointer(float32), float32, [128, 2048, 7, 7], []),
             input0: Buffer(input0_2: Pointer(float32), float32, [128, 2048, 7, 7], [])}
  buffer_map = {input0_1: input0, compute_1: compute} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 256;
  for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 196) {
    compute_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)] = max((float32*)input0_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)], 0f32)
  }
}


; ModuleID = 'TVMAMDGPUModule'
source_filename = "TVMAMDGPUModule"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-ni:7"
target triple = "amdgcn-amd-amdhsa-hcc"

; Function Attrs: nofree nounwind
define dllexport amdgpu_kernel void @default_function_kernel0(float addrspace(1)* noalias nocapture %0, float addrspace(1)* noalias nocapture readonly %1) local_unnamed_addr #0 {
entry:
  %2 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %3 = tail call i32 @llvm.amdgcn.workitem.id.x()
  %4 = shl i32 %2, 8
  %5 = add i32 %4, %3
  br label %for_body

for_body:                                         ; preds = %for_body, %entry
  %6 = phi i32 [ 0, %entry ], [ %132, %for_body ]
  %7 = shl nuw nsw i32 %6, 16
  %8 = add i32 %5, %7
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds float, float addrspace(1)* %1, i64 %9
  %11 = load float, float addrspace(1)* %10, align 4, !tbaa !4
  %12 = fcmp ogt float %11, 0.000000e+00
  %13 = select i1 %12, float %11, float 0.000000e+00
  %14 = getelementptr inbounds float, float addrspace(1)* %0, i64 %9
  store float %13, float addrspace(1)* %14, align 4, !tbaa !8
  %15 = shl i32 %6, 16
  %16 = or i32 %15, 65536
  %17 = add i32 %5, %16
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds float, float addrspace(1)* %1, i64 %18
  %20 = load float, float addrspace(1)* %19, align 4, !tbaa !4
  %21 = fcmp ogt float %20, 0.000000e+00
  %22 = select i1 %21, float %20, float 0.000000e+00
  %23 = getelementptr inbounds float, float addrspace(1)* %0, i64 %18
  store float %22, float addrspace(1)* %23, align 4, !tbaa !8
  %24 = shl i32 %6, 16
  %25 = add i32 %24, 131072
  %26 = add i32 %5, %25
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds float, float addrspace(1)* %1, i64 %27
  %29 = load float, float addrspace(1)* %28, align 4, !tbaa !4
  %30 = fcmp ogt float %29, 0.000000e+00
  %31 = select i1 %30, float %29, float 0.000000e+00
  %32 = getelementptr inbounds float, float addrspace(1)* %0, i64 %27
  store float %31, float addrspace(1)* %32, align 4, !tbaa !8
  %33 = shl i32 %6, 16
  %34 = add i32 %33, 196608
  %35 = add i32 %5, %34
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds float, float addrspace(1)* %1, i64 %36
  %38 = load float, float addrspace(1)* %37, align 4, !tbaa !4
  %39 = fcmp ogt float %38, 0.000000e+00
  %40 = select i1 %39, float %38, float 0.000000e+00
  %41 = getelementptr inbounds float, float addrspace(1)* %0, i64 %36
  store float %40, float addrspace(1)* %41, align 4, !tbaa !8
  %42 = shl i32 %6, 16
  %43 = add i32 %42, 262144
  %44 = add i32 %5, %43
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds float, float addrspace(1)* %1, i64 %45
  %47 = load float, float addrspace(1)* %46, align 4, !tbaa !4
  %48 = fcmp ogt float %47, 0.000000e+00
  %49 = select i1 %48, float %47, float 0.000000e+00
  %50 = getelementptr inbounds float, float addrspace(1)* %0, i64 %45
  store float %49, float addrspace(1)* %50, align 4, !tbaa !8
  %51 = shl i32 %6, 16
  %52 = add i32 %51, 327680
  %53 = add i32 %5, %52
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds float, float addrspace(1)* %1, i64 %54
  %56 = load float, float addrspace(1)* %55, align 4, !tbaa !4
  %57 = fcmp ogt float %56, 0.000000e+00
  %58 = select i1 %57, float %56, float 0.000000e+00
  %59 = getelementptr inbounds float, float addrspace(1)* %0, i64 %54
  store float %58, float addrspace(1)* %59, align 4, !tbaa !8
  %60 = shl i32 %6, 16
  %61 = add i32 %60, 393216
  %62 = add i32 %5, %61
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds float, float addrspace(1)* %1, i64 %63
  %65 = load float, float addrspace(1)* %64, align 4, !tbaa !4
  %66 = fcmp ogt float %65, 0.000000e+00
  %67 = select i1 %66, float %65, float 0.000000e+00
  %68 = getelementptr inbounds float, float addrspace(1)* %0, i64 %63
  store float %67, float addrspace(1)* %68, align 4, !tbaa !8
  %69 = shl i32 %6, 16
  %70 = add i32 %69, 458752
  %71 = add i32 %5, %70
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds float, float addrspace(1)* %1, i64 %72
  %74 = load float, float addrspace(1)* %73, align 4, !tbaa !4
  %75 = fcmp ogt float %74, 0.000000e+00
  %76 = select i1 %75, float %74, float 0.000000e+00
  %77 = getelementptr inbounds float, float addrspace(1)* %0, i64 %72
  store float %76, float addrspace(1)* %77, align 4, !tbaa !8
  %78 = shl i32 %6, 16
  %79 = add i32 %78, 524288
  %80 = add i32 %5, %79
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds float, float addrspace(1)* %1, i64 %81
  %83 = load float, float addrspace(1)* %82, align 4, !tbaa !4
  %84 = fcmp ogt float %83, 0.000000e+00
  %85 = select i1 %84, float %83, float 0.000000e+00
  %86 = getelementptr inbounds float, float addrspace(1)* %0, i64 %81
  store float %85, float addrspace(1)* %86, align 4, !tbaa !8
  %87 = shl i32 %6, 16
  %88 = add i32 %87, 589824
  %89 = add i32 %5, %88
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds float, float addrspace(1)* %1, i64 %90
  %92 = load float, float addrspace(1)* %91, align 4, !tbaa !4
  %93 = fcmp ogt float %92, 0.000000e+00
  %94 = select i1 %93, float %92, float 0.000000e+00
  %95 = getelementptr inbounds float, float addrspace(1)* %0, i64 %90
  store float %94, float addrspace(1)* %95, align 4, !tbaa !8
  %96 = shl i32 %6, 16
  %97 = add i32 %96, 655360
  %98 = add i32 %5, %97
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds float, float addrspace(1)* %1, i64 %99
  %101 = load float, float addrspace(1)* %100, align 4, !tbaa !4
  %102 = fcmp ogt float %101, 0.000000e+00
  %103 = select i1 %102, float %101, float 0.000000e+00
  %104 = getelementptr inbounds float, float addrspace(1)* %0, i64 %99
  store float %103, float addrspace(1)* %104, align 4, !tbaa !8
  %105 = shl i32 %6, 16
  %106 = add i32 %105, 720896
  %107 = add i32 %5, %106
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds float, float addrspace(1)* %1, i64 %108
  %110 = load float, float addrspace(1)* %109, align 4, !tbaa !4
  %111 = fcmp ogt float %110, 0.000000e+00
  %112 = select i1 %111, float %110, float 0.000000e+00
  %113 = getelementptr inbounds float, float addrspace(1)* %0, i64 %108
  store float %112, float addrspace(1)* %113, align 4, !tbaa !8
  %114 = shl i32 %6, 16
  %115 = add i32 %114, 786432
  %116 = add i32 %5, %115
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds float, float addrspace(1)* %1, i64 %117
  %119 = load float, float addrspace(1)* %118, align 4, !tbaa !4
  %120 = fcmp ogt float %119, 0.000000e+00
  %121 = select i1 %120, float %119, float 0.000000e+00
  %122 = getelementptr inbounds float, float addrspace(1)* %0, i64 %117
  store float %121, float addrspace(1)* %122, align 4, !tbaa !8
  %123 = shl i32 %6, 16
  %124 = add i32 %123, 851968
  %125 = add i32 %5, %124
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds float, float addrspace(1)* %1, i64 %126
  %128 = load float, float addrspace(1)* %127, align 4, !tbaa !4
  %129 = fcmp ogt float %128, 0.000000e+00
  %130 = select i1 %129, float %128, float 0.000000e+00
  %131 = getelementptr inbounds float, float addrspace(1)* %0, i64 %126
  store float %130, float addrspace(1)* %131, align 4, !tbaa !8
  %132 = add nuw nsw i32 %6, 14
  %exitcond.13 = icmp eq i32 %132, 196
  br i1 %exitcond.13, label %for_end, label %for_body, !prof !11

for_end:                                          ; preds = %for_body
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workgroup.id.x() #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workitem.id.x() #1

attributes #0 = { nofree nounwind "amdgpu-flat-work-group-size"="1,1024" "no-nans-fp-math"="true" }
attributes #1 = { nounwind readnone speculatable }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 12.0.0 (/src/external/llvm-project/clang 1100ebe275a9dcc79a9abbda902b6f10738f2f5d)"}
!4 = !{!5, !5, i64 0}
!5 = !{!"float", !6, i64 0}
!6 = !{!"0x349fc50", !7, i64 0}
!7 = !{!"tvm-tbaa"}
!8 = !{!9, !9, i64 0}
!9 = !{!"float", !10, i64 0}
!10 = !{!"0x349fd30", !7, i64 0}
!11 = !{!"branch_weights", i32 1, i32 1048576}

relu (128, 84, 83, 83)
Time cost of this operator: 0.0008675970
Lowered TIR:
@main = primfn(input0_1: handle, compute_1: handle) -> ()
  attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
  buffers = {compute: Buffer(compute_2: Pointer(float32), float32, [128, 84, 83, 83], []),
             input0: Buffer(input0_2: Pointer(float32), float32, [128, 84, 83, 83], [])}
  buffer_map = {input0_1: input0, compute_1: compute} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 256;
  for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 1131) {
    if @tir.likely(((((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x) < 74070528), dtype=bool) {
      compute_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)] = max((float32*)input0_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)], 0f32)
    }
  }
}


; ModuleID = 'TVMAMDGPUModule'
source_filename = "TVMAMDGPUModule"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-ni:7"
target triple = "amdgcn-amd-amdhsa-hcc"

; Function Attrs: nofree nounwind
define dllexport amdgpu_kernel void @default_function_kernel0(float addrspace(1)* noalias nocapture %0, float addrspace(1)* noalias nocapture readonly %1) local_unnamed_addr #0 {
entry:
  %2 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %3 = tail call i32 @llvm.amdgcn.workitem.id.x()
  %4 = shl i32 %2, 8
  %5 = add i32 %4, %3
  br label %for_body

for_body:                                         ; preds = %if_end.2, %entry
  %6 = phi i32 [ 0, %entry ], [ %36, %if_end.2 ]
  %7 = shl nuw nsw i32 %6, 16
  %8 = add i32 %5, %7
  %9 = icmp slt i32 %8, 74070528
  %10 = sext i32 %8 to i64
  br i1 %9, label %if_then, label %if_end, !prof !4

for_end:                                          ; preds = %if_end.2
  ret void

if_then:                                          ; preds = %for_body
  %11 = getelementptr inbounds float, float addrspace(1)* %0, i64 %10
  %12 = getelementptr inbounds float, float addrspace(1)* %1, i64 %10
  %13 = load float, float addrspace(1)* %12, align 4, !tbaa !5
  %14 = fcmp ogt float %13, 0.000000e+00
  %15 = select i1 %14, float %13, float 0.000000e+00
  store float %15, float addrspace(1)* %11, align 4, !tbaa !9
  br label %if_end

if_end:                                           ; preds = %if_then, %for_body
  %16 = shl i32 %6, 16
  %17 = add i32 %16, 65536
  %18 = add i32 %5, %17
  %19 = icmp slt i32 %18, 74070528
  %20 = sext i32 %18 to i64
  br i1 %19, label %if_then.1, label %if_end.1, !prof !4

if_then.1:                                        ; preds = %if_end
  %21 = getelementptr inbounds float, float addrspace(1)* %0, i64 %20
  %22 = getelementptr inbounds float, float addrspace(1)* %1, i64 %20
  %23 = load float, float addrspace(1)* %22, align 4, !tbaa !5
  %24 = fcmp ogt float %23, 0.000000e+00
  %25 = select i1 %24, float %23, float 0.000000e+00
  store float %25, float addrspace(1)* %21, align 4, !tbaa !9
  br label %if_end.1

if_end.1:                                         ; preds = %if_then.1, %if_end
  %26 = shl i32 %6, 16
  %27 = add i32 %26, 131072
  %28 = add i32 %5, %27
  %29 = icmp slt i32 %28, 74070528
  %30 = sext i32 %28 to i64
  br i1 %29, label %if_then.2, label %if_end.2, !prof !4

if_then.2:                                        ; preds = %if_end.1
  %31 = getelementptr inbounds float, float addrspace(1)* %0, i64 %30
  %32 = getelementptr inbounds float, float addrspace(1)* %1, i64 %30
  %33 = load float, float addrspace(1)* %32, align 4, !tbaa !5
  %34 = fcmp ogt float %33, 0.000000e+00
  %35 = select i1 %34, float %33, float 0.000000e+00
  store float %35, float addrspace(1)* %31, align 4, !tbaa !9
  br label %if_end.2

if_end.2:                                         ; preds = %if_then.2, %if_end.1
  %36 = add nuw nsw i32 %6, 3
  %exitcond.2 = icmp eq i32 %36, 1131
  br i1 %exitcond.2, label %for_end, label %for_body, !prof !12
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workgroup.id.x() #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workitem.id.x() #1

attributes #0 = { nofree nounwind "amdgpu-flat-work-group-size"="1,1024" "no-nans-fp-math"="true" }
attributes #1 = { nounwind readnone speculatable }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 12.0.0 (/src/external/llvm-project/clang 1100ebe275a9dcc79a9abbda902b6f10738f2f5d)"}
!4 = !{!"branch_weights", i32 1048576, i32 1}
!5 = !{!6, !6, i64 0}
!6 = !{!"float", !7, i64 0}
!7 = !{!"0x2b4a930", !8, i64 0}
!8 = !{!"tvm-tbaa"}
!9 = !{!10, !10, i64 0}
!10 = !{!"float", !11, i64 0}
!11 = !{!"0x2b4c700", !8, i64 0}
!12 = !{!"branch_weights", i32 1, i32 1048576}

relu (128, 336, 42, 42)
Time cost of this operator: 0.0008844570
Lowered TIR:
@main = primfn(input0_1: handle, compute_1: handle) -> ()
  attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
  buffers = {compute: Buffer(compute_2: Pointer(float32), float32, [128, 336, 42, 42], []),
             input0: Buffer(input0_2: Pointer(float32), float32, [128, 336, 42, 42], [])}
  buffer_map = {input0_1: input0, compute_1: compute} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 256;
  for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 1158) {
    if @tir.likely(((((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x) < 75866112), dtype=bool) {
      compute_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)] = max((float32*)input0_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)], 0f32)
    }
  }
}


; ModuleID = 'TVMAMDGPUModule'
source_filename = "TVMAMDGPUModule"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-ni:7"
target triple = "amdgcn-amd-amdhsa-hcc"

; Function Attrs: nofree nounwind
define dllexport amdgpu_kernel void @default_function_kernel0(float addrspace(1)* noalias nocapture %0, float addrspace(1)* noalias nocapture readonly %1) local_unnamed_addr #0 {
entry:
  %2 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %3 = tail call i32 @llvm.amdgcn.workitem.id.x()
  %4 = shl i32 %2, 8
  %5 = add i32 %4, %3
  br label %for_body

for_body:                                         ; preds = %if_end.5, %entry
  %6 = phi i32 [ 0, %entry ], [ %66, %if_end.5 ]
  %7 = shl nuw nsw i32 %6, 16
  %8 = add i32 %5, %7
  %9 = icmp slt i32 %8, 75866112
  %10 = sext i32 %8 to i64
  br i1 %9, label %if_then, label %if_end, !prof !4

for_end:                                          ; preds = %if_end.5
  ret void

if_then:                                          ; preds = %for_body
  %11 = getelementptr inbounds float, float addrspace(1)* %0, i64 %10
  %12 = getelementptr inbounds float, float addrspace(1)* %1, i64 %10
  %13 = load float, float addrspace(1)* %12, align 4, !tbaa !5
  %14 = fcmp ogt float %13, 0.000000e+00
  %15 = select i1 %14, float %13, float 0.000000e+00
  store float %15, float addrspace(1)* %11, align 4, !tbaa !9
  br label %if_end

if_end:                                           ; preds = %if_then, %for_body
  %16 = shl i32 %6, 16
  %17 = or i32 %16, 65536
  %18 = add i32 %5, %17
  %19 = icmp slt i32 %18, 75866112
  %20 = sext i32 %18 to i64
  br i1 %19, label %if_then.1, label %if_end.1, !prof !4

if_then.1:                                        ; preds = %if_end
  %21 = getelementptr inbounds float, float addrspace(1)* %0, i64 %20
  %22 = getelementptr inbounds float, float addrspace(1)* %1, i64 %20
  %23 = load float, float addrspace(1)* %22, align 4, !tbaa !5
  %24 = fcmp ogt float %23, 0.000000e+00
  %25 = select i1 %24, float %23, float 0.000000e+00
  store float %25, float addrspace(1)* %21, align 4, !tbaa !9
  br label %if_end.1

if_end.1:                                         ; preds = %if_then.1, %if_end
  %26 = shl i32 %6, 16
  %27 = add i32 %26, 131072
  %28 = add i32 %5, %27
  %29 = icmp slt i32 %28, 75866112
  %30 = sext i32 %28 to i64
  br i1 %29, label %if_then.2, label %if_end.2, !prof !4

if_then.2:                                        ; preds = %if_end.1
  %31 = getelementptr inbounds float, float addrspace(1)* %0, i64 %30
  %32 = getelementptr inbounds float, float addrspace(1)* %1, i64 %30
  %33 = load float, float addrspace(1)* %32, align 4, !tbaa !5
  %34 = fcmp ogt float %33, 0.000000e+00
  %35 = select i1 %34, float %33, float 0.000000e+00
  store float %35, float addrspace(1)* %31, align 4, !tbaa !9
  br label %if_end.2

if_end.2:                                         ; preds = %if_then.2, %if_end.1
  %36 = shl i32 %6, 16
  %37 = add i32 %36, 196608
  %38 = add i32 %5, %37
  %39 = icmp slt i32 %38, 75866112
  %40 = sext i32 %38 to i64
  br i1 %39, label %if_then.3, label %if_end.3, !prof !4

if_then.3:                                        ; preds = %if_end.2
  %41 = getelementptr inbounds float, float addrspace(1)* %0, i64 %40
  %42 = getelementptr inbounds float, float addrspace(1)* %1, i64 %40
  %43 = load float, float addrspace(1)* %42, align 4, !tbaa !5
  %44 = fcmp ogt float %43, 0.000000e+00
  %45 = select i1 %44, float %43, float 0.000000e+00
  store float %45, float addrspace(1)* %41, align 4, !tbaa !9
  br label %if_end.3

if_end.3:                                         ; preds = %if_then.3, %if_end.2
  %46 = shl i32 %6, 16
  %47 = add i32 %46, 262144
  %48 = add i32 %5, %47
  %49 = icmp slt i32 %48, 75866112
  %50 = sext i32 %48 to i64
  br i1 %49, label %if_then.4, label %if_end.4, !prof !4

if_then.4:                                        ; preds = %if_end.3
  %51 = getelementptr inbounds float, float addrspace(1)* %0, i64 %50
  %52 = getelementptr inbounds float, float addrspace(1)* %1, i64 %50
  %53 = load float, float addrspace(1)* %52, align 4, !tbaa !5
  %54 = fcmp ogt float %53, 0.000000e+00
  %55 = select i1 %54, float %53, float 0.000000e+00
  store float %55, float addrspace(1)* %51, align 4, !tbaa !9
  br label %if_end.4

if_end.4:                                         ; preds = %if_then.4, %if_end.3
  %56 = shl i32 %6, 16
  %57 = add i32 %56, 327680
  %58 = add i32 %5, %57
  %59 = icmp slt i32 %58, 75866112
  %60 = sext i32 %58 to i64
  br i1 %59, label %if_then.5, label %if_end.5, !prof !4

if_then.5:                                        ; preds = %if_end.4
  %61 = getelementptr inbounds float, float addrspace(1)* %0, i64 %60
  %62 = getelementptr inbounds float, float addrspace(1)* %1, i64 %60
  %63 = load float, float addrspace(1)* %62, align 4, !tbaa !5
  %64 = fcmp ogt float %63, 0.000000e+00
  %65 = select i1 %64, float %63, float 0.000000e+00
  store float %65, float addrspace(1)* %61, align 4, !tbaa !9
  br label %if_end.5

if_end.5:                                         ; preds = %if_then.5, %if_end.4
  %66 = add nuw nsw i32 %6, 6
  %exitcond.5 = icmp eq i32 %66, 1158
  br i1 %exitcond.5, label %for_end, label %for_body, !prof !12
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workgroup.id.x() #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workitem.id.x() #1

attributes #0 = { nofree nounwind "amdgpu-flat-work-group-size"="1,1024" "no-nans-fp-math"="true" }
attributes #1 = { nounwind readnone speculatable }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 12.0.0 (/src/external/llvm-project/clang 1100ebe275a9dcc79a9abbda902b6f10738f2f5d)"}
!4 = !{!"branch_weights", i32 1048576, i32 1}
!5 = !{!6, !6, i64 0}
!6 = !{!"float", !7, i64 0}
!7 = !{!"0x2601930", !8, i64 0}
!8 = !{!"tvm-tbaa"}
!9 = !{!10, !10, i64 0}
!10 = !{!"float", !11, i64 0}
!11 = !{!"0x2603700", !8, i64 0}
!12 = !{!"branch_weights", i32 1, i32 1048576}

relu (128, 42, 165, 165)
Time cost of this operator: 0.0017331879
Lowered TIR:
@main = primfn(input0_1: handle, compute_1: handle) -> ()
  attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
  buffers = {compute: Buffer(compute_2: Pointer(float32), float32, [128, 42, 165, 165], []),
             input0: Buffer(input0_2: Pointer(float32), float32, [128, 42, 165, 165], [])}
  buffer_map = {input0_1: input0, compute_1: compute} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 256;
  for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 2234) {
    if @tir.likely(((((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x) < 146361600), dtype=bool) {
      compute_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)] = max((float32*)input0_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)], 0f32)
    }
  }
}


; ModuleID = 'TVMAMDGPUModule'
source_filename = "TVMAMDGPUModule"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-ni:7"
target triple = "amdgcn-amd-amdhsa-hcc"

; Function Attrs: nofree nounwind
define dllexport amdgpu_kernel void @default_function_kernel0(float addrspace(1)* noalias nocapture %0, float addrspace(1)* noalias nocapture readonly %1) local_unnamed_addr #0 {
entry:
  %2 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %3 = tail call i32 @llvm.amdgcn.workitem.id.x()
  %4 = shl i32 %2, 8
  %5 = add i32 %4, %3
  br label %for_body

for_body:                                         ; preds = %if_end.1, %entry
  %6 = phi i32 [ 0, %entry ], [ %26, %if_end.1 ]
  %7 = shl nuw nsw i32 %6, 16
  %8 = add i32 %5, %7
  %9 = icmp slt i32 %8, 146361600
  %10 = sext i32 %8 to i64
  br i1 %9, label %if_then, label %if_end, !prof !4

for_end:                                          ; preds = %if_end.1
  ret void

if_then:                                          ; preds = %for_body
  %11 = getelementptr inbounds float, float addrspace(1)* %0, i64 %10
  %12 = getelementptr inbounds float, float addrspace(1)* %1, i64 %10
  %13 = load float, float addrspace(1)* %12, align 4, !tbaa !5
  %14 = fcmp ogt float %13, 0.000000e+00
  %15 = select i1 %14, float %13, float 0.000000e+00
  store float %15, float addrspace(1)* %11, align 4, !tbaa !9
  br label %if_end

if_end:                                           ; preds = %if_then, %for_body
  %16 = shl i32 %6, 16
  %17 = or i32 %16, 65536
  %18 = add i32 %5, %17
  %19 = icmp slt i32 %18, 146361600
  %20 = sext i32 %18 to i64
  br i1 %19, label %if_then.1, label %if_end.1, !prof !4

if_then.1:                                        ; preds = %if_end
  %21 = getelementptr inbounds float, float addrspace(1)* %0, i64 %20
  %22 = getelementptr inbounds float, float addrspace(1)* %1, i64 %20
  %23 = load float, float addrspace(1)* %22, align 4, !tbaa !5
  %24 = fcmp ogt float %23, 0.000000e+00
  %25 = select i1 %24, float %23, float 0.000000e+00
  store float %25, float addrspace(1)* %21, align 4, !tbaa !9
  br label %if_end.1

if_end.1:                                         ; preds = %if_then.1, %if_end
  %26 = add nuw nsw i32 %6, 2
  %exitcond.1 = icmp eq i32 %26, 2234
  br i1 %exitcond.1, label %for_end, label %for_body, !prof !12
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workgroup.id.x() #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workitem.id.x() #1

attributes #0 = { nofree nounwind "amdgpu-flat-work-group-size"="1,1024" "no-nans-fp-math"="true" }
attributes #1 = { nounwind readnone speculatable }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 12.0.0 (/src/external/llvm-project/clang 1100ebe275a9dcc79a9abbda902b6f10738f2f5d)"}
!4 = !{!"branch_weights", i32 1048576, i32 1}
!5 = !{!6, !6, i64 0}
!6 = !{!"float", !7, i64 0}
!7 = !{!"0x3575930", !8, i64 0}
!8 = !{!"tvm-tbaa"}
!9 = !{!10, !10, i64 0}
!10 = !{!"float", !11, i64 0}
!11 = !{!"0x3577700", !8, i64 0}
!12 = !{!"branch_weights", i32 1, i32 1048576}

relu (128, 672, 21, 21)
Time cost of this operator: 0.0004450063
Lowered TIR:
@main = primfn(input0_1: handle, compute_1: handle) -> ()
  attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
  buffers = {compute: Buffer(compute_2: Pointer(float32), float32, [128, 672, 21, 21], []),
             input0: Buffer(input0_2: Pointer(float32), float32, [128, 672, 21, 21], [])}
  buffer_map = {input0_1: input0, compute_1: compute} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 256;
  for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 579) {
    if @tir.likely(((((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x) < 37933056), dtype=bool) {
      compute_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)] = max((float32*)input0_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)], 0f32)
    }
  }
}


; ModuleID = 'TVMAMDGPUModule'
source_filename = "TVMAMDGPUModule"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-ni:7"
target triple = "amdgcn-amd-amdhsa-hcc"

; Function Attrs: nofree nounwind
define dllexport amdgpu_kernel void @default_function_kernel0(float addrspace(1)* noalias nocapture %0, float addrspace(1)* noalias nocapture readonly %1) local_unnamed_addr #0 {
entry:
  %2 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %3 = tail call i32 @llvm.amdgcn.workitem.id.x()
  %4 = shl i32 %2, 8
  %5 = add i32 %4, %3
  br label %for_body

for_body:                                         ; preds = %if_end.2, %entry
  %6 = phi i32 [ 0, %entry ], [ %36, %if_end.2 ]
  %7 = shl nuw nsw i32 %6, 16
  %8 = add i32 %5, %7
  %9 = icmp slt i32 %8, 37933056
  %10 = sext i32 %8 to i64
  br i1 %9, label %if_then, label %if_end, !prof !4

for_end:                                          ; preds = %if_end.2
  ret void

if_then:                                          ; preds = %for_body
  %11 = getelementptr inbounds float, float addrspace(1)* %0, i64 %10
  %12 = getelementptr inbounds float, float addrspace(1)* %1, i64 %10
  %13 = load float, float addrspace(1)* %12, align 4, !tbaa !5
  %14 = fcmp ogt float %13, 0.000000e+00
  %15 = select i1 %14, float %13, float 0.000000e+00
  store float %15, float addrspace(1)* %11, align 4, !tbaa !9
  br label %if_end

if_end:                                           ; preds = %if_then, %for_body
  %16 = shl i32 %6, 16
  %17 = add i32 %16, 65536
  %18 = add i32 %5, %17
  %19 = icmp slt i32 %18, 37933056
  %20 = sext i32 %18 to i64
  br i1 %19, label %if_then.1, label %if_end.1, !prof !4

if_then.1:                                        ; preds = %if_end
  %21 = getelementptr inbounds float, float addrspace(1)* %0, i64 %20
  %22 = getelementptr inbounds float, float addrspace(1)* %1, i64 %20
  %23 = load float, float addrspace(1)* %22, align 4, !tbaa !5
  %24 = fcmp ogt float %23, 0.000000e+00
  %25 = select i1 %24, float %23, float 0.000000e+00
  store float %25, float addrspace(1)* %21, align 4, !tbaa !9
  br label %if_end.1

if_end.1:                                         ; preds = %if_then.1, %if_end
  %26 = shl i32 %6, 16
  %27 = add i32 %26, 131072
  %28 = add i32 %5, %27
  %29 = icmp slt i32 %28, 37933056
  %30 = sext i32 %28 to i64
  br i1 %29, label %if_then.2, label %if_end.2, !prof !4

if_then.2:                                        ; preds = %if_end.1
  %31 = getelementptr inbounds float, float addrspace(1)* %0, i64 %30
  %32 = getelementptr inbounds float, float addrspace(1)* %1, i64 %30
  %33 = load float, float addrspace(1)* %32, align 4, !tbaa !5
  %34 = fcmp ogt float %33, 0.000000e+00
  %35 = select i1 %34, float %33, float 0.000000e+00
  store float %35, float addrspace(1)* %31, align 4, !tbaa !9
  br label %if_end.2

if_end.2:                                         ; preds = %if_then.2, %if_end.1
  %36 = add nuw nsw i32 %6, 3
  %exitcond.2 = icmp eq i32 %36, 579
  br i1 %exitcond.2, label %for_end, label %for_body, !prof !12
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workgroup.id.x() #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workitem.id.x() #1

attributes #0 = { nofree nounwind "amdgpu-flat-work-group-size"="1,1024" "no-nans-fp-math"="true" }
attributes #1 = { nounwind readnone speculatable }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 12.0.0 (/src/external/llvm-project/clang 1100ebe275a9dcc79a9abbda902b6f10738f2f5d)"}
!4 = !{!"branch_weights", i32 1048576, i32 1}
!5 = !{!6, !6, i64 0}
!6 = !{!"float", !7, i64 0}
!7 = !{!"0x2fc5930", !8, i64 0}
!8 = !{!"tvm-tbaa"}
!9 = !{!10, !10, i64 0}
!10 = !{!"float", !11, i64 0}
!11 = !{!"0x2fc7700", !8, i64 0}
!12 = !{!"branch_weights", i32 1, i32 1048576}

relu (128, 84, 42, 42)
Time cost of this operator: 0.0002231276
Lowered TIR:
@main = primfn(input0_1: handle, compute_1: handle) -> ()
  attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
  buffers = {compute: Buffer(compute_2: Pointer(float32), float32, [128, 84, 42, 42], []),
             input0: Buffer(input0_2: Pointer(float32), float32, [128, 84, 42, 42], [])}
  buffer_map = {input0_1: input0, compute_1: compute} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 256;
  for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 290) {
    if @tir.likely(((((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x) < 18966528), dtype=bool) {
      compute_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)] = max((float32*)input0_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)], 0f32)
    }
  }
}


; ModuleID = 'TVMAMDGPUModule'
source_filename = "TVMAMDGPUModule"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-ni:7"
target triple = "amdgcn-amd-amdhsa-hcc"

; Function Attrs: nofree nounwind
define dllexport amdgpu_kernel void @default_function_kernel0(float addrspace(1)* noalias nocapture %0, float addrspace(1)* noalias nocapture readonly %1) local_unnamed_addr #0 {
entry:
  %2 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %3 = tail call i32 @llvm.amdgcn.workitem.id.x()
  %4 = shl i32 %2, 8
  %5 = add i32 %4, %3
  br label %for_body

for_body:                                         ; preds = %if_end.9, %entry
  %6 = phi i32 [ 0, %entry ], [ %106, %if_end.9 ]
  %7 = shl nuw nsw i32 %6, 16
  %8 = add i32 %5, %7
  %9 = icmp slt i32 %8, 18966528
  %10 = sext i32 %8 to i64
  br i1 %9, label %if_then, label %if_end, !prof !4

for_end:                                          ; preds = %if_end.9
  ret void

if_then:                                          ; preds = %for_body
  %11 = getelementptr inbounds float, float addrspace(1)* %0, i64 %10
  %12 = getelementptr inbounds float, float addrspace(1)* %1, i64 %10
  %13 = load float, float addrspace(1)* %12, align 4, !tbaa !5
  %14 = fcmp ogt float %13, 0.000000e+00
  %15 = select i1 %14, float %13, float 0.000000e+00
  store float %15, float addrspace(1)* %11, align 4, !tbaa !9
  br label %if_end

if_end:                                           ; preds = %if_then, %for_body
  %16 = shl i32 %6, 16
  %17 = or i32 %16, 65536
  %18 = add i32 %5, %17
  %19 = icmp slt i32 %18, 18966528
  %20 = sext i32 %18 to i64
  br i1 %19, label %if_then.1, label %if_end.1, !prof !4

if_then.1:                                        ; preds = %if_end
  %21 = getelementptr inbounds float, float addrspace(1)* %0, i64 %20
  %22 = getelementptr inbounds float, float addrspace(1)* %1, i64 %20
  %23 = load float, float addrspace(1)* %22, align 4, !tbaa !5
  %24 = fcmp ogt float %23, 0.000000e+00
  %25 = select i1 %24, float %23, float 0.000000e+00
  store float %25, float addrspace(1)* %21, align 4, !tbaa !9
  br label %if_end.1

if_end.1:                                         ; preds = %if_then.1, %if_end
  %26 = shl i32 %6, 16
  %27 = add i32 %26, 131072
  %28 = add i32 %5, %27
  %29 = icmp slt i32 %28, 18966528
  %30 = sext i32 %28 to i64
  br i1 %29, label %if_then.2, label %if_end.2, !prof !4

if_then.2:                                        ; preds = %if_end.1
  %31 = getelementptr inbounds float, float addrspace(1)* %0, i64 %30
  %32 = getelementptr inbounds float, float addrspace(1)* %1, i64 %30
  %33 = load float, float addrspace(1)* %32, align 4, !tbaa !5
  %34 = fcmp ogt float %33, 0.000000e+00
  %35 = select i1 %34, float %33, float 0.000000e+00
  store float %35, float addrspace(1)* %31, align 4, !tbaa !9
  br label %if_end.2

if_end.2:                                         ; preds = %if_then.2, %if_end.1
  %36 = shl i32 %6, 16
  %37 = add i32 %36, 196608
  %38 = add i32 %5, %37
  %39 = icmp slt i32 %38, 18966528
  %40 = sext i32 %38 to i64
  br i1 %39, label %if_then.3, label %if_end.3, !prof !4

if_then.3:                                        ; preds = %if_end.2
  %41 = getelementptr inbounds float, float addrspace(1)* %0, i64 %40
  %42 = getelementptr inbounds float, float addrspace(1)* %1, i64 %40
  %43 = load float, float addrspace(1)* %42, align 4, !tbaa !5
  %44 = fcmp ogt float %43, 0.000000e+00
  %45 = select i1 %44, float %43, float 0.000000e+00
  store float %45, float addrspace(1)* %41, align 4, !tbaa !9
  br label %if_end.3

if_end.3:                                         ; preds = %if_then.3, %if_end.2
  %46 = shl i32 %6, 16
  %47 = add i32 %46, 262144
  %48 = add i32 %5, %47
  %49 = icmp slt i32 %48, 18966528
  %50 = sext i32 %48 to i64
  br i1 %49, label %if_then.4, label %if_end.4, !prof !4

if_then.4:                                        ; preds = %if_end.3
  %51 = getelementptr inbounds float, float addrspace(1)* %0, i64 %50
  %52 = getelementptr inbounds float, float addrspace(1)* %1, i64 %50
  %53 = load float, float addrspace(1)* %52, align 4, !tbaa !5
  %54 = fcmp ogt float %53, 0.000000e+00
  %55 = select i1 %54, float %53, float 0.000000e+00
  store float %55, float addrspace(1)* %51, align 4, !tbaa !9
  br label %if_end.4

if_end.4:                                         ; preds = %if_then.4, %if_end.3
  %56 = shl i32 %6, 16
  %57 = add i32 %56, 327680
  %58 = add i32 %5, %57
  %59 = icmp slt i32 %58, 18966528
  %60 = sext i32 %58 to i64
  br i1 %59, label %if_then.5, label %if_end.5, !prof !4

if_then.5:                                        ; preds = %if_end.4
  %61 = getelementptr inbounds float, float addrspace(1)* %0, i64 %60
  %62 = getelementptr inbounds float, float addrspace(1)* %1, i64 %60
  %63 = load float, float addrspace(1)* %62, align 4, !tbaa !5
  %64 = fcmp ogt float %63, 0.000000e+00
  %65 = select i1 %64, float %63, float 0.000000e+00
  store float %65, float addrspace(1)* %61, align 4, !tbaa !9
  br label %if_end.5

if_end.5:                                         ; preds = %if_then.5, %if_end.4
  %66 = shl i32 %6, 16
  %67 = add i32 %66, 393216
  %68 = add i32 %5, %67
  %69 = icmp slt i32 %68, 18966528
  %70 = sext i32 %68 to i64
  br i1 %69, label %if_then.6, label %if_end.6, !prof !4

if_then.6:                                        ; preds = %if_end.5
  %71 = getelementptr inbounds float, float addrspace(1)* %0, i64 %70
  %72 = getelementptr inbounds float, float addrspace(1)* %1, i64 %70
  %73 = load float, float addrspace(1)* %72, align 4, !tbaa !5
  %74 = fcmp ogt float %73, 0.000000e+00
  %75 = select i1 %74, float %73, float 0.000000e+00
  store float %75, float addrspace(1)* %71, align 4, !tbaa !9
  br label %if_end.6

if_end.6:                                         ; preds = %if_then.6, %if_end.5
  %76 = shl i32 %6, 16
  %77 = add i32 %76, 458752
  %78 = add i32 %5, %77
  %79 = icmp slt i32 %78, 18966528
  %80 = sext i32 %78 to i64
  br i1 %79, label %if_then.7, label %if_end.7, !prof !4

if_then.7:                                        ; preds = %if_end.6
  %81 = getelementptr inbounds float, float addrspace(1)* %0, i64 %80
  %82 = getelementptr inbounds float, float addrspace(1)* %1, i64 %80
  %83 = load float, float addrspace(1)* %82, align 4, !tbaa !5
  %84 = fcmp ogt float %83, 0.000000e+00
  %85 = select i1 %84, float %83, float 0.000000e+00
  store float %85, float addrspace(1)* %81, align 4, !tbaa !9
  br label %if_end.7

if_end.7:                                         ; preds = %if_then.7, %if_end.6
  %86 = shl i32 %6, 16
  %87 = add i32 %86, 524288
  %88 = add i32 %5, %87
  %89 = icmp slt i32 %88, 18966528
  %90 = sext i32 %88 to i64
  br i1 %89, label %if_then.8, label %if_end.8, !prof !4

if_then.8:                                        ; preds = %if_end.7
  %91 = getelementptr inbounds float, float addrspace(1)* %0, i64 %90
  %92 = getelementptr inbounds float, float addrspace(1)* %1, i64 %90
  %93 = load float, float addrspace(1)* %92, align 4, !tbaa !5
  %94 = fcmp ogt float %93, 0.000000e+00
  %95 = select i1 %94, float %93, float 0.000000e+00
  store float %95, float addrspace(1)* %91, align 4, !tbaa !9
  br label %if_end.8

if_end.8:                                         ; preds = %if_then.8, %if_end.7
  %96 = shl i32 %6, 16
  %97 = add i32 %96, 589824
  %98 = add i32 %5, %97
  %99 = icmp slt i32 %98, 18966528
  %100 = sext i32 %98 to i64
  br i1 %99, label %if_then.9, label %if_end.9, !prof !4

if_then.9:                                        ; preds = %if_end.8
  %101 = getelementptr inbounds float, float addrspace(1)* %0, i64 %100
  %102 = getelementptr inbounds float, float addrspace(1)* %1, i64 %100
  %103 = load float, float addrspace(1)* %102, align 4, !tbaa !5
  %104 = fcmp ogt float %103, 0.000000e+00
  %105 = select i1 %104, float %103, float 0.000000e+00
  store float %105, float addrspace(1)* %101, align 4, !tbaa !9
  br label %if_end.9

if_end.9:                                         ; preds = %if_then.9, %if_end.8
  %106 = add nuw nsw i32 %6, 10
  %exitcond.9 = icmp eq i32 %106, 290
  br i1 %exitcond.9, label %for_end, label %for_body, !prof !12
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workgroup.id.x() #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workitem.id.x() #1

attributes #0 = { nofree nounwind "amdgpu-flat-work-group-size"="1,1024" "no-nans-fp-math"="true" }
attributes #1 = { nounwind readnone speculatable }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 12.0.0 (/src/external/llvm-project/clang 1100ebe275a9dcc79a9abbda902b6f10738f2f5d)"}
!4 = !{!"branch_weights", i32 1048576, i32 1}
!5 = !{!6, !6, i64 0}
!6 = !{!"float", !7, i64 0}
!7 = !{!"0x30fe930", !8, i64 0}
!8 = !{!"tvm-tbaa"}
!9 = !{!10, !10, i64 0}
!10 = !{!"float", !11, i64 0}
!11 = !{!"0x3100700", !8, i64 0}
!12 = !{!"branch_weights", i32 1, i32 1048576}

relu (128, 42, 83, 83)
Time cost of this operator: 0.0004356269
Lowered TIR:
@main = primfn(input0_1: handle, compute_1: handle) -> ()
  attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
  buffers = {compute: Buffer(compute_2: Pointer(float32), float32, [128, 42, 83, 83], []),
             input0: Buffer(input0_2: Pointer(float32), float32, [128, 42, 83, 83], [])}
  buffer_map = {input0_1: input0, compute_1: compute} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 256;
  for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 566) {
    if @tir.likely(((((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x) < 37035264), dtype=bool) {
      compute_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)] = max((float32*)input0_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)], 0f32)
    }
  }
}


; ModuleID = 'TVMAMDGPUModule'
source_filename = "TVMAMDGPUModule"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-ni:7"
target triple = "amdgcn-amd-amdhsa-hcc"

; Function Attrs: nofree nounwind
define dllexport amdgpu_kernel void @default_function_kernel0(float addrspace(1)* noalias nocapture %0, float addrspace(1)* noalias nocapture readonly %1) local_unnamed_addr #0 {
entry:
  %2 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %3 = tail call i32 @llvm.amdgcn.workitem.id.x()
  %4 = shl i32 %2, 8
  %5 = add i32 %4, %3
  br label %for_body

for_body:                                         ; preds = %if_end.1, %entry
  %6 = phi i32 [ 0, %entry ], [ %26, %if_end.1 ]
  %7 = shl nuw nsw i32 %6, 16
  %8 = add i32 %5, %7
  %9 = icmp slt i32 %8, 37035264
  %10 = sext i32 %8 to i64
  br i1 %9, label %if_then, label %if_end, !prof !4

for_end:                                          ; preds = %if_end.1
  ret void

if_then:                                          ; preds = %for_body
  %11 = getelementptr inbounds float, float addrspace(1)* %0, i64 %10
  %12 = getelementptr inbounds float, float addrspace(1)* %1, i64 %10
  %13 = load float, float addrspace(1)* %12, align 4, !tbaa !5
  %14 = fcmp ogt float %13, 0.000000e+00
  %15 = select i1 %14, float %13, float 0.000000e+00
  store float %15, float addrspace(1)* %11, align 4, !tbaa !9
  br label %if_end

if_end:                                           ; preds = %if_then, %for_body
  %16 = shl i32 %6, 16
  %17 = or i32 %16, 65536
  %18 = add i32 %5, %17
  %19 = icmp slt i32 %18, 37035264
  %20 = sext i32 %18 to i64
  br i1 %19, label %if_then.1, label %if_end.1, !prof !4

if_then.1:                                        ; preds = %if_end
  %21 = getelementptr inbounds float, float addrspace(1)* %0, i64 %20
  %22 = getelementptr inbounds float, float addrspace(1)* %1, i64 %20
  %23 = load float, float addrspace(1)* %22, align 4, !tbaa !5
  %24 = fcmp ogt float %23, 0.000000e+00
  %25 = select i1 %24, float %23, float 0.000000e+00
  store float %25, float addrspace(1)* %21, align 4, !tbaa !9
  br label %if_end.1

if_end.1:                                         ; preds = %if_then.1, %if_end
  %26 = add nuw nsw i32 %6, 2
  %exitcond.1 = icmp eq i32 %26, 566
  br i1 %exitcond.1, label %for_end, label %for_body, !prof !12
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workgroup.id.x() #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workitem.id.x() #1

attributes #0 = { nofree nounwind "amdgpu-flat-work-group-size"="1,1024" "no-nans-fp-math"="true" }
attributes #1 = { nounwind readnone speculatable }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 12.0.0 (/src/external/llvm-project/clang 1100ebe275a9dcc79a9abbda902b6f10738f2f5d)"}
!4 = !{!"branch_weights", i32 1048576, i32 1}
!5 = !{!6, !6, i64 0}
!6 = !{!"float", !7, i64 0}
!7 = !{!"0x349c930", !8, i64 0}
!8 = !{!"tvm-tbaa"}
!9 = !{!10, !10, i64 0}
!10 = !{!"float", !11, i64 0}
!11 = !{!"0x349e700", !8, i64 0}
!12 = !{!"branch_weights", i32 1, i32 1048576}

relu (128, 128, 56, 56)
Time cost of this operator: 0.0005768457
Lowered TIR:
@main = primfn(input0_1: handle, compute_1: handle) -> ()
  attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
  buffers = {compute: Buffer(compute_2: Pointer(float32), float32, [128, 128, 56, 56], []),
             input0: Buffer(input0_2: Pointer(float32), float32, [128, 128, 56, 56], [])}
  buffer_map = {input0_1: input0, compute_1: compute} {
  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 256;
  for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 784) {
    compute_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)] = max((float32*)input0_2[(((i0.i1.fused.i2.fused.i3.fused.outer*65536) + (blockIdx.x*256)) + threadIdx.x)], 0f32)
  }
}


; ModuleID = 'TVMAMDGPUModule'
source_filename = "TVMAMDGPUModule"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-ni:7"
target triple = "amdgcn-amd-amdhsa-hcc"

; Function Attrs: nofree nounwind
define dllexport amdgpu_kernel void @default_function_kernel0(float addrspace(1)* noalias nocapture %0, float addrspace(1)* noalias nocapture readonly %1) local_unnamed_addr #0 {
entry:
  %2 = tail call i32 @llvm.amdgcn.workgroup.id.x()
  %3 = tail call i32 @llvm.amdgcn.workitem.id.x()
  %4 = shl i32 %2, 8
  %5 = add i32 %4, %3
  br label %for_body

for_body:                                         ; preds = %for_body, %entry
  %6 = phi i32 [ 0, %entry ], [ %132, %for_body ]
  %7 = shl nuw nsw i32 %6, 16
  %8 = add i32 %5, %7
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds float, float addrspace(1)* %1, i64 %9
  %11 = load float, float addrspace(1)* %10, align 4, !tbaa !4
  %12 = fcmp ogt float %11, 0.000000e+00
  %13 = select i1 %12, float %11, float 0.000000e+00
  %14 = getelementptr inbounds float, float addrspace(1)* %0, i64 %9
  store float %13, float addrspace(1)* %14, align 4, !tbaa !8
  %15 = shl i32 %6, 16
  %16 = or i32 %15, 65536
  %17 = add i32 %5, %16
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds float, float addrspace(1)* %1, i64 %18
  %20 = load float, float addrspace(1)* %19, align 4, !tbaa !4
  %21 = fcmp ogt float %20, 0.000000e+00
  %22 = select i1 %21, float %20, float 0.000000e+00
  %23 = getelementptr inbounds float, float addrspace(1)* %0, i64 %18
  store float %22, float addrspace(1)* %23, align 4, !tbaa !8
  %24 = shl i32 %6, 16
  %25 = add i32 %24, 131072
  %26 = add i32 %5, %25
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds float, float addrspace(1)* %1, i64 %27
  %29 = load float, float addrspace(1)* %28, align 4, !tbaa !4
  %30 = fcmp ogt float %29, 0.000000e+00
  %31 = select i1 %30, float %29, float 0.000000e+00
  %32 = getelementptr inbounds float, float addrspace(1)* %0, i64 %27
  store float %31, float addrspace(1)* %32, align 4, !tbaa !8
  %33 = shl i32 %6, 16
  %34 = add i32 %33, 196608
  %35 = add i32 %5, %34
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds float, float addrspace(1)* %1, i64 %36
  %38 = load float, float addrspace(1)* %37, align 4, !tbaa !4
  %39 = fcmp ogt float %38, 0.000000e+00
  %40 = select i1 %39, float %38, float 0.000000e+00
  %41 = getelementptr inbounds float, float addrspace(1)* %0, i64 %36
  store float %40, float addrspace(1)* %41, align 4, !tbaa !8
  %42 = shl i32 %6, 16
  %43 = add i32 %42, 262144
  %44 = add i32 %5, %43
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds float, float addrspace(1)* %1, i64 %45
  %47 = load float, float addrspace(1)* %46, align 4, !tbaa !4
  %48 = fcmp ogt float %47, 0.000000e+00
  %49 = select i1 %48, float %47, float 0.000000e+00
  %50 = getelementptr inbounds float, float addrspace(1)* %0, i64 %45
  store float %49, float addrspace(1)* %50, align 4, !tbaa !8
  %51 = shl i32 %6, 16
  %52 = add i32 %51, 327680
  %53 = add i32 %5, %52
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds float, float addrspace(1)* %1, i64 %54
  %56 = load float, float addrspace(1)* %55, align 4, !tbaa !4
  %57 = fcmp ogt float %56, 0.000000e+00
  %58 = select i1 %57, float %56, float 0.000000e+00
  %59 = getelementptr inbounds float, float addrspace(1)* %0, i64 %54
  store float %58, float addrspace(1)* %59, align 4, !tbaa !8
  %60 = shl i32 %6, 16
  %61 = add i32 %60, 393216
  %62 = add i32 %5, %61
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds float, float addrspace(1)* %1, i64 %63
  %65 = load float, float addrspace(1)* %64, align 4, !tbaa !4
  %66 = fcmp ogt float %65, 0.000000e+00
  %67 = select i1 %66, float %65, float 0.000000e+00
  %68 = getelementptr inbounds float, float addrspace(1)* %0, i64 %63
  store float %67, float addrspace(1)* %68, align 4, !tbaa !8
  %69 = shl i32 %6, 16
  %70 = add i32 %69, 458752
  %71 = add i32 %5, %70
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds float, float addrspace(1)* %1, i64 %72
  %74 = load float, float addrspace(1)* %73, align 4, !tbaa !4
  %75 = fcmp ogt float %74, 0.000000e+00
  %76 = select i1 %75, float %74, float 0.000000e+00
  %77 = getelementptr inbounds float, float addrspace(1)* %0, i64 %72
  store float %76, float addrspace(1)* %77, align 4, !tbaa !8
  %78 = shl i32 %6, 16
  %79 = add i32 %78, 524288
  %80 = add i32 %5, %79
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds float, float addrspace(1)* %1, i64 %81
  %83 = load float, float addrspace(1)* %82, align 4, !tbaa !4
  %84 = fcmp ogt float %83, 0.000000e+00
  %85 = select i1 %84, float %83, float 0.000000e+00
  %86 = getelementptr inbounds float, float addrspace(1)* %0, i64 %81
  store float %85, float addrspace(1)* %86, align 4, !tbaa !8
  %87 = shl i32 %6, 16
  %88 = add i32 %87, 589824
  %89 = add i32 %5, %88
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds float, float addrspace(1)* %1, i64 %90
  %92 = load float, float addrspace(1)* %91, align 4, !tbaa !4
  %93 = fcmp ogt float %92, 0.000000e+00
  %94 = select i1 %93, float %92, float 0.000000e+00
  %95 = getelementptr inbounds float, float addrspace(1)* %0, i64 %90
  store float %94, float addrspace(1)* %95, align 4, !tbaa !8
  %96 = shl i32 %6, 16
  %97 = add i32 %96, 655360
  %98 = add i32 %5, %97
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds float, float addrspace(1)* %1, i64 %99
  %101 = load float, float addrspace(1)* %100, align 4, !tbaa !4
  %102 = fcmp ogt float %101, 0.000000e+00
  %103 = select i1 %102, float %101, float 0.000000e+00
  %104 = getelementptr inbounds float, float addrspace(1)* %0, i64 %99
  store float %103, float addrspace(1)* %104, align 4, !tbaa !8
  %105 = shl i32 %6, 16
  %106 = add i32 %105, 720896
  %107 = add i32 %5, %106
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds float, float addrspace(1)* %1, i64 %108
  %110 = load float, float addrspace(1)* %109, align 4, !tbaa !4
  %111 = fcmp ogt float %110, 0.000000e+00
  %112 = select i1 %111, float %110, float 0.000000e+00
  %113 = getelementptr inbounds float, float addrspace(1)* %0, i64 %108
  store float %112, float addrspace(1)* %113, align 4, !tbaa !8
  %114 = shl i32 %6, 16
  %115 = add i32 %114, 786432
  %116 = add i32 %5, %115
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds float, float addrspace(1)* %1, i64 %117
  %119 = load float, float addrspace(1)* %118, align 4, !tbaa !4
  %120 = fcmp ogt float %119, 0.000000e+00
  %121 = select i1 %120, float %119, float 0.000000e+00
  %122 = getelementptr inbounds float, float addrspace(1)* %0, i64 %117
  store float %121, float addrspace(1)* %122, align 4, !tbaa !8
  %123 = shl i32 %6, 16
  %124 = add i32 %123, 851968
  %125 = add i32 %5, %124
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds float, float addrspace(1)* %1, i64 %126
  %128 = load float, float addrspace(1)* %127, align 4, !tbaa !4
  %129 = fcmp ogt float %128, 0.000000e+00
  %130 = select i1 %129, float %128, float 0.000000e+00
  %131 = getelementptr inbounds float, float addrspace(1)* %0, i64 %126
  store float %130, float addrspace(1)* %131, align 4, !tbaa !8
  %132 = add nuw nsw i32 %6, 14
  %exitcond.13 = icmp eq i32 %132, 784
  br i1 %exitcond.13, label %for_end, label %for_body, !prof !11

for_end:                                          ; preds = %for_body
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workgroup.id.x() #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.amdgcn.workitem.id.x() #1

attributes #0 = { nofree nounwind "amdgpu-flat-work-group-size"="1,1024" "no-nans-fp-math"="true" }
attributes #1 = { nounwind readnone speculatable }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 12.0.0 (/src/external/llvm-project/clang 1100ebe275a9dcc79a9abbda902b6f10738f2f5d)"}
!4 = !{!5, !5, i64 0}
!5 = !{!"float", !6, i64 0}
!6 = !{!"0x2994b30", !7, i64 0}
!7 = !{!"tvm-tbaa"}
!8 = !{!9, !9, i64 0}
!9 = !{!"float", !10, i64 0}
!10 = !{!"0x2994d30", !7, i64 0}
!11 = !{!"branch_weights", i32 1, i32 1048576}

