{"parameters": {"input_shape": [128, 336, 21, 21], "filter_shape": [336, 336, 1, 1], "output_shape": [128, 336, 21, 21], "window_movement_strides": [1, 1], "padding_below_diff": [0, 0], "window_dilation_strides": [1, 1]}, "op_type": "Fused_Convolution_Add_Relu", "tvm_func_name": "ansor_conv2d_128_336_21_21_336_1_1_1_VALID_add_relu", "code": "extern \"C\" __global__ void ansor_conv2d_128_336_21_21_336_1_1_1_VALID_add_relu(float* __restrict__ input0, float* __restrict__ input1, float* __restrict__ compute, float* __restrict__ input2) {\n  float compute1[126];\n  __shared__ float pad_temp_shared[9261];\n  __shared__ float input1_shared[882];\n  for (int yy_outer_inner_init = 0; yy_outer_inner_init < 3; ++yy_outer_inner_init) {\n    for (int ff_inner_init = 0; ff_inner_init < 3; ++ff_inner_init) {\n      for (int yy_inner_init = 0; yy_inner_init < 7; ++yy_inner_init) {\n        compute1[((((ff_inner_init * 21) + (yy_outer_inner_init * 7)) + yy_inner_init))] = 0.000000e+00f;\n        compute1[(((((ff_inner_init * 21) + (yy_outer_inner_init * 7)) + yy_inner_init) + 63))] = 0.000000e+00f;\n      }\n    }\n  }\n  for (int rc_outer_outer = 0; rc_outer_outer < 16; ++rc_outer_outer) {\n    __syncthreads();\n    for (int ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer = 0; ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer < 63; ++ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer) {\n      pad_temp_shared[(((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 147) + ((int)threadIdx.x)))] = input0[((((((((int)blockIdx.x) >> 3) * 148176) + (rc_outer_outer * 9261)) + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 147)) + ((int)threadIdx.x)))];\n    }\n    for (int ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer1 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer1 < 6; ++ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer1) {\n      input1_shared[(((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer1 * 147) + ((int)threadIdx.x)))] = input1[(((((((((int)blockIdx.x) & 7) * 14112) + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer1 * 2352)) + ((((int)threadIdx.x) / 21) * 336)) + (rc_outer_outer * 21)) + (((int)threadIdx.x) % 21)))];\n    }\n    __syncthreads();\n    for (int rc_outer_inner = 0; rc_outer_inner < 3; ++rc_outer_inner) {\n      for (int yy_outer_inner = 0; yy_outer_inner < 3; ++yy_outer_inner) {\n        for (int rc_inner = 0; rc_inner < 7; ++rc_inner) {\n          for (int ff_inner = 0; ff_inner < 3; ++ff_inner) {\n            for (int yy_inner = 0; yy_inner < 7; ++yy_inner) {\n              compute1[((((ff_inner * 21) + (yy_outer_inner * 7)) + yy_inner))] = (compute1[((((ff_inner * 21) + (yy_outer_inner * 7)) + yy_inner))] + (pad_temp_shared[((((((rc_outer_inner * 3087) + (rc_inner * 441)) + (yy_outer_inner * 147)) + (yy_inner * 21)) + (((int)threadIdx.x) % 21)))] * input1_shared[((((((((int)threadIdx.x) / 21) * 63) + (ff_inner * 21)) + (rc_outer_inner * 7)) + rc_inner))]));\n              compute1[(((((ff_inner * 21) + (yy_outer_inner * 7)) + yy_inner) + 63))] = (compute1[(((((ff_inner * 21) + (yy_outer_inner * 7)) + yy_inner) + 63))] + (pad_temp_shared[((((((rc_outer_inner * 3087) + (rc_inner * 441)) + (yy_outer_inner * 147)) + (yy_inner * 21)) + (((int)threadIdx.x) % 21)))] * input1_shared[(((((((((int)threadIdx.x) / 21) * 63) + (ff_inner * 21)) + (rc_outer_inner * 7)) + rc_inner) + 441))]));\n            }\n          }\n        }\n      }\n    }\n  }\n  for (int i1_inner = 0; i1_inner < 3; ++i1_inner) {\n    for (int i2_inner = 0; i2_inner < 21; ++i2_inner) {\n      compute[((((((((int)blockIdx.x) * 18522) + ((((int)threadIdx.x) / 21) * 1323)) + (i1_inner * 441)) + (i2_inner * 21)) + (((int)threadIdx.x) % 21)))] = max((compute1[(((i1_inner * 21) + i2_inner))] + input2[((((((((int)blockIdx.x) * 18522) + ((((int)threadIdx.x) / 21) * 1323)) + (i1_inner * 441)) + (i2_inner * 21)) + (((int)threadIdx.x) % 21)))]), 0.000000e+00f);\n      compute[(((((((((int)blockIdx.x) * 18522) + ((((int)threadIdx.x) / 21) * 1323)) + (i1_inner * 441)) + (i2_inner * 21)) + (((int)threadIdx.x) % 21)) + 9261))] = max((compute1[((((i1_inner * 21) + i2_inner) + 63))] + input2[(((((((((int)blockIdx.x) * 18522) + ((((int)threadIdx.x) / 21) * 1323)) + (i1_inner * 441)) + (i2_inner * 21)) + (((int)threadIdx.x) % 21)) + 9261))]), 0.000000e+00f);\n    }\n  }\n}\n", "gridDim": [1024, 1, 1], "blockDim": [147, 1, 1]}