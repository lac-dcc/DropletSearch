{"parameters": {"input_shape": [128, 1008, 42, 42], "filter_shape": [168, 1008, 1, 1], "output_shape": [128, 168, 42, 42], "window_movement_strides": [1, 1], "padding_below_diff": [0, 0], "window_dilation_strides": [1, 1]}, "op_type": "Fused_Convolution_Add", "tvm_func_name": "ansor_conv2d_128_1008_42_42_168_1_1_1_SAME_add", "code": "extern \"C\" __global__ void ansor_conv2d_128_1008_42_42_168_1_1_1_SAME_add(float* __restrict__ input0, float* __restrict__ input1, float* __restrict__ T_add, float* __restrict__ input2) {\n  float compute[98];\n  __shared__ float pad_temp_shared[5292];\n  __shared__ float input1_shared[1512];\n  for (int ff_outer_inner_init = 0; ff_outer_inner_init < 7; ++ff_outer_inner_init) {\n    for (int yy_outer_inner_init = 0; yy_outer_inner_init < 7; ++yy_outer_inner_init) {\n      compute[(((ff_outer_inner_init * 7) + yy_outer_inner_init))] = 0.000000e+00f;\n      compute[((((ff_outer_inner_init * 7) + yy_outer_inner_init) + 49))] = 0.000000e+00f;\n    }\n  }\n  for (int rc_outer_outer = 0; rc_outer_outer < 56; ++rc_outer_outer) {\n    __syncthreads();\n    for (int ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer = 0; ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer < 21; ++ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer) {\n      pad_temp_shared[(((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 252) + ((int)threadIdx.x)))] = input0[((((((((((int)blockIdx.x) / 12) * 1778112) + (rc_outer_outer * 31752)) + ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 6) + (((int)threadIdx.x) / 42)) / 7) * 1764)) + ((((int)blockIdx.x) % 6) * 294)) + ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 6) + (((int)threadIdx.x) / 42)) % 7) * 42)) + (((int)threadIdx.x) % 42)))];\n    }\n    for (int ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer1 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer1 < 3; ++ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer1) {\n      ((float2*)(input1_shared + (((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer1 * 504) + (((int)threadIdx.x) * 2)))))[0] = ((float2*)(input1 + ((((((((((int)blockIdx.x) % 12) / 6) * 84672) + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer1 * 28224)) + ((((int)threadIdx.x) / 9) * 1008)) + (rc_outer_outer * 18)) + ((((int)threadIdx.x) % 9) * 2)))))[0];\n    }\n    __syncthreads();\n    for (int rc_outer_inner = 0; rc_outer_inner < 18; ++rc_outer_inner) {\n      for (int ff_outer_inner = 0; ff_outer_inner < 7; ++ff_outer_inner) {\n        for (int yy_outer_inner = 0; yy_outer_inner < 7; ++yy_outer_inner) {\n          compute[(((ff_outer_inner * 7) + yy_outer_inner))] = (compute[(((ff_outer_inner * 7) + yy_outer_inner))] + (pad_temp_shared[((((rc_outer_inner * 294) + (yy_outer_inner * 42)) + (((int)threadIdx.x) % 42)))] * input1_shared[(((((((int)threadIdx.x) / 42) * 126) + (ff_outer_inner * 18)) + rc_outer_inner))]));\n          compute[((((ff_outer_inner * 7) + yy_outer_inner) + 49))] = (compute[((((ff_outer_inner * 7) + yy_outer_inner) + 49))] + (pad_temp_shared[((((rc_outer_inner * 294) + (yy_outer_inner * 42)) + (((int)threadIdx.x) % 42)))] * input1_shared[((((((((int)threadIdx.x) / 42) * 126) + (ff_outer_inner * 18)) + rc_outer_inner) + 756))]));\n        }\n      }\n    }\n  }\n  for (int ax1_inner = 0; ax1_inner < 7; ++ax1_inner) {\n    for (int ax2_inner = 0; ax2_inner < 7; ++ax2_inner) {\n      T_add[((((((((((int)blockIdx.x) / 6) * 148176) + ((((int)threadIdx.x) / 42) * 12348)) + (ax1_inner * 1764)) + ((((int)blockIdx.x) % 6) * 294)) + (ax2_inner * 42)) + (((int)threadIdx.x) % 42)))] = (compute[(((ax1_inner * 7) + ax2_inner))] + input2[((((((((((int)blockIdx.x) / 6) * 148176) + ((((int)threadIdx.x) / 42) * 12348)) + (ax1_inner * 1764)) + ((((int)blockIdx.x) % 6) * 294)) + (ax2_inner * 42)) + (((int)threadIdx.x) % 42)))]);\n      T_add[(((((((((((int)blockIdx.x) / 6) * 148176) + ((((int)threadIdx.x) / 42) * 12348)) + (ax1_inner * 1764)) + ((((int)blockIdx.x) % 6) * 294)) + (ax2_inner * 42)) + (((int)threadIdx.x) % 42)) + 74088))] = (compute[((((ax1_inner * 7) + ax2_inner) + 49))] + input2[(((((((((((int)blockIdx.x) / 6) * 148176) + ((((int)threadIdx.x) / 42) * 12348)) + (ax1_inner * 1764)) + ((((int)blockIdx.x) % 6) * 294)) + (ax2_inner * 42)) + (((int)threadIdx.x) % 42)) + 74088))]);\n    }\n  }\n}\n", "gridDim": [1536, 1, 1], "blockDim": [252, 1, 1]}