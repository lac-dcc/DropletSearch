{"parameters": {"input_shape": [128, 1024, 14, 14], "filter_shape": [512, 1024, 1, 1], "output_shape": [128, 512, 14, 14], "window_movement_strides": [1, 1], "padding_below_diff": [0, 0], "window_dilation_strides": [1, 1]}, "op_type": "Fused_Convolution_Add_Relu", "tvm_func_name": "conv2d_128_1024_14_14_512_1_1_1_SAME_add_relu", "code": "extern \"C\" __global__ void conv2d_128_1024_14_14_512_1_1_1_SAME_add_relu(float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ compute, float* __restrict__ input2) {\n  float compute1[28];\n  __shared__ float pad_temp_shared[3136];\n  __shared__ float placeholder_shared[1024];\n  #pragma unroll\n  for (int ff_init = 0; ff_init < 4; ++ff_init) {\n    compute1[(ff_init)] = 0.000000e+00f;\n    compute1[((ff_init + 4))] = 0.000000e+00f;\n    compute1[((ff_init + 8))] = 0.000000e+00f;\n    compute1[((ff_init + 12))] = 0.000000e+00f;\n    compute1[((ff_init + 16))] = 0.000000e+00f;\n    compute1[((ff_init + 20))] = 0.000000e+00f;\n    compute1[((ff_init + 24))] = 0.000000e+00f;\n  }\n  for (int rc_outer = 0; rc_outer < 64; ++rc_outer) {\n    __syncthreads();\n    #pragma unroll\n    for (int ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner = 0; ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner < 7; ++ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) {\n      pad_temp_shared[(((((((int)threadIdx.z) * 196) + (((int)threadIdx.y) * 98)) + (((int)threadIdx.x) * 7)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner))] = placeholder[((((((((((int)blockIdx.z) >> 3) * 200704) + (rc_outer * 3136)) + (((int)threadIdx.z) * 196)) + (((int)threadIdx.y) * 98)) + (((int)threadIdx.x) * 7)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner))];\n    }\n    #pragma unroll\n    for (int ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1 < 3; ++ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) {\n      if ((((((int)threadIdx.z) * 4) + (((int)threadIdx.y) * 2)) + (((((int)threadIdx.x) * 3) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) >> 4)) < 64) {\n        if (((((((int)threadIdx.z) * 64) + (((int)threadIdx.y) * 32)) + (((int)threadIdx.x) * 3)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) < 1024) {\n          if ((((((int)threadIdx.y) * 32) + (((int)threadIdx.x) * 3)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) < 64) {\n            if (((((int)threadIdx.x) * 3) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) < 32) {\n              placeholder_shared[(((((((int)threadIdx.z) * 64) + (((int)threadIdx.y) * 32)) + (((int)threadIdx.x) * 3)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1))] = placeholder1[((((((((((int)blockIdx.z) & 7) * 65536) + (((int)threadIdx.z) * 4096)) + (((int)threadIdx.y) * 2048)) + ((((((int)threadIdx.x) * 3) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) >> 4) * 1024)) + (rc_outer * 16)) + (((((int)threadIdx.x) * 3) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) & 15)))];\n            }\n          }\n        }\n      }\n    }\n    __syncthreads();\n    #pragma unroll\n    for (int rc_inner = 0; rc_inner < 16; ++rc_inner) {\n      #pragma unroll\n      for (int ff = 0; ff < 4; ++ff) {\n        compute1[(ff)] = (compute1[(ff)] + (pad_temp_shared[((((rc_inner * 196) + (((int)threadIdx.y) * 14)) + ((int)threadIdx.x)))] * placeholder_shared[((((((int)threadIdx.z) * 64) + (ff * 16)) + rc_inner))]));\n        compute1[((ff + 4))] = (compute1[((ff + 4))] + (pad_temp_shared[(((((rc_inner * 196) + (((int)threadIdx.y) * 14)) + ((int)threadIdx.x)) + 28))] * placeholder_shared[((((((int)threadIdx.z) * 64) + (ff * 16)) + rc_inner))]));\n        compute1[((ff + 8))] = (compute1[((ff + 8))] + (pad_temp_shared[(((((rc_inner * 196) + (((int)threadIdx.y) * 14)) + ((int)threadIdx.x)) + 56))] * placeholder_shared[((((((int)threadIdx.z) * 64) + (ff * 16)) + rc_inner))]));\n        compute1[((ff + 12))] = (compute1[((ff + 12))] + (pad_temp_shared[(((((rc_inner * 196) + (((int)threadIdx.y) * 14)) + ((int)threadIdx.x)) + 84))] * placeholder_shared[((((((int)threadIdx.z) * 64) + (ff * 16)) + rc_inner))]));\n        compute1[((ff + 16))] = (compute1[((ff + 16))] + (pad_temp_shared[(((((rc_inner * 196) + (((int)threadIdx.y) * 14)) + ((int)threadIdx.x)) + 112))] * placeholder_shared[((((((int)threadIdx.z) * 64) + (ff * 16)) + rc_inner))]));\n        compute1[((ff + 20))] = (compute1[((ff + 20))] + (pad_temp_shared[(((((rc_inner * 196) + (((int)threadIdx.y) * 14)) + ((int)threadIdx.x)) + 140))] * placeholder_shared[((((((int)threadIdx.z) * 64) + (ff * 16)) + rc_inner))]));\n        compute1[((ff + 24))] = (compute1[((ff + 24))] + (pad_temp_shared[(((((rc_inner * 196) + (((int)threadIdx.y) * 14)) + ((int)threadIdx.x)) + 168))] * placeholder_shared[((((((int)threadIdx.z) * 64) + (ff * 16)) + rc_inner))]));\n      }\n    }\n  }\n  #pragma unroll\n  for (int i1_inner_inner_inner = 0; i1_inner_inner_inner < 4; ++i1_inner_inner_inner) {\n    compute[((((((((int)blockIdx.z) * 12544) + (((int)threadIdx.z) * 784)) + (i1_inner_inner_inner * 196)) + (((int)threadIdx.y) * 14)) + ((int)threadIdx.x)))] = max((compute1[(i1_inner_inner_inner)] + input2[((((((((int)blockIdx.z) * 12544) + (((int)threadIdx.z) * 784)) + (i1_inner_inner_inner * 196)) + (((int)threadIdx.y) * 14)) + ((int)threadIdx.x)))]), 0.000000e+00f);\n    compute[(((((((((int)blockIdx.z) * 12544) + (((int)threadIdx.z) * 784)) + (i1_inner_inner_inner * 196)) + (((int)threadIdx.y) * 14)) + ((int)threadIdx.x)) + 28))] = max((compute1[((i1_inner_inner_inner + 4))] + input2[(((((((((int)blockIdx.z) * 12544) + (((int)threadIdx.z) * 784)) + (i1_inner_inner_inner * 196)) + (((int)threadIdx.y) * 14)) + ((int)threadIdx.x)) + 28))]), 0.000000e+00f);\n    compute[(((((((((int)blockIdx.z) * 12544) + (((int)threadIdx.z) * 784)) + (i1_inner_inner_inner * 196)) + (((int)threadIdx.y) * 14)) + ((int)threadIdx.x)) + 56))] = max((compute1[((i1_inner_inner_inner + 8))] + input2[(((((((((int)blockIdx.z) * 12544) + (((int)threadIdx.z) * 784)) + (i1_inner_inner_inner * 196)) + (((int)threadIdx.y) * 14)) + ((int)threadIdx.x)) + 56))]), 0.000000e+00f);\n    compute[(((((((((int)blockIdx.z) * 12544) + (((int)threadIdx.z) * 784)) + (i1_inner_inner_inner * 196)) + (((int)threadIdx.y) * 14)) + ((int)threadIdx.x)) + 84))] = max((compute1[((i1_inner_inner_inner + 12))] + input2[(((((((((int)blockIdx.z) * 12544) + (((int)threadIdx.z) * 784)) + (i1_inner_inner_inner * 196)) + (((int)threadIdx.y) * 14)) + ((int)threadIdx.x)) + 84))]), 0.000000e+00f);\n    compute[(((((((((int)blockIdx.z) * 12544) + (((int)threadIdx.z) * 784)) + (i1_inner_inner_inner * 196)) + (((int)threadIdx.y) * 14)) + ((int)threadIdx.x)) + 112))] = max((compute1[((i1_inner_inner_inner + 16))] + input2[(((((((((int)blockIdx.z) * 12544) + (((int)threadIdx.z) * 784)) + (i1_inner_inner_inner * 196)) + (((int)threadIdx.y) * 14)) + ((int)threadIdx.x)) + 112))]), 0.000000e+00f);\n    compute[(((((((((int)blockIdx.z) * 12544) + (((int)threadIdx.z) * 784)) + (i1_inner_inner_inner * 196)) + (((int)threadIdx.y) * 14)) + ((int)threadIdx.x)) + 140))] = max((compute1[((i1_inner_inner_inner + 20))] + input2[(((((((((int)blockIdx.z) * 12544) + (((int)threadIdx.z) * 784)) + (i1_inner_inner_inner * 196)) + (((int)threadIdx.y) * 14)) + ((int)threadIdx.x)) + 140))]), 0.000000e+00f);\n    compute[(((((((((int)blockIdx.z) * 12544) + (((int)threadIdx.z) * 784)) + (i1_inner_inner_inner * 196)) + (((int)threadIdx.y) * 14)) + ((int)threadIdx.x)) + 168))] = max((compute1[((i1_inner_inner_inner + 24))] + input2[(((((((((int)blockIdx.z) * 12544) + (((int)threadIdx.z) * 784)) + (i1_inner_inner_inner * 196)) + (((int)threadIdx.y) * 14)) + ((int)threadIdx.x)) + 168))]), 0.000000e+00f);\n  }\n}\n", "gridDim": [1, 1, 1024], "blockDim": [14, 2, 16]}