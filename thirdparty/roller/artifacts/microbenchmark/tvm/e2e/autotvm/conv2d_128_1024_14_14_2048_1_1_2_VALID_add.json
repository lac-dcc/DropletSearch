{"parameters": {"input_shape": [128, 1024, 14, 14], "filter_shape": [2048, 1024, 1, 1], "output_shape": [128, 2048, 7, 7], "window_movement_strides": [2, 2], "padding_below_diff": [0, 0], "window_dilation_strides": [1, 1]}, "op_type": "Fused_Convolution_Add", "tvm_func_name": "conv2d_128_1024_14_14_2048_1_1_2_VALID_add", "code": "extern \"C\" __global__ void conv2d_128_1024_14_14_2048_1_1_2_VALID_add(float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_add, float* __restrict__ input2) {\n  float compute[28];\n  __shared__ float pad_temp_shared[1352];\n  __shared__ float placeholder_shared[1024];\n  #pragma unroll\n  for (int ff_init = 0; ff_init < 2; ++ff_init) {\n    #pragma unroll\n    for (int yy_init = 0; yy_init < 7; ++yy_init) {\n      compute[(((ff_init * 7) + yy_init))] = 0.000000e+00f;\n      compute[((((ff_init * 7) + yy_init) + 14))] = 0.000000e+00f;\n    }\n  }\n  for (int rc_outer = 0; rc_outer < 128; ++rc_outer) {\n    __syncthreads();\n    #pragma unroll\n    for (int ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner = 0; ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner < 7; ++ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) {\n      if ((((((int)threadIdx.z) * 43) + (((int)threadIdx.x) * 7)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) < 1352) {\n        if (((((int)threadIdx.x) * 7) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) < 43) {\n          pad_temp_shared[((((((int)threadIdx.z) * 43) + (((int)threadIdx.x) * 7)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner))] = placeholder[(((((((((int)blockIdx.z) >> 4) * 200704) + (rc_outer * 1568)) + (((((((int)threadIdx.z) * 43) + (((int)threadIdx.x) * 7)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) / 169) * 196)) + ((((((((int)threadIdx.z) * 43) + (((int)threadIdx.x) * 7)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) % 169) / 13) * 14)) + ((((((int)threadIdx.z) * 43) + (((int)threadIdx.x) * 7)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) % 13)))];\n        }\n      }\n    }\n    #pragma unroll\n    for (int ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1 < 5; ++ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) {\n      if (((((int)threadIdx.z) * 4) + (((((int)threadIdx.x) * 5) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) >> 3)) < 128) {\n        if ((((((int)threadIdx.z) * 32) + (((int)threadIdx.x) * 5)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) < 1024) {\n          if (((((int)threadIdx.x) * 5) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) < 32) {\n            placeholder_shared[((((((int)threadIdx.z) * 32) + (((int)threadIdx.x) * 5)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1))] = placeholder1[(((((((((int)blockIdx.z) & 15) * 131072) + (((int)threadIdx.z) * 4096)) + ((((((int)threadIdx.x) * 5) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) >> 3) * 1024)) + (rc_outer * 8)) + (((((int)threadIdx.x) * 5) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) & 7)))];\n          }\n        }\n      }\n    }\n    __syncthreads();\n    #pragma unroll\n    for (int rc_inner = 0; rc_inner < 8; ++rc_inner) {\n      #pragma unroll\n      for (int ff = 0; ff < 2; ++ff) {\n        #pragma unroll\n        for (int yy = 0; yy < 7; ++yy) {\n          compute[(((ff * 7) + yy))] = (compute[(((ff * 7) + yy))] + (pad_temp_shared[((((rc_inner * 169) + (yy * 26)) + (((int)threadIdx.x) * 2)))] * placeholder_shared[((((((int)threadIdx.z) * 16) + (ff * 8)) + rc_inner))]));\n          compute[((((ff * 7) + yy) + 14))] = (compute[((((ff * 7) + yy) + 14))] + (pad_temp_shared[((((rc_inner * 169) + (yy * 26)) + (((int)threadIdx.x) * 2)))] * placeholder_shared[(((((((int)threadIdx.z) * 16) + (ff * 8)) + rc_inner) + 512))]));\n        }\n      }\n    }\n  }\n  #pragma unroll\n  for (int ax1_inner_inner_inner = 0; ax1_inner_inner_inner < 2; ++ax1_inner_inner_inner) {\n    #pragma unroll\n    for (int ax2_inner_inner_inner = 0; ax2_inner_inner_inner < 7; ++ax2_inner_inner_inner) {\n      T_add[((((((((int)blockIdx.z) * 6272) + (((int)threadIdx.z) * 98)) + (ax1_inner_inner_inner * 49)) + (ax2_inner_inner_inner * 7)) + ((int)threadIdx.x)))] = (compute[(((ax1_inner_inner_inner * 7) + ax2_inner_inner_inner))] + input2[((((((((int)blockIdx.z) * 6272) + (((int)threadIdx.z) * 98)) + (ax1_inner_inner_inner * 49)) + (ax2_inner_inner_inner * 7)) + ((int)threadIdx.x)))]);\n      T_add[(((((((((int)blockIdx.z) * 6272) + (((int)threadIdx.z) * 98)) + (ax1_inner_inner_inner * 49)) + (ax2_inner_inner_inner * 7)) + ((int)threadIdx.x)) + 3136))] = (compute[((((ax1_inner_inner_inner * 7) + ax2_inner_inner_inner) + 14))] + input2[(((((((((int)blockIdx.z) * 6272) + (((int)threadIdx.z) * 98)) + (ax1_inner_inner_inner * 49)) + (ax2_inner_inner_inner * 7)) + ((int)threadIdx.x)) + 3136))]);\n    }\n  }\n}\n", "gridDim": [1, 1, 2048], "blockDim": [7, 1, 32]}