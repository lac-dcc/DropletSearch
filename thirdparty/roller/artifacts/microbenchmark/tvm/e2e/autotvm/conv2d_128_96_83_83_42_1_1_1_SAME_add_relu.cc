//1_83_128_83_1_1
//128_96_83_83_42_1_1_SAME
//dim3 grid(1, 83, 128);
//dim3 block(83, 1, 1);

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(83) conv_kernel0(float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ compute, float* __restrict__ input2) {
  float compute1[42];
  __shared__ float pad_temp_shared[249];
  __shared__ float placeholder_shared[126];
  compute1[(0)] = 0.000000e+00f;
  compute1[(3)] = 0.000000e+00f;
  compute1[(6)] = 0.000000e+00f;
  compute1[(9)] = 0.000000e+00f;
  compute1[(12)] = 0.000000e+00f;
  compute1[(15)] = 0.000000e+00f;
  compute1[(18)] = 0.000000e+00f;
  compute1[(21)] = 0.000000e+00f;
  compute1[(24)] = 0.000000e+00f;
  compute1[(27)] = 0.000000e+00f;
  compute1[(30)] = 0.000000e+00f;
  compute1[(33)] = 0.000000e+00f;
  compute1[(36)] = 0.000000e+00f;
  compute1[(39)] = 0.000000e+00f;
  compute1[(1)] = 0.000000e+00f;
  compute1[(4)] = 0.000000e+00f;
  compute1[(7)] = 0.000000e+00f;
  compute1[(10)] = 0.000000e+00f;
  compute1[(13)] = 0.000000e+00f;
  compute1[(16)] = 0.000000e+00f;
  compute1[(19)] = 0.000000e+00f;
  compute1[(22)] = 0.000000e+00f;
  compute1[(25)] = 0.000000e+00f;
  compute1[(28)] = 0.000000e+00f;
  compute1[(31)] = 0.000000e+00f;
  compute1[(34)] = 0.000000e+00f;
  compute1[(37)] = 0.000000e+00f;
  compute1[(40)] = 0.000000e+00f;
  compute1[(2)] = 0.000000e+00f;
  compute1[(5)] = 0.000000e+00f;
  compute1[(8)] = 0.000000e+00f;
  compute1[(11)] = 0.000000e+00f;
  compute1[(14)] = 0.000000e+00f;
  compute1[(17)] = 0.000000e+00f;
  compute1[(20)] = 0.000000e+00f;
  compute1[(23)] = 0.000000e+00f;
  compute1[(26)] = 0.000000e+00f;
  compute1[(29)] = 0.000000e+00f;
  compute1[(32)] = 0.000000e+00f;
  compute1[(35)] = 0.000000e+00f;
  compute1[(38)] = 0.000000e+00f;
  compute1[(41)] = 0.000000e+00f;
  for (int rc_outer = 0; rc_outer < 32; ++rc_outer) {
    __syncthreads();
    pad_temp_shared[((((int)threadIdx.x) * 3))] = placeholder[((((((((int)blockIdx.z) * 661344) + (rc_outer * 20667)) + (((((int)threadIdx.x) * 3) / 83) * 6889)) + (((int)blockIdx.y) * 83)) + ((((int)threadIdx.x) * 3) % 83)))];
    pad_temp_shared[(((((int)threadIdx.x) * 3) + 1))] = placeholder[((((((((int)blockIdx.z) * 661344) + (rc_outer * 20667)) + ((((((int)threadIdx.x) * 3) + 1) / 83) * 6889)) + (((int)blockIdx.y) * 83)) + (((((int)threadIdx.x) * 3) + 1) % 83)))];
    pad_temp_shared[(((((int)threadIdx.x) * 3) + 2))] = placeholder[((((((((int)blockIdx.z) * 661344) + (rc_outer * 20667)) + ((((((int)threadIdx.x) * 3) + 2) / 83) * 6889)) + (((int)blockIdx.y) * 83)) + (((((int)threadIdx.x) * 3) + 2) % 83)))];
    if (((int)threadIdx.x) < 63) {
      placeholder_shared[((((int)threadIdx.x) * 2))] = placeholder1[((((((((int)threadIdx.x) * 2) / 3) * 96) + (rc_outer * 3)) + ((((int)threadIdx.x) * 2) % 3)))];
    }
    if (((int)threadIdx.x) < 63) {
      placeholder_shared[(((((int)threadIdx.x) * 2) + 1))] = placeholder1[(((((((((int)threadIdx.x) * 2) + 1) / 3) * 96) + (rc_outer * 3)) + (((((int)threadIdx.x) * 2) + 1) % 3)))];
    }
    __syncthreads();
    compute1[(0)] = (compute1[(0)] + (pad_temp_shared[(((int)threadIdx.x))] * placeholder_shared[(0)]));
    compute1[(3)] = (compute1[(3)] + (pad_temp_shared[(((int)threadIdx.x))] * placeholder_shared[(9)]));
    compute1[(6)] = (compute1[(6)] + (pad_temp_shared[(((int)threadIdx.x))] * placeholder_shared[(18)]));
    compute1[(9)] = (compute1[(9)] + (pad_temp_shared[(((int)threadIdx.x))] * placeholder_shared[(27)]));
    compute1[(12)] = (compute1[(12)] + (pad_temp_shared[(((int)threadIdx.x))] * placeholder_shared[(36)]));
    compute1[(15)] = (compute1[(15)] + (pad_temp_shared[(((int)threadIdx.x))] * placeholder_shared[(45)]));
    compute1[(18)] = (compute1[(18)] + (pad_temp_shared[(((int)threadIdx.x))] * placeholder_shared[(54)]));
    compute1[(21)] = (compute1[(21)] + (pad_temp_shared[(((int)threadIdx.x))] * placeholder_shared[(63)]));
    compute1[(24)] = (compute1[(24)] + (pad_temp_shared[(((int)threadIdx.x))] * placeholder_shared[(72)]));
    compute1[(27)] = (compute1[(27)] + (pad_temp_shared[(((int)threadIdx.x))] * placeholder_shared[(81)]));
    compute1[(30)] = (compute1[(30)] + (pad_temp_shared[(((int)threadIdx.x))] * placeholder_shared[(90)]));
    compute1[(33)] = (compute1[(33)] + (pad_temp_shared[(((int)threadIdx.x))] * placeholder_shared[(99)]));
    compute1[(36)] = (compute1[(36)] + (pad_temp_shared[(((int)threadIdx.x))] * placeholder_shared[(108)]));
    compute1[(39)] = (compute1[(39)] + (pad_temp_shared[(((int)threadIdx.x))] * placeholder_shared[(117)]));
    compute1[(1)] = (compute1[(1)] + (pad_temp_shared[(((int)threadIdx.x))] * placeholder_shared[(3)]));
    compute1[(4)] = (compute1[(4)] + (pad_temp_shared[(((int)threadIdx.x))] * placeholder_shared[(12)]));
    compute1[(7)] = (compute1[(7)] + (pad_temp_shared[(((int)threadIdx.x))] * placeholder_shared[(21)]));
    compute1[(10)] = (compute1[(10)] + (pad_temp_shared[(((int)threadIdx.x))] * placeholder_shared[(30)]));
    compute1[(13)] = (compute1[(13)] + (pad_temp_shared[(((int)threadIdx.x))] * placeholder_shared[(39)]));
    compute1[(16)] = (compute1[(16)] + (pad_temp_shared[(((int)threadIdx.x))] * placeholder_shared[(48)]));
    compute1[(19)] = (compute1[(19)] + (pad_temp_shared[(((int)threadIdx.x))] * placeholder_shared[(57)]));
    compute1[(22)] = (compute1[(22)] + (pad_temp_shared[(((int)threadIdx.x))] * placeholder_shared[(66)]));
    compute1[(25)] = (compute1[(25)] + (pad_temp_shared[(((int)threadIdx.x))] * placeholder_shared[(75)]));
    compute1[(28)] = (compute1[(28)] + (pad_temp_shared[(((int)threadIdx.x))] * placeholder_shared[(84)]));
    compute1[(31)] = (compute1[(31)] + (pad_temp_shared[(((int)threadIdx.x))] * placeholder_shared[(93)]));
    compute1[(34)] = (compute1[(34)] + (pad_temp_shared[(((int)threadIdx.x))] * placeholder_shared[(102)]));
    compute1[(37)] = (compute1[(37)] + (pad_temp_shared[(((int)threadIdx.x))] * placeholder_shared[(111)]));
    compute1[(40)] = (compute1[(40)] + (pad_temp_shared[(((int)threadIdx.x))] * placeholder_shared[(120)]));
    compute1[(2)] = (compute1[(2)] + (pad_temp_shared[(((int)threadIdx.x))] * placeholder_shared[(6)]));
    compute1[(5)] = (compute1[(5)] + (pad_temp_shared[(((int)threadIdx.x))] * placeholder_shared[(15)]));
    compute1[(8)] = (compute1[(8)] + (pad_temp_shared[(((int)threadIdx.x))] * placeholder_shared[(24)]));
    compute1[(11)] = (compute1[(11)] + (pad_temp_shared[(((int)threadIdx.x))] * placeholder_shared[(33)]));
    compute1[(14)] = (compute1[(14)] + (pad_temp_shared[(((int)threadIdx.x))] * placeholder_shared[(42)]));
    compute1[(17)] = (compute1[(17)] + (pad_temp_shared[(((int)threadIdx.x))] * placeholder_shared[(51)]));
    compute1[(20)] = (compute1[(20)] + (pad_temp_shared[(((int)threadIdx.x))] * placeholder_shared[(60)]));
    compute1[(23)] = (compute1[(23)] + (pad_temp_shared[(((int)threadIdx.x))] * placeholder_shared[(69)]));
    compute1[(26)] = (compute1[(26)] + (pad_temp_shared[(((int)threadIdx.x))] * placeholder_shared[(78)]));
    compute1[(29)] = (compute1[(29)] + (pad_temp_shared[(((int)threadIdx.x))] * placeholder_shared[(87)]));
    compute1[(32)] = (compute1[(32)] + (pad_temp_shared[(((int)threadIdx.x))] * placeholder_shared[(96)]));
    compute1[(35)] = (compute1[(35)] + (pad_temp_shared[(((int)threadIdx.x))] * placeholder_shared[(105)]));
    compute1[(38)] = (compute1[(38)] + (pad_temp_shared[(((int)threadIdx.x))] * placeholder_shared[(114)]));
    compute1[(41)] = (compute1[(41)] + (pad_temp_shared[(((int)threadIdx.x))] * placeholder_shared[(123)]));
    compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((int)threadIdx.x) + 83))] * placeholder_shared[(1)]));
    compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((int)threadIdx.x) + 83))] * placeholder_shared[(10)]));
    compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((int)threadIdx.x) + 83))] * placeholder_shared[(19)]));
    compute1[(9)] = (compute1[(9)] + (pad_temp_shared[((((int)threadIdx.x) + 83))] * placeholder_shared[(28)]));
    compute1[(12)] = (compute1[(12)] + (pad_temp_shared[((((int)threadIdx.x) + 83))] * placeholder_shared[(37)]));
    compute1[(15)] = (compute1[(15)] + (pad_temp_shared[((((int)threadIdx.x) + 83))] * placeholder_shared[(46)]));
    compute1[(18)] = (compute1[(18)] + (pad_temp_shared[((((int)threadIdx.x) + 83))] * placeholder_shared[(55)]));
    compute1[(21)] = (compute1[(21)] + (pad_temp_shared[((((int)threadIdx.x) + 83))] * placeholder_shared[(64)]));
    compute1[(24)] = (compute1[(24)] + (pad_temp_shared[((((int)threadIdx.x) + 83))] * placeholder_shared[(73)]));
    compute1[(27)] = (compute1[(27)] + (pad_temp_shared[((((int)threadIdx.x) + 83))] * placeholder_shared[(82)]));
    compute1[(30)] = (compute1[(30)] + (pad_temp_shared[((((int)threadIdx.x) + 83))] * placeholder_shared[(91)]));
    compute1[(33)] = (compute1[(33)] + (pad_temp_shared[((((int)threadIdx.x) + 83))] * placeholder_shared[(100)]));
    compute1[(36)] = (compute1[(36)] + (pad_temp_shared[((((int)threadIdx.x) + 83))] * placeholder_shared[(109)]));
    compute1[(39)] = (compute1[(39)] + (pad_temp_shared[((((int)threadIdx.x) + 83))] * placeholder_shared[(118)]));
    compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((int)threadIdx.x) + 83))] * placeholder_shared[(4)]));
    compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((int)threadIdx.x) + 83))] * placeholder_shared[(13)]));
    compute1[(7)] = (compute1[(7)] + (pad_temp_shared[((((int)threadIdx.x) + 83))] * placeholder_shared[(22)]));
    compute1[(10)] = (compute1[(10)] + (pad_temp_shared[((((int)threadIdx.x) + 83))] * placeholder_shared[(31)]));
    compute1[(13)] = (compute1[(13)] + (pad_temp_shared[((((int)threadIdx.x) + 83))] * placeholder_shared[(40)]));
    compute1[(16)] = (compute1[(16)] + (pad_temp_shared[((((int)threadIdx.x) + 83))] * placeholder_shared[(49)]));
    compute1[(19)] = (compute1[(19)] + (pad_temp_shared[((((int)threadIdx.x) + 83))] * placeholder_shared[(58)]));
    compute1[(22)] = (compute1[(22)] + (pad_temp_shared[((((int)threadIdx.x) + 83))] * placeholder_shared[(67)]));
    compute1[(25)] = (compute1[(25)] + (pad_temp_shared[((((int)threadIdx.x) + 83))] * placeholder_shared[(76)]));
    compute1[(28)] = (compute1[(28)] + (pad_temp_shared[((((int)threadIdx.x) + 83))] * placeholder_shared[(85)]));
    compute1[(31)] = (compute1[(31)] + (pad_temp_shared[((((int)threadIdx.x) + 83))] * placeholder_shared[(94)]));
    compute1[(34)] = (compute1[(34)] + (pad_temp_shared[((((int)threadIdx.x) + 83))] * placeholder_shared[(103)]));
    compute1[(37)] = (compute1[(37)] + (pad_temp_shared[((((int)threadIdx.x) + 83))] * placeholder_shared[(112)]));
    compute1[(40)] = (compute1[(40)] + (pad_temp_shared[((((int)threadIdx.x) + 83))] * placeholder_shared[(121)]));
    compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((int)threadIdx.x) + 83))] * placeholder_shared[(7)]));
    compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((int)threadIdx.x) + 83))] * placeholder_shared[(16)]));
    compute1[(8)] = (compute1[(8)] + (pad_temp_shared[((((int)threadIdx.x) + 83))] * placeholder_shared[(25)]));
    compute1[(11)] = (compute1[(11)] + (pad_temp_shared[((((int)threadIdx.x) + 83))] * placeholder_shared[(34)]));
    compute1[(14)] = (compute1[(14)] + (pad_temp_shared[((((int)threadIdx.x) + 83))] * placeholder_shared[(43)]));
    compute1[(17)] = (compute1[(17)] + (pad_temp_shared[((((int)threadIdx.x) + 83))] * placeholder_shared[(52)]));
    compute1[(20)] = (compute1[(20)] + (pad_temp_shared[((((int)threadIdx.x) + 83))] * placeholder_shared[(61)]));
    compute1[(23)] = (compute1[(23)] + (pad_temp_shared[((((int)threadIdx.x) + 83))] * placeholder_shared[(70)]));
    compute1[(26)] = (compute1[(26)] + (pad_temp_shared[((((int)threadIdx.x) + 83))] * placeholder_shared[(79)]));
    compute1[(29)] = (compute1[(29)] + (pad_temp_shared[((((int)threadIdx.x) + 83))] * placeholder_shared[(88)]));
    compute1[(32)] = (compute1[(32)] + (pad_temp_shared[((((int)threadIdx.x) + 83))] * placeholder_shared[(97)]));
    compute1[(35)] = (compute1[(35)] + (pad_temp_shared[((((int)threadIdx.x) + 83))] * placeholder_shared[(106)]));
    compute1[(38)] = (compute1[(38)] + (pad_temp_shared[((((int)threadIdx.x) + 83))] * placeholder_shared[(115)]));
    compute1[(41)] = (compute1[(41)] + (pad_temp_shared[((((int)threadIdx.x) + 83))] * placeholder_shared[(124)]));
    compute1[(0)] = (compute1[(0)] + (pad_temp_shared[((((int)threadIdx.x) + 166))] * placeholder_shared[(2)]));
    compute1[(3)] = (compute1[(3)] + (pad_temp_shared[((((int)threadIdx.x) + 166))] * placeholder_shared[(11)]));
    compute1[(6)] = (compute1[(6)] + (pad_temp_shared[((((int)threadIdx.x) + 166))] * placeholder_shared[(20)]));
    compute1[(9)] = (compute1[(9)] + (pad_temp_shared[((((int)threadIdx.x) + 166))] * placeholder_shared[(29)]));
    compute1[(12)] = (compute1[(12)] + (pad_temp_shared[((((int)threadIdx.x) + 166))] * placeholder_shared[(38)]));
    compute1[(15)] = (compute1[(15)] + (pad_temp_shared[((((int)threadIdx.x) + 166))] * placeholder_shared[(47)]));
    compute1[(18)] = (compute1[(18)] + (pad_temp_shared[((((int)threadIdx.x) + 166))] * placeholder_shared[(56)]));
    compute1[(21)] = (compute1[(21)] + (pad_temp_shared[((((int)threadIdx.x) + 166))] * placeholder_shared[(65)]));
    compute1[(24)] = (compute1[(24)] + (pad_temp_shared[((((int)threadIdx.x) + 166))] * placeholder_shared[(74)]));
    compute1[(27)] = (compute1[(27)] + (pad_temp_shared[((((int)threadIdx.x) + 166))] * placeholder_shared[(83)]));
    compute1[(30)] = (compute1[(30)] + (pad_temp_shared[((((int)threadIdx.x) + 166))] * placeholder_shared[(92)]));
    compute1[(33)] = (compute1[(33)] + (pad_temp_shared[((((int)threadIdx.x) + 166))] * placeholder_shared[(101)]));
    compute1[(36)] = (compute1[(36)] + (pad_temp_shared[((((int)threadIdx.x) + 166))] * placeholder_shared[(110)]));
    compute1[(39)] = (compute1[(39)] + (pad_temp_shared[((((int)threadIdx.x) + 166))] * placeholder_shared[(119)]));
    compute1[(1)] = (compute1[(1)] + (pad_temp_shared[((((int)threadIdx.x) + 166))] * placeholder_shared[(5)]));
    compute1[(4)] = (compute1[(4)] + (pad_temp_shared[((((int)threadIdx.x) + 166))] * placeholder_shared[(14)]));
    compute1[(7)] = (compute1[(7)] + (pad_temp_shared[((((int)threadIdx.x) + 166))] * placeholder_shared[(23)]));
    compute1[(10)] = (compute1[(10)] + (pad_temp_shared[((((int)threadIdx.x) + 166))] * placeholder_shared[(32)]));
    compute1[(13)] = (compute1[(13)] + (pad_temp_shared[((((int)threadIdx.x) + 166))] * placeholder_shared[(41)]));
    compute1[(16)] = (compute1[(16)] + (pad_temp_shared[((((int)threadIdx.x) + 166))] * placeholder_shared[(50)]));
    compute1[(19)] = (compute1[(19)] + (pad_temp_shared[((((int)threadIdx.x) + 166))] * placeholder_shared[(59)]));
    compute1[(22)] = (compute1[(22)] + (pad_temp_shared[((((int)threadIdx.x) + 166))] * placeholder_shared[(68)]));
    compute1[(25)] = (compute1[(25)] + (pad_temp_shared[((((int)threadIdx.x) + 166))] * placeholder_shared[(77)]));
    compute1[(28)] = (compute1[(28)] + (pad_temp_shared[((((int)threadIdx.x) + 166))] * placeholder_shared[(86)]));
    compute1[(31)] = (compute1[(31)] + (pad_temp_shared[((((int)threadIdx.x) + 166))] * placeholder_shared[(95)]));
    compute1[(34)] = (compute1[(34)] + (pad_temp_shared[((((int)threadIdx.x) + 166))] * placeholder_shared[(104)]));
    compute1[(37)] = (compute1[(37)] + (pad_temp_shared[((((int)threadIdx.x) + 166))] * placeholder_shared[(113)]));
    compute1[(40)] = (compute1[(40)] + (pad_temp_shared[((((int)threadIdx.x) + 166))] * placeholder_shared[(122)]));
    compute1[(2)] = (compute1[(2)] + (pad_temp_shared[((((int)threadIdx.x) + 166))] * placeholder_shared[(8)]));
    compute1[(5)] = (compute1[(5)] + (pad_temp_shared[((((int)threadIdx.x) + 166))] * placeholder_shared[(17)]));
    compute1[(8)] = (compute1[(8)] + (pad_temp_shared[((((int)threadIdx.x) + 166))] * placeholder_shared[(26)]));
    compute1[(11)] = (compute1[(11)] + (pad_temp_shared[((((int)threadIdx.x) + 166))] * placeholder_shared[(35)]));
    compute1[(14)] = (compute1[(14)] + (pad_temp_shared[((((int)threadIdx.x) + 166))] * placeholder_shared[(44)]));
    compute1[(17)] = (compute1[(17)] + (pad_temp_shared[((((int)threadIdx.x) + 166))] * placeholder_shared[(53)]));
    compute1[(20)] = (compute1[(20)] + (pad_temp_shared[((((int)threadIdx.x) + 166))] * placeholder_shared[(62)]));
    compute1[(23)] = (compute1[(23)] + (pad_temp_shared[((((int)threadIdx.x) + 166))] * placeholder_shared[(71)]));
    compute1[(26)] = (compute1[(26)] + (pad_temp_shared[((((int)threadIdx.x) + 166))] * placeholder_shared[(80)]));
    compute1[(29)] = (compute1[(29)] + (pad_temp_shared[((((int)threadIdx.x) + 166))] * placeholder_shared[(89)]));
    compute1[(32)] = (compute1[(32)] + (pad_temp_shared[((((int)threadIdx.x) + 166))] * placeholder_shared[(98)]));
    compute1[(35)] = (compute1[(35)] + (pad_temp_shared[((((int)threadIdx.x) + 166))] * placeholder_shared[(107)]));
    compute1[(38)] = (compute1[(38)] + (pad_temp_shared[((((int)threadIdx.x) + 166))] * placeholder_shared[(116)]));
    compute1[(41)] = (compute1[(41)] + (pad_temp_shared[((((int)threadIdx.x) + 166))] * placeholder_shared[(125)]));
  }
  compute[((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)))] = max((compute1[(0)] + input2[((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)))]), 0.000000e+00f);
  compute[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 20667))] = max((compute1[(3)] + input2[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 20667))]), 0.000000e+00f);
  compute[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 41334))] = max((compute1[(6)] + input2[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 41334))]), 0.000000e+00f);
  compute[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 62001))] = max((compute1[(9)] + input2[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 62001))]), 0.000000e+00f);
  compute[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 82668))] = max((compute1[(12)] + input2[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 82668))]), 0.000000e+00f);
  compute[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 103335))] = max((compute1[(15)] + input2[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 103335))]), 0.000000e+00f);
  compute[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 124002))] = max((compute1[(18)] + input2[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 124002))]), 0.000000e+00f);
  compute[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 144669))] = max((compute1[(21)] + input2[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 144669))]), 0.000000e+00f);
  compute[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 165336))] = max((compute1[(24)] + input2[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 165336))]), 0.000000e+00f);
  compute[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 186003))] = max((compute1[(27)] + input2[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 186003))]), 0.000000e+00f);
  compute[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 206670))] = max((compute1[(30)] + input2[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 206670))]), 0.000000e+00f);
  compute[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 227337))] = max((compute1[(33)] + input2[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 227337))]), 0.000000e+00f);
  compute[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 248004))] = max((compute1[(36)] + input2[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 248004))]), 0.000000e+00f);
  compute[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 268671))] = max((compute1[(39)] + input2[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 268671))]), 0.000000e+00f);
  compute[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 6889))] = max((compute1[(1)] + input2[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 6889))]), 0.000000e+00f);
  compute[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 27556))] = max((compute1[(4)] + input2[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 27556))]), 0.000000e+00f);
  compute[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 48223))] = max((compute1[(7)] + input2[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 48223))]), 0.000000e+00f);
  compute[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 68890))] = max((compute1[(10)] + input2[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 68890))]), 0.000000e+00f);
  compute[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 89557))] = max((compute1[(13)] + input2[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 89557))]), 0.000000e+00f);
  compute[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 110224))] = max((compute1[(16)] + input2[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 110224))]), 0.000000e+00f);
  compute[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 130891))] = max((compute1[(19)] + input2[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 130891))]), 0.000000e+00f);
  compute[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 151558))] = max((compute1[(22)] + input2[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 151558))]), 0.000000e+00f);
  compute[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 172225))] = max((compute1[(25)] + input2[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 172225))]), 0.000000e+00f);
  compute[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 192892))] = max((compute1[(28)] + input2[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 192892))]), 0.000000e+00f);
  compute[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 213559))] = max((compute1[(31)] + input2[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 213559))]), 0.000000e+00f);
  compute[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 234226))] = max((compute1[(34)] + input2[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 234226))]), 0.000000e+00f);
  compute[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 254893))] = max((compute1[(37)] + input2[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 254893))]), 0.000000e+00f);
  compute[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 275560))] = max((compute1[(40)] + input2[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 275560))]), 0.000000e+00f);
  compute[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 13778))] = max((compute1[(2)] + input2[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 13778))]), 0.000000e+00f);
  compute[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 34445))] = max((compute1[(5)] + input2[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 34445))]), 0.000000e+00f);
  compute[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 55112))] = max((compute1[(8)] + input2[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 55112))]), 0.000000e+00f);
  compute[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 75779))] = max((compute1[(11)] + input2[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 75779))]), 0.000000e+00f);
  compute[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 96446))] = max((compute1[(14)] + input2[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 96446))]), 0.000000e+00f);
  compute[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 117113))] = max((compute1[(17)] + input2[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 117113))]), 0.000000e+00f);
  compute[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 137780))] = max((compute1[(20)] + input2[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 137780))]), 0.000000e+00f);
  compute[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 158447))] = max((compute1[(23)] + input2[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 158447))]), 0.000000e+00f);
  compute[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 179114))] = max((compute1[(26)] + input2[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 179114))]), 0.000000e+00f);
  compute[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 199781))] = max((compute1[(29)] + input2[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 199781))]), 0.000000e+00f);
  compute[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 220448))] = max((compute1[(32)] + input2[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 220448))]), 0.000000e+00f);
  compute[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 241115))] = max((compute1[(35)] + input2[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 241115))]), 0.000000e+00f);
  compute[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 261782))] = max((compute1[(38)] + input2[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 261782))]), 0.000000e+00f);
  compute[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 282449))] = max((compute1[(41)] + input2[(((((((int)blockIdx.z) * 289338) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 282449))]), 0.000000e+00f);
}

