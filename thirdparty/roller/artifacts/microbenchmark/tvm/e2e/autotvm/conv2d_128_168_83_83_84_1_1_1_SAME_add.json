{"parameters": {"input_shape": [128, 168, 83, 83], "filter_shape": [84, 168, 1, 1], "output_shape": [128, 84, 83, 83], "window_movement_strides": [1, 1], "padding_below_diff": [0, 0], "window_dilation_strides": [1, 1]}, "op_type": "Fused_Convolution_Add", "tvm_func_name": "conv2d_128_168_83_83_84_1_1_1_SAME_add", "code": "extern \"C\" __global__ void conv2d_128_168_83_83_84_1_1_1_SAME_add(float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_add, float* __restrict__ input2) {\n  float compute[28];\n  __shared__ float pad_temp_shared[498];\n  __shared__ float placeholder_shared[504];\n  #pragma unroll\n  for (int ff_init = 0; ff_init < 4; ++ff_init) {\n    compute[(ff_init)] = 0.000000e+00f;\n    compute[((ff_init + 4))] = 0.000000e+00f;\n    compute[((ff_init + 8))] = 0.000000e+00f;\n    compute[((ff_init + 12))] = 0.000000e+00f;\n    compute[((ff_init + 16))] = 0.000000e+00f;\n    compute[((ff_init + 20))] = 0.000000e+00f;\n    compute[((ff_init + 24))] = 0.000000e+00f;\n  }\n  for (int rc_outer = 0; rc_outer < 28; ++rc_outer) {\n    __syncthreads();\n    #pragma unroll\n    for (int ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner = 0; ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner < 2; ++ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) {\n      pad_temp_shared[((((((int)threadIdx.z) * 166) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner))] = placeholder[(((((((((int)blockIdx.z) * 1157352) + (rc_outer * 41334)) + (((int)threadIdx.z) * 13778)) + ((((((int)threadIdx.x) * 2) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) / 83) * 6889)) + (((int)blockIdx.y) * 83)) + (((((int)threadIdx.x) * 2) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) % 83)))];\n    }\n    #pragma unroll\n    for (int ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1 < 3; ++ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) {\n      if (((((int)threadIdx.z) * 28) + (((((int)threadIdx.x) * 3) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) / 6)) < 84) {\n        if ((((((int)threadIdx.z) * 168) + (((int)threadIdx.x) * 3)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) < 504) {\n          if (((((int)threadIdx.x) * 3) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) < 168) {\n            placeholder_shared[((((((int)threadIdx.z) * 168) + (((int)threadIdx.x) * 3)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1))] = placeholder1[(((((((int)threadIdx.z) * 4704) + ((((((int)threadIdx.x) * 3) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) / 6) * 168)) + (rc_outer * 6)) + (((((int)threadIdx.x) * 3) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) % 6)))];\n          }\n        }\n      }\n    }\n    __syncthreads();\n    #pragma unroll\n    for (int rc_inner = 0; rc_inner < 6; ++rc_inner) {\n      #pragma unroll\n      for (int ff = 0; ff < 4; ++ff) {\n        compute[(ff)] = (compute[(ff)] + (pad_temp_shared[(((rc_inner * 83) + ((int)threadIdx.x)))] * placeholder_shared[((((((int)threadIdx.z) * 24) + (ff * 6)) + rc_inner))]));\n        compute[((ff + 4))] = (compute[((ff + 4))] + (pad_temp_shared[(((rc_inner * 83) + ((int)threadIdx.x)))] * placeholder_shared[(((((((int)threadIdx.z) * 24) + (ff * 6)) + rc_inner) + 72))]));\n        compute[((ff + 8))] = (compute[((ff + 8))] + (pad_temp_shared[(((rc_inner * 83) + ((int)threadIdx.x)))] * placeholder_shared[(((((((int)threadIdx.z) * 24) + (ff * 6)) + rc_inner) + 144))]));\n        compute[((ff + 12))] = (compute[((ff + 12))] + (pad_temp_shared[(((rc_inner * 83) + ((int)threadIdx.x)))] * placeholder_shared[(((((((int)threadIdx.z) * 24) + (ff * 6)) + rc_inner) + 216))]));\n        compute[((ff + 16))] = (compute[((ff + 16))] + (pad_temp_shared[(((rc_inner * 83) + ((int)threadIdx.x)))] * placeholder_shared[(((((((int)threadIdx.z) * 24) + (ff * 6)) + rc_inner) + 288))]));\n        compute[((ff + 20))] = (compute[((ff + 20))] + (pad_temp_shared[(((rc_inner * 83) + ((int)threadIdx.x)))] * placeholder_shared[(((((((int)threadIdx.z) * 24) + (ff * 6)) + rc_inner) + 360))]));\n        compute[((ff + 24))] = (compute[((ff + 24))] + (pad_temp_shared[(((rc_inner * 83) + ((int)threadIdx.x)))] * placeholder_shared[(((((((int)threadIdx.z) * 24) + (ff * 6)) + rc_inner) + 432))]));\n      }\n    }\n  }\n  #pragma unroll\n  for (int ax1_inner_inner_inner = 0; ax1_inner_inner_inner < 4; ++ax1_inner_inner_inner) {\n    T_add[((((((((int)blockIdx.z) * 578676) + (((int)threadIdx.z) * 27556)) + (ax1_inner_inner_inner * 6889)) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)))] = (compute[(ax1_inner_inner_inner)] + input2[((((((((int)blockIdx.z) * 578676) + (((int)threadIdx.z) * 27556)) + (ax1_inner_inner_inner * 6889)) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)))]);\n    T_add[(((((((((int)blockIdx.z) * 578676) + (((int)threadIdx.z) * 27556)) + (ax1_inner_inner_inner * 6889)) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 82668))] = (compute[((ax1_inner_inner_inner + 4))] + input2[(((((((((int)blockIdx.z) * 578676) + (((int)threadIdx.z) * 27556)) + (ax1_inner_inner_inner * 6889)) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 82668))]);\n    T_add[(((((((((int)blockIdx.z) * 578676) + (((int)threadIdx.z) * 27556)) + (ax1_inner_inner_inner * 6889)) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 165336))] = (compute[((ax1_inner_inner_inner + 8))] + input2[(((((((((int)blockIdx.z) * 578676) + (((int)threadIdx.z) * 27556)) + (ax1_inner_inner_inner * 6889)) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 165336))]);\n    T_add[(((((((((int)blockIdx.z) * 578676) + (((int)threadIdx.z) * 27556)) + (ax1_inner_inner_inner * 6889)) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 248004))] = (compute[((ax1_inner_inner_inner + 12))] + input2[(((((((((int)blockIdx.z) * 578676) + (((int)threadIdx.z) * 27556)) + (ax1_inner_inner_inner * 6889)) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 248004))]);\n    T_add[(((((((((int)blockIdx.z) * 578676) + (((int)threadIdx.z) * 27556)) + (ax1_inner_inner_inner * 6889)) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 330672))] = (compute[((ax1_inner_inner_inner + 16))] + input2[(((((((((int)blockIdx.z) * 578676) + (((int)threadIdx.z) * 27556)) + (ax1_inner_inner_inner * 6889)) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 330672))]);\n    T_add[(((((((((int)blockIdx.z) * 578676) + (((int)threadIdx.z) * 27556)) + (ax1_inner_inner_inner * 6889)) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 413340))] = (compute[((ax1_inner_inner_inner + 20))] + input2[(((((((((int)blockIdx.z) * 578676) + (((int)threadIdx.z) * 27556)) + (ax1_inner_inner_inner * 6889)) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 413340))]);\n    T_add[(((((((((int)blockIdx.z) * 578676) + (((int)threadIdx.z) * 27556)) + (ax1_inner_inner_inner * 6889)) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 496008))] = (compute[((ax1_inner_inner_inner + 24))] + input2[(((((((((int)blockIdx.z) * 578676) + (((int)threadIdx.z) * 27556)) + (ax1_inner_inner_inner * 6889)) + (((int)blockIdx.y) * 83)) + ((int)threadIdx.x)) + 496008))]);\n  }\n}\n", "gridDim": [1, 83, 128], "blockDim": [83, 1, 3]}