{"parameters": {"input_shape": [128, 4032, 11, 11], "filter_shape": [672, 4032, 1, 1], "output_shape": [128, 672, 11, 11], "window_movement_strides": [1, 1], "padding_below_diff": [0, 0], "window_dilation_strides": [1, 1]}, "op_type": "Fused_Convolution_Add", "tvm_func_name": "conv2d_128_4032_11_11_672_1_1_1_SAME_add", "code": "extern \"C\" __global__ void conv2d_128_4032_11_11_672_1_1_1_SAME_add(float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_add, float* __restrict__ input2) {\n  float compute[44];\n  __shared__ float pad_temp_shared[1936];\n  __shared__ float placeholder_shared[1792];\n  #pragma unroll\n  for (int yy_init = 0; yy_init < 11; ++yy_init) {\n    compute[(yy_init)] = 0.000000e+00f;\n    compute[((yy_init + 11))] = 0.000000e+00f;\n    compute[((yy_init + 22))] = 0.000000e+00f;\n    compute[((yy_init + 33))] = 0.000000e+00f;\n  }\n  for (int rc_outer = 0; rc_outer < 252; ++rc_outer) {\n    __syncthreads();\n    #pragma unroll\n    for (int ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner = 0; ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner < 7; ++ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) {\n      if ((((((int)threadIdx.z) * 70) + (((int)threadIdx.x) * 7)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) < 1936) {\n        if (((((int)threadIdx.x) * 7) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) < 70) {\n          pad_temp_shared[((((((int)threadIdx.z) * 70) + (((int)threadIdx.x) * 7)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner))] = placeholder[(((((((((int)blockIdx.z) / 6) * 487872) + (rc_outer * 1936)) + (((int)threadIdx.z) * 70)) + (((int)threadIdx.x) * 7)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner))];\n        }\n      }\n    }\n    #pragma unroll\n    for (int ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1 < 6; ++ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) {\n      if (((((int)threadIdx.z) * 4) + (((((int)threadIdx.x) * 6) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) >> 4)) < 112) {\n        if ((((((int)threadIdx.z) * 64) + (((int)threadIdx.x) * 6)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) < 1792) {\n          if (((((int)threadIdx.x) * 6) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) < 64) {\n            placeholder_shared[((((((int)threadIdx.z) * 64) + (((int)threadIdx.x) * 6)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1))] = placeholder1[(((((((((int)blockIdx.z) % 6) * 451584) + (((int)threadIdx.z) * 16128)) + ((((((int)threadIdx.x) * 6) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) >> 4) * 4032)) + (rc_outer * 16)) + (((((int)threadIdx.x) * 6) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) & 15)))];\n          }\n        }\n      }\n    }\n    __syncthreads();\n    #pragma unroll\n    for (int rc_inner = 0; rc_inner < 16; ++rc_inner) {\n      #pragma unroll\n      for (int yy = 0; yy < 11; ++yy) {\n        compute[(yy)] = (compute[(yy)] + (pad_temp_shared[((((rc_inner * 121) + (yy * 11)) + ((int)threadIdx.x)))] * placeholder_shared[(((((int)threadIdx.z) * 16) + rc_inner))]));\n        compute[((yy + 11))] = (compute[((yy + 11))] + (pad_temp_shared[((((rc_inner * 121) + (yy * 11)) + ((int)threadIdx.x)))] * placeholder_shared[((((((int)threadIdx.z) * 16) + rc_inner) + 448))]));\n        compute[((yy + 22))] = (compute[((yy + 22))] + (pad_temp_shared[((((rc_inner * 121) + (yy * 11)) + ((int)threadIdx.x)))] * placeholder_shared[((((((int)threadIdx.z) * 16) + rc_inner) + 896))]));\n        compute[((yy + 33))] = (compute[((yy + 33))] + (pad_temp_shared[((((rc_inner * 121) + (yy * 11)) + ((int)threadIdx.x)))] * placeholder_shared[((((((int)threadIdx.z) * 16) + rc_inner) + 1344))]));\n      }\n    }\n  }\n  #pragma unroll\n  for (int ax2_inner_inner_inner = 0; ax2_inner_inner_inner < 11; ++ax2_inner_inner_inner) {\n    T_add[(((((((int)blockIdx.z) * 13552) + (((int)threadIdx.z) * 121)) + (ax2_inner_inner_inner * 11)) + ((int)threadIdx.x)))] = (compute[(ax2_inner_inner_inner)] + input2[(((((((int)blockIdx.z) * 13552) + (((int)threadIdx.z) * 121)) + (ax2_inner_inner_inner * 11)) + ((int)threadIdx.x)))]);\n    T_add[((((((((int)blockIdx.z) * 13552) + (((int)threadIdx.z) * 121)) + (ax2_inner_inner_inner * 11)) + ((int)threadIdx.x)) + 3388))] = (compute[((ax2_inner_inner_inner + 11))] + input2[((((((((int)blockIdx.z) * 13552) + (((int)threadIdx.z) * 121)) + (ax2_inner_inner_inner * 11)) + ((int)threadIdx.x)) + 3388))]);\n    T_add[((((((((int)blockIdx.z) * 13552) + (((int)threadIdx.z) * 121)) + (ax2_inner_inner_inner * 11)) + ((int)threadIdx.x)) + 6776))] = (compute[((ax2_inner_inner_inner + 22))] + input2[((((((((int)blockIdx.z) * 13552) + (((int)threadIdx.z) * 121)) + (ax2_inner_inner_inner * 11)) + ((int)threadIdx.x)) + 6776))]);\n    T_add[((((((((int)blockIdx.z) * 13552) + (((int)threadIdx.z) * 121)) + (ax2_inner_inner_inner * 11)) + ((int)threadIdx.x)) + 10164))] = (compute[((ax2_inner_inner_inner + 33))] + input2[((((((((int)blockIdx.z) * 13552) + (((int)threadIdx.z) * 121)) + (ax2_inner_inner_inner * 11)) + ((int)threadIdx.x)) + 10164))]);\n  }\n}\n", "gridDim": [1, 1, 768], "blockDim": [11, 1, 28]}