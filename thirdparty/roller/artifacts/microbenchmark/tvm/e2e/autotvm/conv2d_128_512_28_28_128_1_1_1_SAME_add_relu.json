{"parameters": {"input_shape": [128, 512, 28, 28], "filter_shape": [128, 512, 1, 1], "output_shape": [128, 128, 28, 28], "window_movement_strides": [1, 1], "padding_below_diff": [0, 0], "window_dilation_strides": [1, 1]}, "op_type": "Fused_Convolution_Add_Relu", "tvm_func_name": "conv2d_128_512_28_28_128_1_1_1_SAME_add_relu", "code": "extern \"C\" __global__ void conv2d_128_512_28_28_128_1_1_1_SAME_add_relu(float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ compute, float* __restrict__ input2) {\n  float compute1[32];\n  __shared__ float pad_temp_shared[224];\n  __shared__ float placeholder_shared[128];\n  for (int ff_init = 0; ff_init < 8; ++ff_init) {\n    compute1[(ff_init)] = 0.000000e+00f;\n    compute1[((ff_init + 8))] = 0.000000e+00f;\n    compute1[((ff_init + 16))] = 0.000000e+00f;\n    compute1[((ff_init + 24))] = 0.000000e+00f;\n  }\n  for (int rc_outer = 0; rc_outer < 256; ++rc_outer) {\n    __syncthreads();\n    pad_temp_shared[(((((int)threadIdx.z) * 28) + ((int)threadIdx.x)))] = placeholder[((((((((((int)blockIdx.z) >> 1) * 401408) + (rc_outer * 1568)) + ((((int)threadIdx.z) >> 2) * 784)) + (((int)blockIdx.y) * 112)) + ((((int)threadIdx.z) & 3) * 28)) + ((int)threadIdx.x)))];\n    if (((((int)threadIdx.z) * 8) + (((int)threadIdx.x) >> 1)) < 64) {\n      if (((((int)threadIdx.z) * 16) + ((int)threadIdx.x)) < 128) {\n        if (((int)threadIdx.x) < 16) {\n          placeholder_shared[(((((int)threadIdx.z) * 16) + ((int)threadIdx.x)))] = placeholder1[(((((((((int)blockIdx.z) & 1) * 32768) + (((int)threadIdx.z) * 4096)) + ((((int)threadIdx.x) >> 1) * 512)) + (rc_outer * 2)) + (((int)threadIdx.x) & 1)))];\n        }\n      }\n    }\n    __syncthreads();\n    for (int rc_inner = 0; rc_inner < 2; ++rc_inner) {\n      for (int ff = 0; ff < 8; ++ff) {\n        compute1[(ff)] = (compute1[(ff)] + (pad_temp_shared[(((rc_inner * 112) + ((int)threadIdx.x)))] * placeholder_shared[((((((int)threadIdx.z) * 16) + (ff * 2)) + rc_inner))]));\n        compute1[((ff + 8))] = (compute1[((ff + 8))] + (pad_temp_shared[((((rc_inner * 112) + ((int)threadIdx.x)) + 28))] * placeholder_shared[((((((int)threadIdx.z) * 16) + (ff * 2)) + rc_inner))]));\n        compute1[((ff + 16))] = (compute1[((ff + 16))] + (pad_temp_shared[((((rc_inner * 112) + ((int)threadIdx.x)) + 56))] * placeholder_shared[((((((int)threadIdx.z) * 16) + (ff * 2)) + rc_inner))]));\n        compute1[((ff + 24))] = (compute1[((ff + 24))] + (pad_temp_shared[((((rc_inner * 112) + ((int)threadIdx.x)) + 84))] * placeholder_shared[((((((int)threadIdx.z) * 16) + (ff * 2)) + rc_inner))]));\n      }\n    }\n  }\n  for (int i1_inner_inner_inner = 0; i1_inner_inner_inner < 8; ++i1_inner_inner_inner) {\n    compute[((((((((int)blockIdx.z) * 50176) + (((int)threadIdx.z) * 6272)) + (i1_inner_inner_inner * 784)) + (((int)blockIdx.y) * 112)) + ((int)threadIdx.x)))] = max((compute1[(i1_inner_inner_inner)] + input2[((((((((int)blockIdx.z) * 50176) + (((int)threadIdx.z) * 6272)) + (i1_inner_inner_inner * 784)) + (((int)blockIdx.y) * 112)) + ((int)threadIdx.x)))]), 0.000000e+00f);\n    compute[(((((((((int)blockIdx.z) * 50176) + (((int)threadIdx.z) * 6272)) + (i1_inner_inner_inner * 784)) + (((int)blockIdx.y) * 112)) + ((int)threadIdx.x)) + 28))] = max((compute1[((i1_inner_inner_inner + 8))] + input2[(((((((((int)blockIdx.z) * 50176) + (((int)threadIdx.z) * 6272)) + (i1_inner_inner_inner * 784)) + (((int)blockIdx.y) * 112)) + ((int)threadIdx.x)) + 28))]), 0.000000e+00f);\n    compute[(((((((((int)blockIdx.z) * 50176) + (((int)threadIdx.z) * 6272)) + (i1_inner_inner_inner * 784)) + (((int)blockIdx.y) * 112)) + ((int)threadIdx.x)) + 56))] = max((compute1[((i1_inner_inner_inner + 16))] + input2[(((((((((int)blockIdx.z) * 50176) + (((int)threadIdx.z) * 6272)) + (i1_inner_inner_inner * 784)) + (((int)blockIdx.y) * 112)) + ((int)threadIdx.x)) + 56))]), 0.000000e+00f);\n    compute[(((((((((int)blockIdx.z) * 50176) + (((int)threadIdx.z) * 6272)) + (i1_inner_inner_inner * 784)) + (((int)blockIdx.y) * 112)) + ((int)threadIdx.x)) + 84))] = max((compute1[((i1_inner_inner_inner + 24))] + input2[(((((((((int)blockIdx.z) * 50176) + (((int)threadIdx.z) * 6272)) + (i1_inner_inner_inner * 784)) + (((int)blockIdx.y) * 112)) + ((int)threadIdx.x)) + 84))]), 0.000000e+00f);\n  }\n}\n", "gridDim": [1, 7, 256], "blockDim": [28, 1, 8]}