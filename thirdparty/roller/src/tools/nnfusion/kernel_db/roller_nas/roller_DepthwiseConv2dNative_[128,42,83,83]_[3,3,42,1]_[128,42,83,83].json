{"parameters": {"input_shape": [128, 42, 83, 83], "filter_shape": [42, 1, 3, 3], "output_shape": [128, 42, 83, 83], "window_movement_strides": [1, 1], "padding_below_diff": [1, 1], "window_dilation_strides": [1, 1]}, "op_type": "DepthwiseConv2dNative", "tvm_func_name": "roller_DepthwiseConv2dNative__128_42_83_83___3_3_42_1___128_42_83_83_", "code": "extern \"C\" __global__ void roller_DepthwiseConv2dNative__128_42_83_83___3_3_42_1___128_42_83_83_(float* __restrict__ data, float* __restrict__ kernel, float* __restrict__ compute) {\n  float DepthwiseConv2d_local[2];\n  __shared__ float PaddedInput_shared[680];\n  __shared__ float compute_shared[9];\n  float PaddedInput_shared_local[2];\n  float compute_shared_local[1];\n  DepthwiseConv2d_local[(0)] = 0.000000e+00f;\n  DepthwiseConv2d_local[(1)] = 0.000000e+00f;\n  PaddedInput_shared[(((int)threadIdx.x))] = ((((1 <= (((((int)blockIdx.x) % 14) * 6) + (((int)threadIdx.x) / 85))) && (1 <= (((int)threadIdx.x) % 85))) && ((((int)threadIdx.x) % 85) < 84)) ? data[(((((((((int)blockIdx.x) / 14) * 6889) + ((((int)blockIdx.x) % 14) * 498)) + ((((int)threadIdx.x) / 85) * 83)) + (((int)threadIdx.x) % 85)) - 84))] : 0.000000e+00f);\n  PaddedInput_shared[((((int)threadIdx.x) + 288))] = (((((((((int)blockIdx.x) % 14) * 6) + ((((int)threadIdx.x) + 288) / 85)) < 84) && (1 <= ((((int)threadIdx.x) + 33) % 85))) && (((((int)threadIdx.x) + 33) % 85) < 84)) ? data[(((((((((int)blockIdx.x) / 14) * 6889) + ((((int)blockIdx.x) % 14) * 498)) + (((((int)threadIdx.x) + 288) / 85) * 83)) + ((((int)threadIdx.x) + 33) % 85)) - 84))] : 0.000000e+00f);\n  if (((int)threadIdx.x) < 104) {\n    if ((((((int)blockIdx.x) % 14) * 6) + ((((int)threadIdx.x) + 576) / 85)) < 85) {\n      PaddedInput_shared[((((int)threadIdx.x) + 576))] = (((((((((int)blockIdx.x) % 14) * 6) + ((((int)threadIdx.x) + 576) / 85)) < 84) && (1 <= ((((int)threadIdx.x) + 66) % 85))) && (((((int)threadIdx.x) + 66) % 85) < 84)) ? data[(((((((((int)blockIdx.x) / 14) * 6889) + ((((int)blockIdx.x) % 14) * 498)) + (((((int)threadIdx.x) + 576) / 85) * 83)) + ((((int)threadIdx.x) + 66) % 85)) - 84))] : 0.000000e+00f);\n    }\n  }\n  if (((int)threadIdx.x) < 9) {\n    compute_shared[(((int)threadIdx.x))] = kernel[(((((((int)blockIdx.x) % 588) / 14) * 9) + ((int)threadIdx.x)))];\n  }\n  __syncthreads();\n  for (int k_inner_outer = 0; k_inner_outer < 9; ++k_inner_outer) {\n    if (((((((int)blockIdx.x) % 14) * 6) + (((int)threadIdx.x) / 48)) + (k_inner_outer / 3)) < 85) {\n      PaddedInput_shared_local[(0)] = PaddedInput_shared[((((((((int)threadIdx.x) / 48) * 85) + ((k_inner_outer / 3) * 85)) + (((int)threadIdx.x) % 48)) + (k_inner_outer % 3)))];\n      if (((((int)threadIdx.x) % 48) + (k_inner_outer % 3)) < 37) {\n        PaddedInput_shared_local[(1)] = PaddedInput_shared[(((((((((int)threadIdx.x) / 48) * 85) + ((k_inner_outer / 3) * 85)) + (((int)threadIdx.x) % 48)) + (k_inner_outer % 3)) + 48))];\n      }\n    }\n    compute_shared_local[(0)] = compute_shared[(k_inner_outer)];\n    if ((((((int)blockIdx.x) % 14) * 6) + (((int)threadIdx.x) / 48)) < 83) {\n      DepthwiseConv2d_local[(0)] = (DepthwiseConv2d_local[(0)] + (PaddedInput_shared_local[(0)] * compute_shared_local[(0)]));\n      if ((((int)threadIdx.x) % 48) < 35) {\n        DepthwiseConv2d_local[(1)] = (DepthwiseConv2d_local[(1)] + (PaddedInput_shared_local[(1)] * compute_shared_local[(0)]));\n      }\n    }\n  }\n  if ((((((int)blockIdx.x) % 14) * 6) + (((int)threadIdx.x) / 48)) < 83) {\n    compute[((((((((int)blockIdx.x) / 14) * 6889) + ((((int)blockIdx.x) % 14) * 498)) + ((((int)threadIdx.x) / 48) * 83)) + (((int)threadIdx.x) % 48)))] = DepthwiseConv2d_local[(0)];\n    if ((((int)threadIdx.x) % 48) < 35) {\n      compute[(((((((((int)blockIdx.x) / 14) * 6889) + ((((int)blockIdx.x) % 14) * 498)) + ((((int)threadIdx.x) / 48) * 83)) + (((int)threadIdx.x) % 48)) + 48))] = DepthwiseConv2d_local[(1)];\n    }\n  }\n}\n", "gridDim": [75264, 1, 1], "blockDim": [288, 1, 1]}