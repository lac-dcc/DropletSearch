{"parameters": {"arg0_shape": [128, 256], "arg1_shape": [256, 256], "out_shape": [128, 256], "transpose_A": false, "transpose_B": false}, "op_type": "Dot", "tvm_func_name": "roller_Dot__128_256___256_256___256_256_", "code": "extern \"C\" __global__ void roller_Dot__128_256___256_256___256_256_(float* __restrict__ A, float* __restrict__ B, float* __restrict__ compute) {\n  float compute_local[32];\n  __shared__ float A_shared[4224];\n  __shared__ float B_shared[2048];\n  float A_shared_local[8];\n  float B_shared_local[4];\n  compute_local[(0)] = 0.000000e+00f;\n  compute_local[(4)] = 0.000000e+00f;\n  compute_local[(8)] = 0.000000e+00f;\n  compute_local[(12)] = 0.000000e+00f;\n  compute_local[(16)] = 0.000000e+00f;\n  compute_local[(20)] = 0.000000e+00f;\n  compute_local[(24)] = 0.000000e+00f;\n  compute_local[(28)] = 0.000000e+00f;\n  compute_local[(1)] = 0.000000e+00f;\n  compute_local[(5)] = 0.000000e+00f;\n  compute_local[(9)] = 0.000000e+00f;\n  compute_local[(13)] = 0.000000e+00f;\n  compute_local[(17)] = 0.000000e+00f;\n  compute_local[(21)] = 0.000000e+00f;\n  compute_local[(25)] = 0.000000e+00f;\n  compute_local[(29)] = 0.000000e+00f;\n  compute_local[(2)] = 0.000000e+00f;\n  compute_local[(6)] = 0.000000e+00f;\n  compute_local[(10)] = 0.000000e+00f;\n  compute_local[(14)] = 0.000000e+00f;\n  compute_local[(18)] = 0.000000e+00f;\n  compute_local[(22)] = 0.000000e+00f;\n  compute_local[(26)] = 0.000000e+00f;\n  compute_local[(30)] = 0.000000e+00f;\n  compute_local[(3)] = 0.000000e+00f;\n  compute_local[(7)] = 0.000000e+00f;\n  compute_local[(11)] = 0.000000e+00f;\n  compute_local[(15)] = 0.000000e+00f;\n  compute_local[(19)] = 0.000000e+00f;\n  compute_local[(23)] = 0.000000e+00f;\n  compute_local[(27)] = 0.000000e+00f;\n  compute_local[(31)] = 0.000000e+00f;\n  for (int k_outer = 0; k_outer < 8; ++k_outer) {\n    __syncthreads();\n    A_shared[((((((int)threadIdx.x) >> 5) * 33) + (((int)threadIdx.x) & 31)))] = A[(((((((int)threadIdx.x) >> 5) * 256) + (k_outer * 32)) + (((int)threadIdx.x) & 31)))];\n    A_shared[(((((((int)threadIdx.x) >> 5) * 33) + (((int)threadIdx.x) & 31)) + 528))] = A[((((((((int)threadIdx.x) >> 5) * 256) + (k_outer * 32)) + (((int)threadIdx.x) & 31)) + 4096))];\n    A_shared[(((((((int)threadIdx.x) >> 5) * 33) + (((int)threadIdx.x) & 31)) + 1056))] = A[((((((((int)threadIdx.x) >> 5) * 256) + (k_outer * 32)) + (((int)threadIdx.x) & 31)) + 8192))];\n    A_shared[(((((((int)threadIdx.x) >> 5) * 33) + (((int)threadIdx.x) & 31)) + 1584))] = A[((((((((int)threadIdx.x) >> 5) * 256) + (k_outer * 32)) + (((int)threadIdx.x) & 31)) + 12288))];\n    A_shared[(((((((int)threadIdx.x) >> 5) * 33) + (((int)threadIdx.x) & 31)) + 2112))] = A[((((((((int)threadIdx.x) >> 5) * 256) + (k_outer * 32)) + (((int)threadIdx.x) & 31)) + 16384))];\n    A_shared[(((((((int)threadIdx.x) >> 5) * 33) + (((int)threadIdx.x) & 31)) + 2640))] = A[((((((((int)threadIdx.x) >> 5) * 256) + (k_outer * 32)) + (((int)threadIdx.x) & 31)) + 20480))];\n    A_shared[(((((((int)threadIdx.x) >> 5) * 33) + (((int)threadIdx.x) & 31)) + 3168))] = A[((((((((int)threadIdx.x) >> 5) * 256) + (k_outer * 32)) + (((int)threadIdx.x) & 31)) + 24576))];\n    A_shared[(((((((int)threadIdx.x) >> 5) * 33) + (((int)threadIdx.x) & 31)) + 3696))] = A[((((((((int)threadIdx.x) >> 5) * 256) + (k_outer * 32)) + (((int)threadIdx.x) & 31)) + 28672))];\n    B_shared[(((int)threadIdx.x))] = B[(((((k_outer * 8192) + ((((int)threadIdx.x) >> 6) * 256)) + (((int)blockIdx.x) * 64)) + (((int)threadIdx.x) & 63)))];\n    B_shared[((((int)threadIdx.x) + 512))] = B[((((((k_outer * 8192) + ((((int)threadIdx.x) >> 6) * 256)) + (((int)blockIdx.x) * 64)) + (((int)threadIdx.x) & 63)) + 2048))];\n    B_shared[((((int)threadIdx.x) + 1024))] = B[((((((k_outer * 8192) + ((((int)threadIdx.x) >> 6) * 256)) + (((int)blockIdx.x) * 64)) + (((int)threadIdx.x) & 63)) + 4096))];\n    B_shared[((((int)threadIdx.x) + 1536))] = B[((((((k_outer * 8192) + ((((int)threadIdx.x) >> 6) * 256)) + (((int)blockIdx.x) * 64)) + (((int)threadIdx.x) & 63)) + 6144))];\n    __syncthreads();\n    for (int k_inner_outer = 0; k_inner_outer < 32; ++k_inner_outer) {\n      A_shared_local[(0)] = A_shared[((((((int)threadIdx.x) >> 4) * 33) + k_inner_outer))];\n      A_shared_local[(1)] = A_shared[(((((((int)threadIdx.x) >> 4) * 33) + k_inner_outer) + 1056))];\n      A_shared_local[(2)] = A_shared[(((((((int)threadIdx.x) >> 4) * 33) + k_inner_outer) + 2112))];\n      A_shared_local[(3)] = A_shared[(((((((int)threadIdx.x) >> 4) * 33) + k_inner_outer) + 3168))];\n      B_shared_local[(0)] = B_shared[(((k_inner_outer * 64) + (((int)threadIdx.x) & 15)))];\n      B_shared_local[(1)] = B_shared[((((k_inner_outer * 64) + (((int)threadIdx.x) & 15)) + 16))];\n      B_shared_local[(2)] = B_shared[((((k_inner_outer * 64) + (((int)threadIdx.x) & 15)) + 32))];\n      B_shared_local[(3)] = B_shared[((((k_inner_outer * 64) + (((int)threadIdx.x) & 15)) + 48))];\n      compute_local[(0)] = (compute_local[(0)] + (A_shared_local[(0)] * B_shared_local[(0)]));\n      compute_local[(1)] = (compute_local[(1)] + (A_shared_local[(0)] * B_shared_local[(1)]));\n      compute_local[(2)] = (compute_local[(2)] + (A_shared_local[(0)] * B_shared_local[(2)]));\n      compute_local[(3)] = (compute_local[(3)] + (A_shared_local[(0)] * B_shared_local[(3)]));\n      compute_local[(4)] = (compute_local[(4)] + (A_shared_local[(1)] * B_shared_local[(0)]));\n      compute_local[(5)] = (compute_local[(5)] + (A_shared_local[(1)] * B_shared_local[(1)]));\n      compute_local[(6)] = (compute_local[(6)] + (A_shared_local[(1)] * B_shared_local[(2)]));\n      compute_local[(7)] = (compute_local[(7)] + (A_shared_local[(1)] * B_shared_local[(3)]));\n      compute_local[(8)] = (compute_local[(8)] + (A_shared_local[(2)] * B_shared_local[(0)]));\n      compute_local[(9)] = (compute_local[(9)] + (A_shared_local[(2)] * B_shared_local[(1)]));\n      compute_local[(10)] = (compute_local[(10)] + (A_shared_local[(2)] * B_shared_local[(2)]));\n      compute_local[(11)] = (compute_local[(11)] + (A_shared_local[(2)] * B_shared_local[(3)]));\n      compute_local[(12)] = (compute_local[(12)] + (A_shared_local[(3)] * B_shared_local[(0)]));\n      compute_local[(13)] = (compute_local[(13)] + (A_shared_local[(3)] * B_shared_local[(1)]));\n      compute_local[(14)] = (compute_local[(14)] + (A_shared_local[(3)] * B_shared_local[(2)]));\n      compute_local[(15)] = (compute_local[(15)] + (A_shared_local[(3)] * B_shared_local[(3)]));\n    }\n  }\n  compute[(((((((int)threadIdx.x) >> 4) * 256) + (((int)blockIdx.x) * 64)) + (((int)threadIdx.x) & 15)))] = compute_local[(0)];\n  compute[((((((((int)threadIdx.x) >> 4) * 256) + (((int)blockIdx.x) * 64)) + (((int)threadIdx.x) & 15)) + 16))] = compute_local[(1)];\n  compute[((((((((int)threadIdx.x) >> 4) * 256) + (((int)blockIdx.x) * 64)) + (((int)threadIdx.x) & 15)) + 32))] = compute_local[(2)];\n  compute[((((((((int)threadIdx.x) >> 4) * 256) + (((int)blockIdx.x) * 64)) + (((int)threadIdx.x) & 15)) + 48))] = compute_local[(3)];\n  compute[((((((((int)threadIdx.x) >> 4) * 256) + (((int)blockIdx.x) * 64)) + (((int)threadIdx.x) & 15)) + 8192))] = compute_local[(4)];\n  compute[((((((((int)threadIdx.x) >> 4) * 256) + (((int)blockIdx.x) * 64)) + (((int)threadIdx.x) & 15)) + 8208))] = compute_local[(5)];\n  compute[((((((((int)threadIdx.x) >> 4) * 256) + (((int)blockIdx.x) * 64)) + (((int)threadIdx.x) & 15)) + 8224))] = compute_local[(6)];\n  compute[((((((((int)threadIdx.x) >> 4) * 256) + (((int)blockIdx.x) * 64)) + (((int)threadIdx.x) & 15)) + 8240))] = compute_local[(7)];\n  compute[((((((((int)threadIdx.x) >> 4) * 256) + (((int)blockIdx.x) * 64)) + (((int)threadIdx.x) & 15)) + 16384))] = compute_local[(8)];\n  compute[((((((((int)threadIdx.x) >> 4) * 256) + (((int)blockIdx.x) * 64)) + (((int)threadIdx.x) & 15)) + 16400))] = compute_local[(9)];\n  compute[((((((((int)threadIdx.x) >> 4) * 256) + (((int)blockIdx.x) * 64)) + (((int)threadIdx.x) & 15)) + 16416))] = compute_local[(10)];\n  compute[((((((((int)threadIdx.x) >> 4) * 256) + (((int)blockIdx.x) * 64)) + (((int)threadIdx.x) & 15)) + 16432))] = compute_local[(11)];\n  compute[((((((((int)threadIdx.x) >> 4) * 256) + (((int)blockIdx.x) * 64)) + (((int)threadIdx.x) & 15)) + 24576))] = compute_local[(12)];\n  compute[((((((((int)threadIdx.x) >> 4) * 256) + (((int)blockIdx.x) * 64)) + (((int)threadIdx.x) & 15)) + 24592))] = compute_local[(13)];\n  compute[((((((((int)threadIdx.x) >> 4) * 256) + (((int)blockIdx.x) * 64)) + (((int)threadIdx.x) & 15)) + 24608))] = compute_local[(14)];\n  compute[((((((((int)threadIdx.x) >> 4) * 256) + (((int)blockIdx.x) * 64)) + (((int)threadIdx.x) & 15)) + 24624))] = compute_local[(15)];\n}\n", "gridDim": [4, 1, 1], "blockDim": [512, 1, 1]}