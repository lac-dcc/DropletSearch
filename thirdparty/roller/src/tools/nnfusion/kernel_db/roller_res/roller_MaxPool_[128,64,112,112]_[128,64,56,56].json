{"parameters": {"input_shape": [128, 64, 112, 112], "output_shape": [128, 64, 56, 56], "window_shape": [3, 3], "window_stride": [2, 2], "padding_below": [0, 0]}, "op_type": "MaxPool", "tvm_func_name": "roller_MaxPool__128_64_112_112___128_64_56_56_", "code": "extern \"C\" __global__ void roller_MaxPool__128_64_112_112___128_64_56_56_(float* __restrict__ Pool2d, float* __restrict__ data) {\n  __shared__ float compute_shared[999];\n  if ((((((int)blockIdx.x) % 14) * 4) + (((int)threadIdx.x) >> 6)) < 55) {\n    if ((((int)threadIdx.x) & 63) < 55) {\n      Pool2d[((((((((int)blockIdx.x) / 14) * 3025) + ((((int)blockIdx.x) % 14) * 220)) + ((((int)threadIdx.x) >> 6) * 55)) + (((int)threadIdx.x) & 63)))] = -3.402823e+38f;\n    }\n  }\n  compute_shared[(((int)threadIdx.x))] = data[((((((int)blockIdx.x) * 896) + ((((int)threadIdx.x) / 111) * 112)) + (((int)threadIdx.x) % 111)))];\n  compute_shared[((((int)threadIdx.x) + 256))] = data[((((((int)blockIdx.x) * 896) + (((((int)threadIdx.x) + 256) / 111) * 112)) + ((((int)threadIdx.x) + 34) % 111)))];\n  compute_shared[((((int)threadIdx.x) + 512))] = data[((((((int)blockIdx.x) * 896) + (((((int)threadIdx.x) + 512) / 111) * 112)) + ((((int)threadIdx.x) + 68) % 111)))];\n  if (((int)threadIdx.x) < 231) {\n    compute_shared[((((int)threadIdx.x) + 768))] = (((((((int)blockIdx.x) % 14) * 8) + ((((int)threadIdx.x) + 768) / 111)) < 112) ? data[((((((int)blockIdx.x) * 896) + (((((int)threadIdx.x) + 768) / 111) * 112)) + ((((int)threadIdx.x) + 102) % 111)))] : 0.000000e+00f);\n  }\n  __syncthreads();\n  for (int k_inner_outer = 0; k_inner_outer < 9; ++k_inner_outer) {\n    if ((((((int)blockIdx.x) % 14) * 4) + (((int)threadIdx.x) >> 6)) < 55) {\n      if ((((int)threadIdx.x) & 63) < 55) {\n        Pool2d[((((((((int)blockIdx.x) / 14) * 3025) + ((((int)blockIdx.x) % 14) * 220)) + ((((int)threadIdx.x) >> 6) * 55)) + (((int)threadIdx.x) & 63)))] = max(Pool2d[((((((((int)blockIdx.x) / 14) * 3025) + ((((int)blockIdx.x) % 14) * 220)) + ((((int)threadIdx.x) >> 6) * 55)) + (((int)threadIdx.x) & 63)))], compute_shared[((((((((int)threadIdx.x) >> 6) * 222) + ((k_inner_outer / 3) * 111)) + ((((int)threadIdx.x) & 63) * 2)) + (k_inner_outer % 3)))]);\n      }\n    }\n  }\n}\n", "gridDim": [114688, 1, 1], "blockDim": [256, 1, 1]}