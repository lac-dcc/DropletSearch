{"parameters": {"arg0_shape": [128, 2048], "arg1_shape": [2048, 1000], "out_shape": [128, 1000], "transpose_A": false, "transpose_B": false}, "op_type": "Dot", "tvm_func_name": "roller_Dot__128_2048___2048_1000___128_1000_", "code": "extern \"C\" __global__ void roller_Dot__128_2048___2048_1000___128_1000_(float* __restrict__ A, float* __restrict__ B, float* __restrict__ compute) {\n  float compute_local[4];\n  __shared__ float A_shared[1056];\n  __shared__ float B_shared[1024];\n  float A_shared_local[2];\n  float B_shared_local[2];\n  compute_local[(0)] = 0.000000e+00f;\n  compute_local[(2)] = 0.000000e+00f;\n  compute_local[(1)] = 0.000000e+00f;\n  compute_local[(3)] = 0.000000e+00f;\n  for (int k_outer = 0; k_outer < 64; ++k_outer) {\n    __syncthreads();\n    A_shared[((((((int)threadIdx.x) >> 5) * 33) + (((int)threadIdx.x) & 31)))] = A[((((((((int)blockIdx.x) >> 5) * 65536) + ((((int)threadIdx.x) >> 5) * 2048)) + (k_outer * 32)) + (((int)threadIdx.x) & 31)))];\n    A_shared[(((((((int)threadIdx.x) >> 5) * 33) + (((int)threadIdx.x) & 31)) + 264))] = A[(((((((((int)blockIdx.x) >> 5) * 65536) + ((((int)threadIdx.x) >> 5) * 2048)) + (k_outer * 32)) + (((int)threadIdx.x) & 31)) + 16384))];\n    A_shared[(((((((int)threadIdx.x) >> 5) * 33) + (((int)threadIdx.x) & 31)) + 528))] = A[(((((((((int)blockIdx.x) >> 5) * 65536) + ((((int)threadIdx.x) >> 5) * 2048)) + (k_outer * 32)) + (((int)threadIdx.x) & 31)) + 32768))];\n    A_shared[(((((((int)threadIdx.x) >> 5) * 33) + (((int)threadIdx.x) & 31)) + 792))] = A[(((((((((int)blockIdx.x) >> 5) * 65536) + ((((int)threadIdx.x) >> 5) * 2048)) + (k_outer * 32)) + (((int)threadIdx.x) & 31)) + 49152))];\n    if ((((((int)blockIdx.x) & 31) * 32) + (((int)threadIdx.x) & 31)) < 1000) {\n      B_shared[(((int)threadIdx.x))] = B[(((((k_outer * 32000) + ((((int)threadIdx.x) >> 5) * 1000)) + ((((int)blockIdx.x) & 31) * 32)) + (((int)threadIdx.x) & 31)))];\n    }\n    if ((((((int)blockIdx.x) & 31) * 32) + (((int)threadIdx.x) & 31)) < 1000) {\n      B_shared[((((int)threadIdx.x) + 256))] = B[((((((k_outer * 32000) + ((((int)threadIdx.x) >> 5) * 1000)) + ((((int)blockIdx.x) & 31) * 32)) + (((int)threadIdx.x) & 31)) + 8000))];\n    }\n    if ((((((int)blockIdx.x) & 31) * 32) + (((int)threadIdx.x) & 31)) < 1000) {\n      B_shared[((((int)threadIdx.x) + 512))] = B[((((((k_outer * 32000) + ((((int)threadIdx.x) >> 5) * 1000)) + ((((int)blockIdx.x) & 31) * 32)) + (((int)threadIdx.x) & 31)) + 16000))];\n    }\n    if ((((((int)blockIdx.x) & 31) * 32) + (((int)threadIdx.x) & 31)) < 1000) {\n      B_shared[((((int)threadIdx.x) + 768))] = B[((((((k_outer * 32000) + ((((int)threadIdx.x) >> 5) * 1000)) + ((((int)blockIdx.x) & 31) * 32)) + (((int)threadIdx.x) & 31)) + 24000))];\n    }\n    __syncthreads();\n    for (int k_inner_outer = 0; k_inner_outer < 32; ++k_inner_outer) {\n      A_shared_local[(0)] = A_shared[((((((int)threadIdx.x) >> 4) * 33) + k_inner_outer))];\n      A_shared_local[(1)] = A_shared[(((((((int)threadIdx.x) >> 4) * 33) + k_inner_outer) + 528))];\n      if ((((((int)blockIdx.x) & 31) * 32) + (((int)threadIdx.x) & 15)) < 1000) {\n        B_shared_local[(0)] = B_shared[(((k_inner_outer * 32) + (((int)threadIdx.x) & 15)))];\n      }\n      if ((((((int)blockIdx.x) & 31) * 32) + (((int)threadIdx.x) & 15)) < 984) {\n        B_shared_local[(1)] = B_shared[((((k_inner_outer * 32) + (((int)threadIdx.x) & 15)) + 16))];\n      }\n      if ((((((int)blockIdx.x) & 31) * 32) + (((int)threadIdx.x) & 15)) < 1000) {\n        compute_local[(0)] = (compute_local[(0)] + (A_shared_local[(0)] * B_shared_local[(0)]));\n        compute_local[(2)] = (compute_local[(2)] + (A_shared_local[(1)] * B_shared_local[(0)]));\n      }\n      if ((((((int)blockIdx.x) & 31) * 32) + (((int)threadIdx.x) & 15)) < 984) {\n        compute_local[(1)] = (compute_local[(1)] + (A_shared_local[(0)] * B_shared_local[(1)]));\n        compute_local[(3)] = (compute_local[(3)] + (A_shared_local[(1)] * B_shared_local[(1)]));\n      }\n    }\n  }\n  if ((((((int)blockIdx.x) & 31) * 32) + (((int)threadIdx.x) & 15)) < 1000) {\n    compute[((((((((int)blockIdx.x) >> 5) * 32000) + ((((int)threadIdx.x) >> 4) * 1000)) + ((((int)blockIdx.x) & 31) * 32)) + (((int)threadIdx.x) & 15)))] = compute_local[(0)];\n    compute[(((((((((int)blockIdx.x) >> 5) * 32000) + ((((int)threadIdx.x) >> 4) * 1000)) + ((((int)blockIdx.x) & 31) * 32)) + (((int)threadIdx.x) & 15)) + 16000))] = compute_local[(2)];\n  }\n  if ((((((int)blockIdx.x) & 31) * 32) + (((int)threadIdx.x) & 15)) < 984) {\n    compute[(((((((((int)blockIdx.x) >> 5) * 32000) + ((((int)threadIdx.x) >> 4) * 1000)) + ((((int)blockIdx.x) & 31) * 32)) + (((int)threadIdx.x) & 15)) + 16))] = compute_local[(1)];\n    compute[(((((((((int)blockIdx.x) >> 5) * 32000) + ((((int)threadIdx.x) >> 4) * 1000)) + ((((int)blockIdx.x) & 31) * 32)) + (((int)threadIdx.x) & 15)) + 16016))] = compute_local[(3)];\n  }\n}\n", "gridDim": [128, 1, 1], "blockDim": [256, 1, 1]}