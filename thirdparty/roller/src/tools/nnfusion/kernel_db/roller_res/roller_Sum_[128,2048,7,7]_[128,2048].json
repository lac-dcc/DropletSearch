{"parameters": {"input_shape": [128, 2048, 7, 7], "output_shape": [128, 2048], "reduction_axis": [2, 3]}, "op_type": "Sum", "tvm_func_name": "roller_Sum__128_2048_7_7___128_2048_", "code": "extern \"C\" __global__ void roller_Sum__128_2048_7_7___128_2048_(float* __restrict__ A, float* __restrict__ compute) {\n  float compute_local[1];\n  __shared__ float A_shared[6272];\n  float A_shared_local[1];\n  compute_local[(0)] = 0.000000e+00f;\n  A_shared[(((int)threadIdx.x))] = A[(((((int)blockIdx.x) * 6272) + ((int)threadIdx.x)))];\n  A_shared[((((int)threadIdx.x) + 128))] = A[((((((int)blockIdx.x) * 6272) + ((int)threadIdx.x)) + 128))];\n  A_shared[((((int)threadIdx.x) + 256))] = A[((((((int)blockIdx.x) * 6272) + ((int)threadIdx.x)) + 256))];\n  A_shared[((((int)threadIdx.x) + 384))] = A[((((((int)blockIdx.x) * 6272) + ((int)threadIdx.x)) + 384))];\n  A_shared[((((int)threadIdx.x) + 512))] = A[((((((int)blockIdx.x) * 6272) + ((int)threadIdx.x)) + 512))];\n  A_shared[((((int)threadIdx.x) + 640))] = A[((((((int)blockIdx.x) * 6272) + ((int)threadIdx.x)) + 640))];\n  A_shared[((((int)threadIdx.x) + 768))] = A[((((((int)blockIdx.x) * 6272) + ((int)threadIdx.x)) + 768))];\n  A_shared[((((int)threadIdx.x) + 896))] = A[((((((int)blockIdx.x) * 6272) + ((int)threadIdx.x)) + 896))];\n  A_shared[((((int)threadIdx.x) + 1024))] = A[((((((int)blockIdx.x) * 6272) + ((int)threadIdx.x)) + 1024))];\n  A_shared[((((int)threadIdx.x) + 1152))] = A[((((((int)blockIdx.x) * 6272) + ((int)threadIdx.x)) + 1152))];\n  A_shared[((((int)threadIdx.x) + 1280))] = A[((((((int)blockIdx.x) * 6272) + ((int)threadIdx.x)) + 1280))];\n  A_shared[((((int)threadIdx.x) + 1408))] = A[((((((int)blockIdx.x) * 6272) + ((int)threadIdx.x)) + 1408))];\n  A_shared[((((int)threadIdx.x) + 1536))] = A[((((((int)blockIdx.x) * 6272) + ((int)threadIdx.x)) + 1536))];\n  A_shared[((((int)threadIdx.x) + 1664))] = A[((((((int)blockIdx.x) * 6272) + ((int)threadIdx.x)) + 1664))];\n  A_shared[((((int)threadIdx.x) + 1792))] = A[((((((int)blockIdx.x) * 6272) + ((int)threadIdx.x)) + 1792))];\n  A_shared[((((int)threadIdx.x) + 1920))] = A[((((((int)blockIdx.x) * 6272) + ((int)threadIdx.x)) + 1920))];\n  A_shared[((((int)threadIdx.x) + 2048))] = A[((((((int)blockIdx.x) * 6272) + ((int)threadIdx.x)) + 2048))];\n  A_shared[((((int)threadIdx.x) + 2176))] = A[((((((int)blockIdx.x) * 6272) + ((int)threadIdx.x)) + 2176))];\n  A_shared[((((int)threadIdx.x) + 2304))] = A[((((((int)blockIdx.x) * 6272) + ((int)threadIdx.x)) + 2304))];\n  A_shared[((((int)threadIdx.x) + 2432))] = A[((((((int)blockIdx.x) * 6272) + ((int)threadIdx.x)) + 2432))];\n  A_shared[((((int)threadIdx.x) + 2560))] = A[((((((int)blockIdx.x) * 6272) + ((int)threadIdx.x)) + 2560))];\n  A_shared[((((int)threadIdx.x) + 2688))] = A[((((((int)blockIdx.x) * 6272) + ((int)threadIdx.x)) + 2688))];\n  A_shared[((((int)threadIdx.x) + 2816))] = A[((((((int)blockIdx.x) * 6272) + ((int)threadIdx.x)) + 2816))];\n  A_shared[((((int)threadIdx.x) + 2944))] = A[((((((int)blockIdx.x) * 6272) + ((int)threadIdx.x)) + 2944))];\n  A_shared[((((int)threadIdx.x) + 3072))] = A[((((((int)blockIdx.x) * 6272) + ((int)threadIdx.x)) + 3072))];\n  A_shared[((((int)threadIdx.x) + 3200))] = A[((((((int)blockIdx.x) * 6272) + ((int)threadIdx.x)) + 3200))];\n  A_shared[((((int)threadIdx.x) + 3328))] = A[((((((int)blockIdx.x) * 6272) + ((int)threadIdx.x)) + 3328))];\n  A_shared[((((int)threadIdx.x) + 3456))] = A[((((((int)blockIdx.x) * 6272) + ((int)threadIdx.x)) + 3456))];\n  A_shared[((((int)threadIdx.x) + 3584))] = A[((((((int)blockIdx.x) * 6272) + ((int)threadIdx.x)) + 3584))];\n  A_shared[((((int)threadIdx.x) + 3712))] = A[((((((int)blockIdx.x) * 6272) + ((int)threadIdx.x)) + 3712))];\n  A_shared[((((int)threadIdx.x) + 3840))] = A[((((((int)blockIdx.x) * 6272) + ((int)threadIdx.x)) + 3840))];\n  A_shared[((((int)threadIdx.x) + 3968))] = A[((((((int)blockIdx.x) * 6272) + ((int)threadIdx.x)) + 3968))];\n  A_shared[((((int)threadIdx.x) + 4096))] = A[((((((int)blockIdx.x) * 6272) + ((int)threadIdx.x)) + 4096))];\n  A_shared[((((int)threadIdx.x) + 4224))] = A[((((((int)blockIdx.x) * 6272) + ((int)threadIdx.x)) + 4224))];\n  A_shared[((((int)threadIdx.x) + 4352))] = A[((((((int)blockIdx.x) * 6272) + ((int)threadIdx.x)) + 4352))];\n  A_shared[((((int)threadIdx.x) + 4480))] = A[((((((int)blockIdx.x) * 6272) + ((int)threadIdx.x)) + 4480))];\n  A_shared[((((int)threadIdx.x) + 4608))] = A[((((((int)blockIdx.x) * 6272) + ((int)threadIdx.x)) + 4608))];\n  A_shared[((((int)threadIdx.x) + 4736))] = A[((((((int)blockIdx.x) * 6272) + ((int)threadIdx.x)) + 4736))];\n  A_shared[((((int)threadIdx.x) + 4864))] = A[((((((int)blockIdx.x) * 6272) + ((int)threadIdx.x)) + 4864))];\n  A_shared[((((int)threadIdx.x) + 4992))] = A[((((((int)blockIdx.x) * 6272) + ((int)threadIdx.x)) + 4992))];\n  A_shared[((((int)threadIdx.x) + 5120))] = A[((((((int)blockIdx.x) * 6272) + ((int)threadIdx.x)) + 5120))];\n  A_shared[((((int)threadIdx.x) + 5248))] = A[((((((int)blockIdx.x) * 6272) + ((int)threadIdx.x)) + 5248))];\n  A_shared[((((int)threadIdx.x) + 5376))] = A[((((((int)blockIdx.x) * 6272) + ((int)threadIdx.x)) + 5376))];\n  A_shared[((((int)threadIdx.x) + 5504))] = A[((((((int)blockIdx.x) * 6272) + ((int)threadIdx.x)) + 5504))];\n  A_shared[((((int)threadIdx.x) + 5632))] = A[((((((int)blockIdx.x) * 6272) + ((int)threadIdx.x)) + 5632))];\n  A_shared[((((int)threadIdx.x) + 5760))] = A[((((((int)blockIdx.x) * 6272) + ((int)threadIdx.x)) + 5760))];\n  A_shared[((((int)threadIdx.x) + 5888))] = A[((((((int)blockIdx.x) * 6272) + ((int)threadIdx.x)) + 5888))];\n  A_shared[((((int)threadIdx.x) + 6016))] = A[((((((int)blockIdx.x) * 6272) + ((int)threadIdx.x)) + 6016))];\n  A_shared[((((int)threadIdx.x) + 6144))] = A[((((((int)blockIdx.x) * 6272) + ((int)threadIdx.x)) + 6144))];\n  __syncthreads();\n  for (int k_inner_outer = 0; k_inner_outer < 49; ++k_inner_outer) {\n    A_shared_local[(0)] = A_shared[(((((int)threadIdx.x) * 49) + k_inner_outer))];\n    compute_local[(0)] = (compute_local[(0)] + A_shared_local[(0)]);\n  }\n  compute[(((((int)blockIdx.x) * 128) + ((int)threadIdx.x)))] = compute_local[(0)];\n}\n", "gridDim": [2048, 1, 1], "blockDim": [128, 1, 1]}